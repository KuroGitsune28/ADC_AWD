
ADC_AWD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08008168  08008168  00018168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085e0  080085e0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080085e0  080085e0  000185e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085e8  080085e8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085e8  080085e8  000185e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085ec  080085ec  000185ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080085f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000204  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003d8  200003d8  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201fe  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009c1a  00000000  00000000  00020241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b53  00000000  00000000  00029e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000888  00000000  00000000  0002b9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000067f  00000000  00000000  0002c238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022355  00000000  00000000  0002c8b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000aea4  00000000  00000000  0004ec0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d0fed  00000000  00000000  00059ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003770  00000000  00000000  0012aaa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0012e210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800814c 	.word	0x0800814c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800814c 	.word	0x0800814c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a8 	b.w	8000ff0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83e 	bl	8000d28 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	4605      	mov	r5, r0
 8000cbc:	460c      	mov	r4, r1
 8000cbe:	4628      	mov	r0, r5
 8000cc0:	4621      	mov	r1, r4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f7ff ff09 	bl	8000adc <__aeabi_dcmplt>
 8000cca:	b928      	cbnz	r0, 8000cd8 <__aeabi_d2lz+0x20>
 8000ccc:	4628      	mov	r0, r5
 8000cce:	4621      	mov	r1, r4
 8000cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd4:	f000 b80a 	b.w	8000cec <__aeabi_d2ulz>
 8000cd8:	4628      	mov	r0, r5
 8000cda:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000cde:	f000 f805 	bl	8000cec <__aeabi_d2ulz>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	bd38      	pop	{r3, r4, r5, pc}
 8000cea:	bf00      	nop

08000cec <__aeabi_d2ulz>:
 8000cec:	b5d0      	push	{r4, r6, r7, lr}
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__aeabi_d2ulz+0x34>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4606      	mov	r6, r0
 8000cf4:	460f      	mov	r7, r1
 8000cf6:	f7ff fc7f 	bl	80005f8 <__aeabi_dmul>
 8000cfa:	f7ff ff55 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfe:	4604      	mov	r4, r0
 8000d00:	f7ff fc00 	bl	8000504 <__aeabi_ui2d>
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <__aeabi_d2ulz+0x38>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f7ff fc76 	bl	80005f8 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4630      	mov	r0, r6
 8000d12:	4639      	mov	r1, r7
 8000d14:	f7ff fab8 	bl	8000288 <__aeabi_dsub>
 8000d18:	f7ff ff46 	bl	8000ba8 <__aeabi_d2uiz>
 8000d1c:	4621      	mov	r1, r4
 8000d1e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d20:	3df00000 	.word	0x3df00000
 8000d24:	41f00000 	.word	0x41f00000

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9e08      	ldr	r6, [sp, #32]
 8000d2e:	460d      	mov	r5, r1
 8000d30:	4604      	mov	r4, r0
 8000d32:	460f      	mov	r7, r1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d14a      	bne.n	8000dce <__udivmoddi4+0xa6>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4694      	mov	ip, r2
 8000d3c:	d965      	bls.n	8000e0a <__udivmoddi4+0xe2>
 8000d3e:	fab2 f382 	clz	r3, r2
 8000d42:	b143      	cbz	r3, 8000d56 <__udivmoddi4+0x2e>
 8000d44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d48:	f1c3 0220 	rsb	r2, r3, #32
 8000d4c:	409f      	lsls	r7, r3
 8000d4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d52:	4317      	orrs	r7, r2
 8000d54:	409c      	lsls	r4, r3
 8000d56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d5a:	fa1f f58c 	uxth.w	r5, ip
 8000d5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d62:	0c22      	lsrs	r2, r4, #16
 8000d64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d6c:	fb01 f005 	mul.w	r0, r1, r5
 8000d70:	4290      	cmp	r0, r2
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x62>
 8000d74:	eb1c 0202 	adds.w	r2, ip, r2
 8000d78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d7c:	f080 811b 	bcs.w	8000fb6 <__udivmoddi4+0x28e>
 8000d80:	4290      	cmp	r0, r2
 8000d82:	f240 8118 	bls.w	8000fb6 <__udivmoddi4+0x28e>
 8000d86:	3902      	subs	r1, #2
 8000d88:	4462      	add	r2, ip
 8000d8a:	1a12      	subs	r2, r2, r0
 8000d8c:	b2a4      	uxth	r4, r4
 8000d8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d9a:	fb00 f505 	mul.w	r5, r0, r5
 8000d9e:	42a5      	cmp	r5, r4
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x90>
 8000da2:	eb1c 0404 	adds.w	r4, ip, r4
 8000da6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000daa:	f080 8106 	bcs.w	8000fba <__udivmoddi4+0x292>
 8000dae:	42a5      	cmp	r5, r4
 8000db0:	f240 8103 	bls.w	8000fba <__udivmoddi4+0x292>
 8000db4:	4464      	add	r4, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbc:	1b64      	subs	r4, r4, r5
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11e      	cbz	r6, 8000dca <__udivmoddi4+0xa2>
 8000dc2:	40dc      	lsrs	r4, r3
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0xbc>
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	f000 80ec 	beq.w	8000fb0 <__udivmoddi4+0x288>
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e9c6 0500 	strd	r0, r5, [r6]
 8000dde:	4608      	mov	r0, r1
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	fab3 f183 	clz	r1, r3
 8000de8:	2900      	cmp	r1, #0
 8000dea:	d149      	bne.n	8000e80 <__udivmoddi4+0x158>
 8000dec:	42ab      	cmp	r3, r5
 8000dee:	d302      	bcc.n	8000df6 <__udivmoddi4+0xce>
 8000df0:	4282      	cmp	r2, r0
 8000df2:	f200 80f7 	bhi.w	8000fe4 <__udivmoddi4+0x2bc>
 8000df6:	1a84      	subs	r4, r0, r2
 8000df8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	4617      	mov	r7, r2
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d0e2      	beq.n	8000dca <__udivmoddi4+0xa2>
 8000e04:	e9c6 4700 	strd	r4, r7, [r6]
 8000e08:	e7df      	b.n	8000dca <__udivmoddi4+0xa2>
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xe6>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f382 	clz	r3, r2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 808f 	bne.w	8000f36 <__udivmoddi4+0x20e>
 8000e18:	1a8a      	subs	r2, r1, r2
 8000e1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1e:	fa1f fe8c 	uxth.w	lr, ip
 8000e22:	2101      	movs	r1, #1
 8000e24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e28:	fb07 2015 	mls	r0, r7, r5, r2
 8000e2c:	0c22      	lsrs	r2, r4, #16
 8000e2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e32:	fb0e f005 	mul.w	r0, lr, r5
 8000e36:	4290      	cmp	r0, r2
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x124>
 8000e3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x122>
 8000e44:	4290      	cmp	r0, r2
 8000e46:	f200 80ca 	bhi.w	8000fde <__udivmoddi4+0x2b6>
 8000e4a:	4645      	mov	r5, r8
 8000e4c:	1a12      	subs	r2, r2, r0
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e54:	fb07 2210 	mls	r2, r7, r0, r2
 8000e58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e60:	45a6      	cmp	lr, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x14e>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e6c:	d202      	bcs.n	8000e74 <__udivmoddi4+0x14c>
 8000e6e:	45a6      	cmp	lr, r4
 8000e70:	f200 80ba 	bhi.w	8000fe8 <__udivmoddi4+0x2c0>
 8000e74:	4610      	mov	r0, r2
 8000e76:	eba4 040e 	sub.w	r4, r4, lr
 8000e7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7e:	e79f      	b.n	8000dc0 <__udivmoddi4+0x98>
 8000e80:	f1c1 0720 	rsb	r7, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e92:	fa20 f307 	lsr.w	r3, r0, r7
 8000e96:	40fd      	lsrs	r5, r7
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fa00 f901 	lsl.w	r9, r0, r1
 8000e9e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000ea2:	fa1f fe8c 	uxth.w	lr, ip
 8000ea6:	fbb5 f8f0 	udiv	r8, r5, r0
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb00 5518 	mls	r5, r0, r8, r5
 8000eb0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eb4:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb8:	42a5      	cmp	r5, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d90b      	bls.n	8000ed8 <__udivmoddi4+0x1b0>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec8:	f080 8087 	bcs.w	8000fda <__udivmoddi4+0x2b2>
 8000ecc:	42a5      	cmp	r5, r4
 8000ece:	f240 8084 	bls.w	8000fda <__udivmoddi4+0x2b2>
 8000ed2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed6:	4464      	add	r4, ip
 8000ed8:	1b64      	subs	r4, r4, r5
 8000eda:	b29d      	uxth	r5, r3
 8000edc:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee0:	fb00 4413 	mls	r4, r0, r3, r4
 8000ee4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eec:	45a6      	cmp	lr, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1da>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ef8:	d26b      	bcs.n	8000fd2 <__udivmoddi4+0x2aa>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	d969      	bls.n	8000fd2 <__udivmoddi4+0x2aa>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	4464      	add	r4, ip
 8000f02:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000f06:	fba0 8302 	umull	r8, r3, r0, r2
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	429c      	cmp	r4, r3
 8000f10:	46c6      	mov	lr, r8
 8000f12:	461d      	mov	r5, r3
 8000f14:	d355      	bcc.n	8000fc2 <__udivmoddi4+0x29a>
 8000f16:	d052      	beq.n	8000fbe <__udivmoddi4+0x296>
 8000f18:	b156      	cbz	r6, 8000f30 <__udivmoddi4+0x208>
 8000f1a:	ebb9 030e 	subs.w	r3, r9, lr
 8000f1e:	eb64 0405 	sbc.w	r4, r4, r5
 8000f22:	fa04 f707 	lsl.w	r7, r4, r7
 8000f26:	40cb      	lsrs	r3, r1
 8000f28:	40cc      	lsrs	r4, r1
 8000f2a:	431f      	orrs	r7, r3
 8000f2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f30:	2100      	movs	r1, #0
 8000f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f36:	f1c3 0120 	rsb	r1, r3, #32
 8000f3a:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3e:	fa20 f201 	lsr.w	r2, r0, r1
 8000f42:	fa25 f101 	lsr.w	r1, r5, r1
 8000f46:	409d      	lsls	r5, r3
 8000f48:	432a      	orrs	r2, r5
 8000f4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4e:	fa1f fe8c 	uxth.w	lr, ip
 8000f52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f56:	fb07 1510 	mls	r5, r7, r0, r1
 8000f5a:	0c11      	lsrs	r1, r2, #16
 8000f5c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f60:	fb00 f50e 	mul.w	r5, r0, lr
 8000f64:	428d      	cmp	r5, r1
 8000f66:	fa04 f403 	lsl.w	r4, r4, r3
 8000f6a:	d908      	bls.n	8000f7e <__udivmoddi4+0x256>
 8000f6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f70:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f74:	d22f      	bcs.n	8000fd6 <__udivmoddi4+0x2ae>
 8000f76:	428d      	cmp	r5, r1
 8000f78:	d92d      	bls.n	8000fd6 <__udivmoddi4+0x2ae>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4461      	add	r1, ip
 8000f7e:	1b49      	subs	r1, r1, r5
 8000f80:	b292      	uxth	r2, r2
 8000f82:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f86:	fb07 1115 	mls	r1, r7, r5, r1
 8000f8a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8e:	fb05 f10e 	mul.w	r1, r5, lr
 8000f92:	4291      	cmp	r1, r2
 8000f94:	d908      	bls.n	8000fa8 <__udivmoddi4+0x280>
 8000f96:	eb1c 0202 	adds.w	r2, ip, r2
 8000f9a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9e:	d216      	bcs.n	8000fce <__udivmoddi4+0x2a6>
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d914      	bls.n	8000fce <__udivmoddi4+0x2a6>
 8000fa4:	3d02      	subs	r5, #2
 8000fa6:	4462      	add	r2, ip
 8000fa8:	1a52      	subs	r2, r2, r1
 8000faa:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fae:	e739      	b.n	8000e24 <__udivmoddi4+0xfc>
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	4630      	mov	r0, r6
 8000fb4:	e709      	b.n	8000dca <__udivmoddi4+0xa2>
 8000fb6:	4639      	mov	r1, r7
 8000fb8:	e6e7      	b.n	8000d8a <__udivmoddi4+0x62>
 8000fba:	4610      	mov	r0, r2
 8000fbc:	e6fc      	b.n	8000db8 <__udivmoddi4+0x90>
 8000fbe:	45c1      	cmp	r9, r8
 8000fc0:	d2aa      	bcs.n	8000f18 <__udivmoddi4+0x1f0>
 8000fc2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fc6:	eb63 050c 	sbc.w	r5, r3, ip
 8000fca:	3801      	subs	r0, #1
 8000fcc:	e7a4      	b.n	8000f18 <__udivmoddi4+0x1f0>
 8000fce:	4645      	mov	r5, r8
 8000fd0:	e7ea      	b.n	8000fa8 <__udivmoddi4+0x280>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	e795      	b.n	8000f02 <__udivmoddi4+0x1da>
 8000fd6:	4640      	mov	r0, r8
 8000fd8:	e7d1      	b.n	8000f7e <__udivmoddi4+0x256>
 8000fda:	46d0      	mov	r8, sl
 8000fdc:	e77c      	b.n	8000ed8 <__udivmoddi4+0x1b0>
 8000fde:	3d02      	subs	r5, #2
 8000fe0:	4462      	add	r2, ip
 8000fe2:	e733      	b.n	8000e4c <__udivmoddi4+0x124>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70b      	b.n	8000e00 <__udivmoddi4+0xd8>
 8000fe8:	4464      	add	r4, ip
 8000fea:	3802      	subs	r0, #2
 8000fec:	e743      	b.n	8000e76 <__udivmoddi4+0x14e>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ffc:	1d39      	adds	r1, r7, #4
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	2201      	movs	r2, #1
 8001004:	4803      	ldr	r0, [pc, #12]	; (8001014 <__io_putchar+0x20>)
 8001006:	f002 f8dd 	bl	80031c4 <HAL_UART_Transmit>
  return ch;
 800100a:	687b      	ldr	r3, [r7, #4]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000238 	.word	0x20000238

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101c:	f000 fb4c 	bl	80016b8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001020:	f000 f842 	bl	80010a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001024:	f000 f93e 	bl	80012a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001028:	f000 f89e 	bl	8001168 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800102c:	f000 f910 	bl	8001250 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 8001030:	4817      	ldr	r0, [pc, #92]	; (8001090 <main+0x78>)
 8001032:	f000 fca1 	bl	8001978 <HAL_ADC_Start_IT>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <main+0x28>
  {
	  Error_Handler();
 800103c:	f000 f958 	bl	80012f0 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  if(AWD_Flag == SET)
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <main+0x7c>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b01      	cmp	r3, #1
 8001048:	d116      	bne.n	8001078 <main+0x60>
	  	  {
	  		  printf("Outside the Window\r\n");
 800104a:	4813      	ldr	r0, [pc, #76]	; (8001098 <main+0x80>)
 800104c:	f003 fc0a 	bl	8004864 <puts>
	  		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001050:	f04f 31ff 	mov.w	r1, #4294967295
 8001054:	480e      	ldr	r0, [pc, #56]	; (8001090 <main+0x78>)
 8001056:	f000 fc04 	bl	8001862 <HAL_ADC_PollForConversion>
	  		  count = HAL_ADC_GetValue(&hadc1);
 800105a:	480d      	ldr	r0, [pc, #52]	; (8001090 <main+0x78>)
 800105c:	f000 fe78 	bl	8001d50 <HAL_ADC_GetValue>
 8001060:	4603      	mov	r3, r0
 8001062:	b29a      	uxth	r2, r3
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <main+0x84>)
 8001066:	801a      	strh	r2, [r3, #0]
	  		  printf("count : %d\r\n",count);
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <main+0x84>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	b29b      	uxth	r3, r3
 800106e:	4619      	mov	r1, r3
 8001070:	480b      	ldr	r0, [pc, #44]	; (80010a0 <main+0x88>)
 8001072:	f003 fb91 	bl	8004798 <iprintf>
 8001076:	e002      	b.n	800107e <main+0x66>

	  	  }
	  	  else
	  	  {
	  		  printf("Inside the Window\r\n");
 8001078:	480a      	ldr	r0, [pc, #40]	; (80010a4 <main+0x8c>)
 800107a:	f003 fbf3 	bl	8004864 <puts>
	  	  }
	  	  AWD_Flag = RESET;
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <main+0x7c>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
	  	  HAL_Delay(1000);// if delay removed then it wont reset;
 8001084:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001088:	f000 fb84 	bl	8001794 <HAL_Delay>
	  	  if(AWD_Flag == SET)
 800108c:	e7d8      	b.n	8001040 <main+0x28>
 800108e:	bf00      	nop
 8001090:	200001f0 	.word	0x200001f0
 8001094:	20000280 	.word	0x20000280
 8001098:	08008168 	.word	0x08008168
 800109c:	20000282 	.word	0x20000282
 80010a0:	0800817c 	.word	0x0800817c
 80010a4:	0800818c 	.word	0x0800818c

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b094      	sub	sp, #80	; 0x50
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0320 	add.w	r3, r7, #32
 80010b2:	2230      	movs	r2, #48	; 0x30
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 fcd4 	bl	8004a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	4b23      	ldr	r3, [pc, #140]	; (8001160 <SystemClock_Config+0xb8>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	4a22      	ldr	r2, [pc, #136]	; (8001160 <SystemClock_Config+0xb8>)
 80010d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010da:	6413      	str	r3, [r2, #64]	; 0x40
 80010dc:	4b20      	ldr	r3, [pc, #128]	; (8001160 <SystemClock_Config+0xb8>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e8:	2300      	movs	r3, #0
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <SystemClock_Config+0xbc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <SystemClock_Config+0xbc>)
 80010f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <SystemClock_Config+0xbc>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001104:	2302      	movs	r3, #2
 8001106:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001108:	2301      	movs	r3, #1
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800110c:	2310      	movs	r3, #16
 800110e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001110:	2300      	movs	r3, #0
 8001112:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001114:	f107 0320 	add.w	r3, r7, #32
 8001118:	4618      	mov	r0, r3
 800111a:	f001 fb67 	bl	80027ec <HAL_RCC_OscConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001124:	f000 f8e4 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001128:	230f      	movs	r3, #15
 800112a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001134:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001138:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800113a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f001 fdc8 	bl	8002cdc <HAL_RCC_ClockConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001152:	f000 f8cd 	bl	80012f0 <Error_Handler>
  }
}
 8001156:	bf00      	nop
 8001158:	3750      	adds	r7, #80	; 0x50
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800
 8001164:	40007000 	.word	0x40007000

08001168 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]
 800117e:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001180:	463b      	mov	r3, r7
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800118c:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <MX_ADC1_Init+0xd8>)
 800118e:	4a2d      	ldr	r2, [pc, #180]	; (8001244 <MX_ADC1_Init+0xdc>)
 8001190:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001192:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <MX_ADC1_Init+0xd8>)
 8001194:	2200      	movs	r2, #0
 8001196:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001198:	4b29      	ldr	r3, [pc, #164]	; (8001240 <MX_ADC1_Init+0xd8>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800119e:	4b28      	ldr	r3, [pc, #160]	; (8001240 <MX_ADC1_Init+0xd8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011a4:	4b26      	ldr	r3, [pc, #152]	; (8001240 <MX_ADC1_Init+0xd8>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011aa:	4b25      	ldr	r3, [pc, #148]	; (8001240 <MX_ADC1_Init+0xd8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b2:	4b23      	ldr	r3, [pc, #140]	; (8001240 <MX_ADC1_Init+0xd8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <MX_ADC1_Init+0xd8>)
 80011ba:	4a23      	ldr	r2, [pc, #140]	; (8001248 <MX_ADC1_Init+0xe0>)
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <MX_ADC1_Init+0xd8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011c4:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <MX_ADC1_Init+0xd8>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ca:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <MX_ADC1_Init+0xd8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_SEQ_CONV;
 80011d2:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <MX_ADC1_Init+0xd8>)
 80011d4:	2202      	movs	r2, #2
 80011d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d8:	4819      	ldr	r0, [pc, #100]	; (8001240 <MX_ADC1_Init+0xd8>)
 80011da:	f000 faff 	bl	80017dc <HAL_ADC_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80011e4:	f000 f884 	bl	80012f0 <Error_Handler>
  }

  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80011e8:	4b18      	ldr	r3, [pc, #96]	; (800124c <MX_ADC1_Init+0xe4>)
 80011ea:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 3000;
 80011ec:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80011f0:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.LowThreshold = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.Channel = ADC_CHANNEL_6;
 80011f6:	2306      	movs	r3, #6
 80011f8:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.ITMode = ENABLE;
 80011fa:	2301      	movs	r3, #1
 80011fc:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	4619      	mov	r1, r3
 8001206:	480e      	ldr	r0, [pc, #56]	; (8001240 <MX_ADC1_Init+0xd8>)
 8001208:	f000 fee2 	bl	8001fd0 <HAL_ADC_AnalogWDGConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001212:	f000 f86d 	bl	80012f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001216:	2306      	movs	r3, #6
 8001218:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800121a:	2301      	movs	r3, #1
 800121c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800121e:	2306      	movs	r3, #6
 8001220:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001222:	463b      	mov	r3, r7
 8001224:	4619      	mov	r1, r3
 8001226:	4806      	ldr	r0, [pc, #24]	; (8001240 <MX_ADC1_Init+0xd8>)
 8001228:	f000 fdb0 	bl	8001d8c <HAL_ADC_ConfigChannel>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001232:	f000 f85d 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	3728      	adds	r7, #40	; 0x28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200001f0 	.word	0x200001f0
 8001244:	40012000 	.word	0x40012000
 8001248:	0f000001 	.word	0x0f000001
 800124c:	00800200 	.word	0x00800200

08001250 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_USART2_UART_Init+0x4c>)
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <MX_USART2_UART_Init+0x50>)
 8001258:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <MX_USART2_UART_Init+0x4c>)
 800125c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001260:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_USART2_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_USART2_UART_Init+0x4c>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <MX_USART2_UART_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_USART2_UART_Init+0x4c>)
 8001276:	220c      	movs	r2, #12
 8001278:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <MX_USART2_UART_Init+0x4c>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_USART2_UART_Init+0x4c>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_USART2_UART_Init+0x4c>)
 8001288:	f001 ff4c 	bl	8003124 <HAL_UART_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001292:	f000 f82d 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000238 	.word	0x20000238
 80012a0:	40004400 	.word	0x40004400

080012a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <MX_GPIO_Init+0x2c>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <MX_GPIO_Init+0x2c>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <MX_GPIO_Init+0x2c>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	40023800 	.word	0x40023800

080012d4 <HAL_ADC_LevelOutOfWindowCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
//	printf("Callback\r\n");
	AWD_Flag = SET;
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <HAL_ADC_LevelOutOfWindowCallback+0x18>)
 80012de:	2201      	movs	r2, #1
 80012e0:	701a      	strb	r2, [r3, #0]
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	20000280 	.word	0x20000280

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <Error_Handler+0x8>
	...

080012fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <HAL_MspInit+0x4c>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <HAL_MspInit+0x4c>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	603b      	str	r3, [r7, #0]
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_MspInit+0x4c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <HAL_MspInit+0x4c>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132c:	6413      	str	r3, [r2, #64]	; 0x40
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_MspInit+0x4c>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800133a:	2007      	movs	r0, #7
 800133c:	f001 f87a 	bl	8002434 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800

0800134c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <HAL_ADC_MspInit+0x8c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d12f      	bne.n	80013ce <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <HAL_ADC_MspInit+0x90>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4a19      	ldr	r2, [pc, #100]	; (80013dc <HAL_ADC_MspInit+0x90>)
 8001378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137c:	6453      	str	r3, [r2, #68]	; 0x44
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <HAL_ADC_MspInit+0x90>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <HAL_ADC_MspInit+0x90>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a12      	ldr	r2, [pc, #72]	; (80013dc <HAL_ADC_MspInit+0x90>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <HAL_ADC_MspInit+0x90>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013a6:	2340      	movs	r3, #64	; 0x40
 80013a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013aa:	2303      	movs	r3, #3
 80013ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	4809      	ldr	r0, [pc, #36]	; (80013e0 <HAL_ADC_MspInit+0x94>)
 80013ba:	f001 f87d 	bl	80024b8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	2012      	movs	r0, #18
 80013c4:	f001 f841 	bl	800244a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80013c8:	2012      	movs	r0, #18
 80013ca:	f001 f85a 	bl	8002482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013ce:	bf00      	nop
 80013d0:	3728      	adds	r7, #40	; 0x28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40012000 	.word	0x40012000
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020000 	.word	0x40020000

080013e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a19      	ldr	r2, [pc, #100]	; (8001468 <HAL_UART_MspInit+0x84>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d12b      	bne.n	800145e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <HAL_UART_MspInit+0x88>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	4a17      	ldr	r2, [pc, #92]	; (800146c <HAL_UART_MspInit+0x88>)
 8001410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001414:	6413      	str	r3, [r2, #64]	; 0x40
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <HAL_UART_MspInit+0x88>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <HAL_UART_MspInit+0x88>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a10      	ldr	r2, [pc, #64]	; (800146c <HAL_UART_MspInit+0x88>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <HAL_UART_MspInit+0x88>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800143e:	230c      	movs	r3, #12
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800144e:	2307      	movs	r3, #7
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <HAL_UART_MspInit+0x8c>)
 800145a:	f001 f82d 	bl	80024b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800145e:	bf00      	nop
 8001460:	3728      	adds	r7, #40	; 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40004400 	.word	0x40004400
 800146c:	40023800 	.word	0x40023800
 8001470:	40020000 	.word	0x40020000

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001478:	e7fe      	b.n	8001478 <NMI_Handler+0x4>

0800147a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <MemManage_Handler+0x4>

08001486 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler+0x4>

08001492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ba:	f000 f94f 	bl	800175c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <ADC_IRQHandler+0x10>)
 80014ca:	f000 fb31 	bl	8001b30 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200001f0 	.word	0x200001f0

080014d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return 1;
 80014dc:	2301      	movs	r3, #1
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <_kill>:

int _kill(int pid, int sig)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014f0:	f003 fb0a 	bl	8004b08 <__errno>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2216      	movs	r2, #22
 80014f8:	601a      	str	r2, [r3, #0]
  return -1;
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <_exit>:

void _exit (int status)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800150e:	f04f 31ff 	mov.w	r1, #4294967295
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ffe7 	bl	80014e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001518:	e7fe      	b.n	8001518 <_exit+0x12>

0800151a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	60f8      	str	r0, [r7, #12]
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	e00a      	b.n	8001542 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800152c:	f3af 8000 	nop.w
 8001530:	4601      	mov	r1, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	60ba      	str	r2, [r7, #8]
 8001538:	b2ca      	uxtb	r2, r1
 800153a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	3301      	adds	r3, #1
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	429a      	cmp	r2, r3
 8001548:	dbf0      	blt.n	800152c <_read+0x12>
  }

  return len;
 800154a:	687b      	ldr	r3, [r7, #4]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	e009      	b.n	800157a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	60ba      	str	r2, [r7, #8]
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fd40 	bl	8000ff4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	3301      	adds	r3, #1
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	429a      	cmp	r2, r3
 8001580:	dbf1      	blt.n	8001566 <_write+0x12>
  }
  return len;
 8001582:	687b      	ldr	r3, [r7, #4]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <_close>:

int _close(int file)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001594:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr

080015a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015b2:	605a      	str	r2, [r3, #4]
  return 0;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <_isatty>:

int _isatty(int file)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015c8:	2301      	movs	r3, #1
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f4:	4a14      	ldr	r2, [pc, #80]	; (8001648 <_sbrk+0x5c>)
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <_sbrk+0x60>)
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d102      	bne.n	800160e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <_sbrk+0x64>)
 800160a:	4a12      	ldr	r2, [pc, #72]	; (8001654 <_sbrk+0x68>)
 800160c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	429a      	cmp	r2, r3
 800161a:	d207      	bcs.n	800162c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800161c:	f003 fa74 	bl	8004b08 <__errno>
 8001620:	4603      	mov	r3, r0
 8001622:	220c      	movs	r2, #12
 8001624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	e009      	b.n	8001640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <_sbrk+0x64>)
 800163c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163e:	68fb      	ldr	r3, [r7, #12]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20020000 	.word	0x20020000
 800164c:	00000400 	.word	0x00000400
 8001650:	20000284 	.word	0x20000284
 8001654:	200003d8 	.word	0x200003d8

08001658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800169c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001668:	f7ff fff6 	bl	8001658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800166c:	480c      	ldr	r0, [pc, #48]	; (80016a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800166e:	490d      	ldr	r1, [pc, #52]	; (80016a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001670:	4a0d      	ldr	r2, [pc, #52]	; (80016a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001674:	e002      	b.n	800167c <LoopCopyDataInit>

08001676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167a:	3304      	adds	r3, #4

0800167c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800167c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001680:	d3f9      	bcc.n	8001676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001684:	4c0a      	ldr	r4, [pc, #40]	; (80016b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001688:	e001      	b.n	800168e <LoopFillZerobss>

0800168a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800168c:	3204      	adds	r2, #4

0800168e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001690:	d3fb      	bcc.n	800168a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001692:	f003 fa3f 	bl	8004b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001696:	f7ff fcbf 	bl	8001018 <main>
  bx  lr    
 800169a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800169c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80016a8:	080085f0 	.word	0x080085f0
  ldr r2, =_sbss
 80016ac:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80016b0:	200003d8 	.word	0x200003d8

080016b4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b4:	e7fe      	b.n	80016b4 <CAN1_RX0_IRQHandler>
	...

080016b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016bc:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <HAL_Init+0x40>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0d      	ldr	r2, [pc, #52]	; (80016f8 <HAL_Init+0x40>)
 80016c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016c8:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <HAL_Init+0x40>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <HAL_Init+0x40>)
 80016ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <HAL_Init+0x40>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a07      	ldr	r2, [pc, #28]	; (80016f8 <HAL_Init+0x40>)
 80016da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e0:	2003      	movs	r0, #3
 80016e2:	f000 fea7 	bl	8002434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016e6:	2000      	movs	r0, #0
 80016e8:	f000 f808 	bl	80016fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016ec:	f7ff fe06 	bl	80012fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023c00 	.word	0x40023c00

080016fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_InitTick+0x54>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <HAL_InitTick+0x58>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	4619      	mov	r1, r3
 800170e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001712:	fbb3 f3f1 	udiv	r3, r3, r1
 8001716:	fbb2 f3f3 	udiv	r3, r2, r3
 800171a:	4618      	mov	r0, r3
 800171c:	f000 febf 	bl	800249e <HAL_SYSTICK_Config>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e00e      	b.n	8001748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b0f      	cmp	r3, #15
 800172e:	d80a      	bhi.n	8001746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001730:	2200      	movs	r2, #0
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	f000 fe87 	bl	800244a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800173c:	4a06      	ldr	r2, [pc, #24]	; (8001758 <HAL_InitTick+0x5c>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
 8001744:	e000      	b.n	8001748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000000 	.word	0x20000000
 8001754:	20000008 	.word	0x20000008
 8001758:	20000004 	.word	0x20000004

0800175c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_IncTick+0x1c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	4b05      	ldr	r3, [pc, #20]	; (800177c <HAL_IncTick+0x20>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4413      	add	r3, r2
 800176c:	4a03      	ldr	r2, [pc, #12]	; (800177c <HAL_IncTick+0x20>)
 800176e:	6013      	str	r3, [r2, #0]
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	20000008 	.word	0x20000008
 800177c:	20000288 	.word	0x20000288

08001780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return uwTick;
 8001784:	4b02      	ldr	r3, [pc, #8]	; (8001790 <HAL_GetTick+0x10>)
 8001786:	681b      	ldr	r3, [r3, #0]
}
 8001788:	4618      	mov	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	20000288 	.word	0x20000288

08001794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff fff0 	bl	8001780 <HAL_GetTick>
 80017a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ac:	d005      	beq.n	80017ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_Delay+0x44>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ba:	bf00      	nop
 80017bc:	f7ff ffe0 	bl	8001780 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d8f7      	bhi.n	80017bc <HAL_Delay+0x28>
  {
  }
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000008 	.word	0x20000008

080017dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e033      	b.n	800185a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff fda6 	bl	800134c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	2b00      	cmp	r3, #0
 8001818:	d118      	bne.n	800184c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001822:	f023 0302 	bic.w	r3, r3, #2
 8001826:	f043 0202 	orr.w	r2, r3, #2
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 fc2e 	bl	8002090 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f023 0303 	bic.w	r3, r3, #3
 8001842:	f043 0201 	orr.w	r2, r3, #1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	641a      	str	r2, [r3, #64]	; 0x40
 800184a:	e001      	b.n	8001850 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001858:	7bfb      	ldrb	r3, [r7, #15]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800187a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800187e:	d113      	bne.n	80018a8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800188a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800188e:	d10b      	bne.n	80018a8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	f043 0220 	orr.w	r2, r3, #32
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e063      	b.n	8001970 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80018a8:	f7ff ff6a 	bl	8001780 <HAL_GetTick>
 80018ac:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018ae:	e021      	b.n	80018f4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b6:	d01d      	beq.n	80018f4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d007      	beq.n	80018ce <HAL_ADC_PollForConversion+0x6c>
 80018be:	f7ff ff5f 	bl	8001780 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d212      	bcs.n	80018f4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d00b      	beq.n	80018f4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	f043 0204 	orr.w	r2, r3, #4
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e03d      	b.n	8001970 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d1d6      	bne.n	80018b0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f06f 0212 	mvn.w	r2, #18
 800190a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d123      	bne.n	800196e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800192a:	2b00      	cmp	r3, #0
 800192c:	d11f      	bne.n	800196e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001934:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001938:	2b00      	cmp	r3, #0
 800193a:	d006      	beq.n	800194a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001946:	2b00      	cmp	r3, #0
 8001948:	d111      	bne.n	800196e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d105      	bne.n	800196e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f043 0201 	orr.w	r2, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_ADC_Start_IT+0x1a>
 800198e:	2302      	movs	r3, #2
 8001990:	e0bd      	b.n	8001b0e <HAL_ADC_Start_IT+0x196>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d018      	beq.n	80019da <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019b8:	4b57      	ldr	r3, [pc, #348]	; (8001b18 <HAL_ADC_Start_IT+0x1a0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a57      	ldr	r2, [pc, #348]	; (8001b1c <HAL_ADC_Start_IT+0x1a4>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	0c9a      	lsrs	r2, r3, #18
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80019cc:	e002      	b.n	80019d4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f9      	bne.n	80019ce <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	f040 8085 	bne.w	8001af4 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019f2:	f023 0301 	bic.w	r3, r3, #1
 80019f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d007      	beq.n	8001a1c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a28:	d106      	bne.n	8001a38 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f023 0206 	bic.w	r2, r3, #6
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	645a      	str	r2, [r3, #68]	; 0x44
 8001a36:	e002      	b.n	8001a3e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a46:	4b36      	ldr	r3, [pc, #216]	; (8001b20 <HAL_ADC_Start_IT+0x1a8>)
 8001a48:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a52:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a62:	f043 0320 	orr.w	r3, r3, #32
 8001a66:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 031f 	and.w	r3, r3, #31
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d12a      	bne.n	8001aca <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a2a      	ldr	r2, [pc, #168]	; (8001b24 <HAL_ADC_Start_IT+0x1ac>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d015      	beq.n	8001aaa <HAL_ADC_Start_IT+0x132>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a29      	ldr	r2, [pc, #164]	; (8001b28 <HAL_ADC_Start_IT+0x1b0>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d105      	bne.n	8001a94 <HAL_ADC_Start_IT+0x11c>
 8001a88:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <HAL_ADC_Start_IT+0x1a8>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00a      	beq.n	8001aaa <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a24      	ldr	r2, [pc, #144]	; (8001b2c <HAL_ADC_Start_IT+0x1b4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d136      	bne.n	8001b0c <HAL_ADC_Start_IT+0x194>
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_ADC_Start_IT+0x1a8>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d130      	bne.n	8001b0c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d129      	bne.n	8001b0c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	e020      	b.n	8001b0c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a15      	ldr	r2, [pc, #84]	; (8001b24 <HAL_ADC_Start_IT+0x1ac>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d11b      	bne.n	8001b0c <HAL_ADC_Start_IT+0x194>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d114      	bne.n	8001b0c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	e00b      	b.n	8001b0c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	f043 0210 	orr.w	r2, r3, #16
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b04:	f043 0201 	orr.w	r2, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	431bde83 	.word	0x431bde83
 8001b20:	40012300 	.word	0x40012300
 8001b24:	40012000 	.word	0x40012000
 8001b28:	40012100 	.word	0x40012100
 8001b2c:	40012200 	.word	0x40012200

08001b30 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	f003 0320 	and.w	r3, r3, #32
 8001b5e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d049      	beq.n	8001bfa <HAL_ADC_IRQHandler+0xca>
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d046      	beq.n	8001bfa <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f003 0310 	and.w	r3, r3, #16
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d105      	bne.n	8001b84 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d12b      	bne.n	8001bea <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d127      	bne.n	8001bea <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d006      	beq.n	8001bb6 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d119      	bne.n	8001bea <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0220 	bic.w	r2, r2, #32
 8001bc4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d105      	bne.n	8001bea <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f043 0201 	orr.w	r2, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f8bc 	bl	8001d68 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f06f 0212 	mvn.w	r2, #18
 8001bf8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c08:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d057      	beq.n	8001cc0 <HAL_ADC_IRQHandler+0x190>
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d054      	beq.n	8001cc0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d105      	bne.n	8001c2e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d139      	bne.n	8001cb0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c42:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d006      	beq.n	8001c58 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d12b      	bne.n	8001cb0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d124      	bne.n	8001cb0 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d11d      	bne.n	8001cb0 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d119      	bne.n	8001cb0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c8a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d105      	bne.n	8001cb0 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	f043 0201 	orr.w	r2, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 fae9 	bl	8002288 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f06f 020c 	mvn.w	r2, #12
 8001cbe:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cce:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d017      	beq.n	8001d06 <HAL_ADC_IRQHandler+0x1d6>
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d014      	beq.n	8001d06 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d10d      	bne.n	8001d06 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff faec 	bl	80012d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0201 	mvn.w	r2, #1
 8001d04:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f003 0320 	and.w	r3, r3, #32
 8001d0c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d14:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d015      	beq.n	8001d48 <HAL_ADC_IRQHandler+0x218>
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d012      	beq.n	8001d48 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	f043 0202 	orr.w	r2, r3, #2
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f06f 0220 	mvn.w	r2, #32
 8001d36:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f81e 	bl	8001d7a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f06f 0220 	mvn.w	r2, #32
 8001d46:	601a      	str	r2, [r3, #0]
  }
}
 8001d48:	bf00      	nop
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr

08001d7a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x1c>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e105      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x228>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b09      	cmp	r3, #9
 8001db6:	d925      	bls.n	8001e04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68d9      	ldr	r1, [r3, #12]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	3b1e      	subs	r3, #30
 8001dce:	2207      	movs	r2, #7
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43da      	mvns	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	400a      	ands	r2, r1
 8001ddc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68d9      	ldr	r1, [r3, #12]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	4618      	mov	r0, r3
 8001df0:	4603      	mov	r3, r0
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4403      	add	r3, r0
 8001df6:	3b1e      	subs	r3, #30
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	e022      	b.n	8001e4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6919      	ldr	r1, [r3, #16]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	4613      	mov	r3, r2
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4413      	add	r3, r2
 8001e18:	2207      	movs	r2, #7
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	400a      	ands	r2, r1
 8001e26:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6919      	ldr	r1, [r3, #16]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	4618      	mov	r0, r3
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4403      	add	r3, r0
 8001e40:	409a      	lsls	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b06      	cmp	r3, #6
 8001e50:	d824      	bhi.n	8001e9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	3b05      	subs	r3, #5
 8001e64:	221f      	movs	r2, #31
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	400a      	ands	r2, r1
 8001e72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	4618      	mov	r0, r3
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3b05      	subs	r3, #5
 8001e8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	635a      	str	r2, [r3, #52]	; 0x34
 8001e9a:	e04c      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b0c      	cmp	r3, #12
 8001ea2:	d824      	bhi.n	8001eee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3b23      	subs	r3, #35	; 0x23
 8001eb6:	221f      	movs	r2, #31
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43da      	mvns	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	400a      	ands	r2, r1
 8001ec4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	3b23      	subs	r3, #35	; 0x23
 8001ee0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	631a      	str	r2, [r3, #48]	; 0x30
 8001eec:	e023      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	3b41      	subs	r3, #65	; 0x41
 8001f00:	221f      	movs	r2, #31
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	3b41      	subs	r3, #65	; 0x41
 8001f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f36:	4b22      	ldr	r3, [pc, #136]	; (8001fc0 <HAL_ADC_ConfigChannel+0x234>)
 8001f38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a21      	ldr	r2, [pc, #132]	; (8001fc4 <HAL_ADC_ConfigChannel+0x238>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d109      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x1cc>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b12      	cmp	r3, #18
 8001f4a:	d105      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a19      	ldr	r2, [pc, #100]	; (8001fc4 <HAL_ADC_ConfigChannel+0x238>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d123      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x21e>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b10      	cmp	r3, #16
 8001f68:	d003      	beq.n	8001f72 <HAL_ADC_ConfigChannel+0x1e6>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b11      	cmp	r3, #17
 8001f70:	d11b      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b10      	cmp	r3, #16
 8001f84:	d111      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <HAL_ADC_ConfigChannel+0x23c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a10      	ldr	r2, [pc, #64]	; (8001fcc <HAL_ADC_ConfigChannel+0x240>)
 8001f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f90:	0c9a      	lsrs	r2, r3, #18
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f9c:	e002      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f9      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40012300 	.word	0x40012300
 8001fc4:	40012000 	.word	0x40012000
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	431bde83 	.word	0x431bde83

08001fd0 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_ADC_AnalogWDGConfig+0x18>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e04d      	b.n	8002084 <HAL_ADC_AnalogWDGConfig+0xb4>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (AnalogWDGConfig->ITMode == ENABLE)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	7c1b      	ldrb	r3, [r3, #16]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d108      	bne.n	800200a <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	e007      	b.n	800201a <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002018:	605a      	str	r2, [r3, #4]
  }

  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002028:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800202c:	6053      	str	r3, [r2, #4]

  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	605a      	str	r2, [r3, #4]

  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	6852      	ldr	r2, [r2, #4]
 8002048:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	6892      	ldr	r2, [r2, #8]
 8002052:	629a      	str	r2, [r3, #40]	; 0x28

  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 021f 	bic.w	r2, r2, #31
 8002062:	605a      	str	r2, [r3, #4]

  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	b29b      	uxth	r3, r3
 8002070:	4619      	mov	r1, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
	...

08002090 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002098:	4b79      	ldr	r3, [pc, #484]	; (8002280 <ADC_Init+0x1f0>)
 800209a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	431a      	orrs	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6859      	ldr	r1, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	021a      	lsls	r2, r3, #8
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6859      	ldr	r1, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800210a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6899      	ldr	r1, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002122:	4a58      	ldr	r2, [pc, #352]	; (8002284 <ADC_Init+0x1f4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d022      	beq.n	800216e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002136:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6899      	ldr	r1, [r3, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002158:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6899      	ldr	r1, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	e00f      	b.n	800218e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800217c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800218c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0202 	bic.w	r2, r2, #2
 800219c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6899      	ldr	r1, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7e1b      	ldrb	r3, [r3, #24]
 80021a8:	005a      	lsls	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d01b      	beq.n	80021f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6859      	ldr	r1, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	3b01      	subs	r3, #1
 80021e8:	035a      	lsls	r2, r3, #13
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	e007      	b.n	8002204 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002202:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	3b01      	subs	r3, #1
 8002220:	051a      	lsls	r2, r3, #20
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002238:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6899      	ldr	r1, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002246:	025a      	lsls	r2, r3, #9
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800225e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6899      	ldr	r1, [r3, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	029a      	lsls	r2, r3, #10
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	609a      	str	r2, [r3, #8]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40012300 	.word	0x40012300
 8002284:	0f000001 	.word	0x0f000001

08002288 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
	...

0800229c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b8:	4013      	ands	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ce:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	60d3      	str	r3, [r2, #12]
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <__NVIC_GetPriorityGrouping+0x18>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	f003 0307 	and.w	r3, r3, #7
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	2b00      	cmp	r3, #0
 8002310:	db0b      	blt.n	800232a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	f003 021f 	and.w	r2, r3, #31
 8002318:	4906      	ldr	r1, [pc, #24]	; (8002334 <__NVIC_EnableIRQ+0x34>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	2001      	movs	r0, #1
 8002322:	fa00 f202 	lsl.w	r2, r0, r2
 8002326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	e000e100 	.word	0xe000e100

08002338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	6039      	str	r1, [r7, #0]
 8002342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	2b00      	cmp	r3, #0
 800234a:	db0a      	blt.n	8002362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	b2da      	uxtb	r2, r3
 8002350:	490c      	ldr	r1, [pc, #48]	; (8002384 <__NVIC_SetPriority+0x4c>)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	0112      	lsls	r2, r2, #4
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	440b      	add	r3, r1
 800235c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002360:	e00a      	b.n	8002378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4908      	ldr	r1, [pc, #32]	; (8002388 <__NVIC_SetPriority+0x50>)
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	3b04      	subs	r3, #4
 8002370:	0112      	lsls	r2, r2, #4
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	440b      	add	r3, r1
 8002376:	761a      	strb	r2, [r3, #24]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000e100 	.word	0xe000e100
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800238c:	b480      	push	{r7}
 800238e:	b089      	sub	sp, #36	; 0x24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f1c3 0307 	rsb	r3, r3, #7
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	bf28      	it	cs
 80023aa:	2304      	movcs	r3, #4
 80023ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3304      	adds	r3, #4
 80023b2:	2b06      	cmp	r3, #6
 80023b4:	d902      	bls.n	80023bc <NVIC_EncodePriority+0x30>
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3b03      	subs	r3, #3
 80023ba:	e000      	b.n	80023be <NVIC_EncodePriority+0x32>
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	f04f 32ff 	mov.w	r2, #4294967295
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43da      	mvns	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	401a      	ands	r2, r3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d4:	f04f 31ff 	mov.w	r1, #4294967295
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	fa01 f303 	lsl.w	r3, r1, r3
 80023de:	43d9      	mvns	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	4313      	orrs	r3, r2
         );
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3724      	adds	r7, #36	; 0x24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002400:	d301      	bcc.n	8002406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002402:	2301      	movs	r3, #1
 8002404:	e00f      	b.n	8002426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002406:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <SysTick_Config+0x40>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3b01      	subs	r3, #1
 800240c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240e:	210f      	movs	r1, #15
 8002410:	f04f 30ff 	mov.w	r0, #4294967295
 8002414:	f7ff ff90 	bl	8002338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <SysTick_Config+0x40>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241e:	4b04      	ldr	r3, [pc, #16]	; (8002430 <SysTick_Config+0x40>)
 8002420:	2207      	movs	r2, #7
 8002422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	e000e010 	.word	0xe000e010

08002434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff ff2d 	bl	800229c <__NVIC_SetPriorityGrouping>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800245c:	f7ff ff42 	bl	80022e4 <__NVIC_GetPriorityGrouping>
 8002460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	6978      	ldr	r0, [r7, #20]
 8002468:	f7ff ff90 	bl	800238c <NVIC_EncodePriority>
 800246c:	4602      	mov	r2, r0
 800246e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff5f 	bl	8002338 <__NVIC_SetPriority>
}
 800247a:	bf00      	nop
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800248c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff35 	bl	8002300 <__NVIC_EnableIRQ>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff ffa2 	bl	80023f0 <SysTick_Config>
 80024ac:	4603      	mov	r3, r0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b089      	sub	sp, #36	; 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	e16b      	b.n	80027ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024d4:	2201      	movs	r2, #1
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	f040 815a 	bne.w	80027a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d005      	beq.n	800250a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002506:	2b02      	cmp	r3, #2
 8002508:	d130      	bne.n	800256c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	2203      	movs	r2, #3
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002540:	2201      	movs	r2, #1
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 0201 	and.w	r2, r3, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b03      	cmp	r3, #3
 8002576:	d017      	beq.n	80025a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	2203      	movs	r2, #3
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d123      	bne.n	80025fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	08da      	lsrs	r2, r3, #3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3208      	adds	r2, #8
 80025bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	220f      	movs	r2, #15
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	08da      	lsrs	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3208      	adds	r2, #8
 80025f6:	69b9      	ldr	r1, [r7, #24]
 80025f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	2203      	movs	r2, #3
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 0203 	and.w	r2, r3, #3
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80b4 	beq.w	80027a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	4b5f      	ldr	r3, [pc, #380]	; (80027c0 <HAL_GPIO_Init+0x308>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	4a5e      	ldr	r2, [pc, #376]	; (80027c0 <HAL_GPIO_Init+0x308>)
 8002648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800264c:	6453      	str	r3, [r2, #68]	; 0x44
 800264e:	4b5c      	ldr	r3, [pc, #368]	; (80027c0 <HAL_GPIO_Init+0x308>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800265a:	4a5a      	ldr	r2, [pc, #360]	; (80027c4 <HAL_GPIO_Init+0x30c>)
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	3302      	adds	r3, #2
 8002662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	220f      	movs	r2, #15
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a51      	ldr	r2, [pc, #324]	; (80027c8 <HAL_GPIO_Init+0x310>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d02b      	beq.n	80026de <HAL_GPIO_Init+0x226>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a50      	ldr	r2, [pc, #320]	; (80027cc <HAL_GPIO_Init+0x314>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d025      	beq.n	80026da <HAL_GPIO_Init+0x222>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4f      	ldr	r2, [pc, #316]	; (80027d0 <HAL_GPIO_Init+0x318>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d01f      	beq.n	80026d6 <HAL_GPIO_Init+0x21e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4e      	ldr	r2, [pc, #312]	; (80027d4 <HAL_GPIO_Init+0x31c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d019      	beq.n	80026d2 <HAL_GPIO_Init+0x21a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4d      	ldr	r2, [pc, #308]	; (80027d8 <HAL_GPIO_Init+0x320>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d013      	beq.n	80026ce <HAL_GPIO_Init+0x216>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4c      	ldr	r2, [pc, #304]	; (80027dc <HAL_GPIO_Init+0x324>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00d      	beq.n	80026ca <HAL_GPIO_Init+0x212>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4b      	ldr	r2, [pc, #300]	; (80027e0 <HAL_GPIO_Init+0x328>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d007      	beq.n	80026c6 <HAL_GPIO_Init+0x20e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4a      	ldr	r2, [pc, #296]	; (80027e4 <HAL_GPIO_Init+0x32c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d101      	bne.n	80026c2 <HAL_GPIO_Init+0x20a>
 80026be:	2307      	movs	r3, #7
 80026c0:	e00e      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026c2:	2308      	movs	r3, #8
 80026c4:	e00c      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026c6:	2306      	movs	r3, #6
 80026c8:	e00a      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026ca:	2305      	movs	r3, #5
 80026cc:	e008      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026ce:	2304      	movs	r3, #4
 80026d0:	e006      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026d2:	2303      	movs	r3, #3
 80026d4:	e004      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e002      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026de:	2300      	movs	r3, #0
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	f002 0203 	and.w	r2, r2, #3
 80026e6:	0092      	lsls	r2, r2, #2
 80026e8:	4093      	lsls	r3, r2
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026f0:	4934      	ldr	r1, [pc, #208]	; (80027c4 <HAL_GPIO_Init+0x30c>)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	3302      	adds	r3, #2
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026fe:	4b3a      	ldr	r3, [pc, #232]	; (80027e8 <HAL_GPIO_Init+0x330>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002722:	4a31      	ldr	r2, [pc, #196]	; (80027e8 <HAL_GPIO_Init+0x330>)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002728:	4b2f      	ldr	r3, [pc, #188]	; (80027e8 <HAL_GPIO_Init+0x330>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800274c:	4a26      	ldr	r2, [pc, #152]	; (80027e8 <HAL_GPIO_Init+0x330>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002752:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <HAL_GPIO_Init+0x330>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002776:	4a1c      	ldr	r2, [pc, #112]	; (80027e8 <HAL_GPIO_Init+0x330>)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800277c:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <HAL_GPIO_Init+0x330>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027a0:	4a11      	ldr	r2, [pc, #68]	; (80027e8 <HAL_GPIO_Init+0x330>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3301      	adds	r3, #1
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2b0f      	cmp	r3, #15
 80027b0:	f67f ae90 	bls.w	80024d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	3724      	adds	r7, #36	; 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40013800 	.word	0x40013800
 80027c8:	40020000 	.word	0x40020000
 80027cc:	40020400 	.word	0x40020400
 80027d0:	40020800 	.word	0x40020800
 80027d4:	40020c00 	.word	0x40020c00
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40021400 	.word	0x40021400
 80027e0:	40021800 	.word	0x40021800
 80027e4:	40021c00 	.word	0x40021c00
 80027e8:	40013c00 	.word	0x40013c00

080027ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e267      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d075      	beq.n	80028f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800280a:	4b88      	ldr	r3, [pc, #544]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b04      	cmp	r3, #4
 8002814:	d00c      	beq.n	8002830 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002816:	4b85      	ldr	r3, [pc, #532]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800281e:	2b08      	cmp	r3, #8
 8002820:	d112      	bne.n	8002848 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002822:	4b82      	ldr	r3, [pc, #520]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800282e:	d10b      	bne.n	8002848 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002830:	4b7e      	ldr	r3, [pc, #504]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d05b      	beq.n	80028f4 <HAL_RCC_OscConfig+0x108>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d157      	bne.n	80028f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e242      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002850:	d106      	bne.n	8002860 <HAL_RCC_OscConfig+0x74>
 8002852:	4b76      	ldr	r3, [pc, #472]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a75      	ldr	r2, [pc, #468]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	e01d      	b.n	800289c <HAL_RCC_OscConfig+0xb0>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0x98>
 800286a:	4b70      	ldr	r3, [pc, #448]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a6f      	ldr	r2, [pc, #444]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b6d      	ldr	r3, [pc, #436]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a6c      	ldr	r2, [pc, #432]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800287c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e00b      	b.n	800289c <HAL_RCC_OscConfig+0xb0>
 8002884:	4b69      	ldr	r3, [pc, #420]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a68      	ldr	r2, [pc, #416]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800288a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	4b66      	ldr	r3, [pc, #408]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a65      	ldr	r2, [pc, #404]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800289a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d013      	beq.n	80028cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7fe ff6c 	bl	8001780 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ac:	f7fe ff68 	bl	8001780 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e207      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	4b5b      	ldr	r3, [pc, #364]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0xc0>
 80028ca:	e014      	b.n	80028f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7fe ff58 	bl	8001780 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d4:	f7fe ff54 	bl	8001780 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	; 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e1f3      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e6:	4b51      	ldr	r3, [pc, #324]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0xe8>
 80028f2:	e000      	b.n	80028f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d063      	beq.n	80029ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002902:	4b4a      	ldr	r3, [pc, #296]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800290e:	4b47      	ldr	r3, [pc, #284]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002916:	2b08      	cmp	r3, #8
 8002918:	d11c      	bne.n	8002954 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800291a:	4b44      	ldr	r3, [pc, #272]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d116      	bne.n	8002954 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002926:	4b41      	ldr	r3, [pc, #260]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d005      	beq.n	800293e <HAL_RCC_OscConfig+0x152>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d001      	beq.n	800293e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e1c7      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293e:	4b3b      	ldr	r3, [pc, #236]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4937      	ldr	r1, [pc, #220]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002952:	e03a      	b.n	80029ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d020      	beq.n	800299e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800295c:	4b34      	ldr	r3, [pc, #208]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 800295e:	2201      	movs	r2, #1
 8002960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002962:	f7fe ff0d 	bl	8001780 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800296a:	f7fe ff09 	bl	8001780 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e1a8      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297c:	4b2b      	ldr	r3, [pc, #172]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002988:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4925      	ldr	r1, [pc, #148]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002998:	4313      	orrs	r3, r2
 800299a:	600b      	str	r3, [r1, #0]
 800299c:	e015      	b.n	80029ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800299e:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a4:	f7fe feec 	bl	8001780 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ac:	f7fe fee8 	bl	8001780 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e187      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029be:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d036      	beq.n	8002a44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d016      	beq.n	8002a0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029de:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <HAL_RCC_OscConfig+0x248>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7fe fecc 	bl	8001780 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ec:	f7fe fec8 	bl	8001780 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e167      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fe:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0x200>
 8002a0a:	e01b      	b.n	8002a44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <HAL_RCC_OscConfig+0x248>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a12:	f7fe feb5 	bl	8001780 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a18:	e00e      	b.n	8002a38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a1a:	f7fe feb1 	bl	8001780 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d907      	bls.n	8002a38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e150      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	42470000 	.word	0x42470000
 8002a34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a38:	4b88      	ldr	r3, [pc, #544]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1ea      	bne.n	8002a1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 8097 	beq.w	8002b80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a52:	2300      	movs	r3, #0
 8002a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a56:	4b81      	ldr	r3, [pc, #516]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10f      	bne.n	8002a82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	4b7d      	ldr	r3, [pc, #500]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	4a7c      	ldr	r2, [pc, #496]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a70:	6413      	str	r3, [r2, #64]	; 0x40
 8002a72:	4b7a      	ldr	r3, [pc, #488]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a82:	4b77      	ldr	r3, [pc, #476]	; (8002c60 <HAL_RCC_OscConfig+0x474>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d118      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a8e:	4b74      	ldr	r3, [pc, #464]	; (8002c60 <HAL_RCC_OscConfig+0x474>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a73      	ldr	r2, [pc, #460]	; (8002c60 <HAL_RCC_OscConfig+0x474>)
 8002a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a9a:	f7fe fe71 	bl	8001780 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa2:	f7fe fe6d 	bl	8001780 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e10c      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab4:	4b6a      	ldr	r3, [pc, #424]	; (8002c60 <HAL_RCC_OscConfig+0x474>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d106      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x2ea>
 8002ac8:	4b64      	ldr	r3, [pc, #400]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	4a63      	ldr	r2, [pc, #396]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad4:	e01c      	b.n	8002b10 <HAL_RCC_OscConfig+0x324>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b05      	cmp	r3, #5
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x30c>
 8002ade:	4b5f      	ldr	r3, [pc, #380]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae2:	4a5e      	ldr	r2, [pc, #376]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aea:	4b5c      	ldr	r3, [pc, #368]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	4a5b      	ldr	r2, [pc, #364]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6713      	str	r3, [r2, #112]	; 0x70
 8002af6:	e00b      	b.n	8002b10 <HAL_RCC_OscConfig+0x324>
 8002af8:	4b58      	ldr	r3, [pc, #352]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afc:	4a57      	ldr	r2, [pc, #348]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002afe:	f023 0301 	bic.w	r3, r3, #1
 8002b02:	6713      	str	r3, [r2, #112]	; 0x70
 8002b04:	4b55      	ldr	r3, [pc, #340]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	4a54      	ldr	r2, [pc, #336]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b0a:	f023 0304 	bic.w	r3, r3, #4
 8002b0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d015      	beq.n	8002b44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b18:	f7fe fe32 	bl	8001780 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b20:	f7fe fe2e 	bl	8001780 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e0cb      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b36:	4b49      	ldr	r3, [pc, #292]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0ee      	beq.n	8002b20 <HAL_RCC_OscConfig+0x334>
 8002b42:	e014      	b.n	8002b6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b44:	f7fe fe1c 	bl	8001780 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b4a:	e00a      	b.n	8002b62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b4c:	f7fe fe18 	bl	8001780 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e0b5      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b62:	4b3e      	ldr	r3, [pc, #248]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1ee      	bne.n	8002b4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b6e:	7dfb      	ldrb	r3, [r7, #23]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d105      	bne.n	8002b80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b74:	4b39      	ldr	r3, [pc, #228]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	4a38      	ldr	r2, [pc, #224]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80a1 	beq.w	8002ccc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b8a:	4b34      	ldr	r3, [pc, #208]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d05c      	beq.n	8002c50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d141      	bne.n	8002c22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9e:	4b31      	ldr	r3, [pc, #196]	; (8002c64 <HAL_RCC_OscConfig+0x478>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fdec 	bl	8001780 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bac:	f7fe fde8 	bl	8001780 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e087      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbe:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69da      	ldr	r2, [r3, #28]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	019b      	lsls	r3, r3, #6
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	085b      	lsrs	r3, r3, #1
 8002be2:	3b01      	subs	r3, #1
 8002be4:	041b      	lsls	r3, r3, #16
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	061b      	lsls	r3, r3, #24
 8002bee:	491b      	ldr	r1, [pc, #108]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <HAL_RCC_OscConfig+0x478>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7fe fdc1 	bl	8001780 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c02:	f7fe fdbd 	bl	8001780 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e05c      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c14:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x416>
 8002c20:	e054      	b.n	8002ccc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <HAL_RCC_OscConfig+0x478>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c28:	f7fe fdaa 	bl	8001780 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c30:	f7fe fda6 	bl	8001780 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e045      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c42:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0x444>
 8002c4e:	e03d      	b.n	8002ccc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d107      	bne.n	8002c68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e038      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40007000 	.word	0x40007000
 8002c64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c68:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <HAL_RCC_OscConfig+0x4ec>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d028      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d121      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d11a      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c98:	4013      	ands	r3, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d111      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cae:	085b      	lsrs	r3, r3, #1
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d107      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800

08002cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0cc      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b68      	ldr	r3, [pc, #416]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d90c      	bls.n	8002d18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b65      	ldr	r3, [pc, #404]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	4b63      	ldr	r3, [pc, #396]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0b8      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d020      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d30:	4b59      	ldr	r3, [pc, #356]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4a58      	ldr	r2, [pc, #352]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d48:	4b53      	ldr	r3, [pc, #332]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	4a52      	ldr	r2, [pc, #328]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d54:	4b50      	ldr	r3, [pc, #320]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	494d      	ldr	r1, [pc, #308]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d044      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d107      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	4b47      	ldr	r3, [pc, #284]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d119      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e07f      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d003      	beq.n	8002d9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9a:	4b3f      	ldr	r3, [pc, #252]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e06f      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002daa:	4b3b      	ldr	r3, [pc, #236]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e067      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dba:	4b37      	ldr	r3, [pc, #220]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f023 0203 	bic.w	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4934      	ldr	r1, [pc, #208]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dcc:	f7fe fcd8 	bl	8001780 <HAL_GetTick>
 8002dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	e00a      	b.n	8002dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd4:	f7fe fcd4 	bl	8001780 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e04f      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 020c 	and.w	r2, r3, #12
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d1eb      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b25      	ldr	r3, [pc, #148]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d20c      	bcs.n	8002e24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0a:	4b22      	ldr	r3, [pc, #136]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e12:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e032      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e30:	4b19      	ldr	r3, [pc, #100]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4916      	ldr	r1, [pc, #88]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e4e:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	490e      	ldr	r1, [pc, #56]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e62:	f000 f821 	bl	8002ea8 <HAL_RCC_GetSysClockFreq>
 8002e66:	4602      	mov	r2, r0
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	490a      	ldr	r1, [pc, #40]	; (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002e74:	5ccb      	ldrb	r3, [r1, r3]
 8002e76:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7a:	4a09      	ldr	r2, [pc, #36]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e7e:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe fc3a 	bl	80016fc <HAL_InitTick>

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023c00 	.word	0x40023c00
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	080081a0 	.word	0x080081a0
 8002ea0:	20000000 	.word	0x20000000
 8002ea4:	20000004 	.word	0x20000004

08002ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eac:	b094      	sub	sp, #80	; 0x50
 8002eae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eb8:	2300      	movs	r3, #0
 8002eba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ec0:	4b7c      	ldr	r3, [pc, #496]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 030c 	and.w	r3, r3, #12
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d00d      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	f200 80e7 	bhi.w	80030a0 <HAL_RCC_GetSysClockFreq+0x1f8>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x34>
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eda:	e0e1      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002edc:	4b76      	ldr	r3, [pc, #472]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x210>)
 8002ede:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ee0:	e0e1      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ee2:	4b76      	ldr	r3, [pc, #472]	; (80030bc <HAL_RCC_GetSysClockFreq+0x214>)
 8002ee4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ee6:	e0de      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee8:	4b72      	ldr	r3, [pc, #456]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ef0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef2:	4b70      	ldr	r3, [pc, #448]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d065      	beq.n	8002fca <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002efe:	4b6d      	ldr	r3, [pc, #436]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	099b      	lsrs	r3, r3, #6
 8002f04:	2200      	movs	r2, #0
 8002f06:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f10:	633b      	str	r3, [r7, #48]	; 0x30
 8002f12:	2300      	movs	r3, #0
 8002f14:	637b      	str	r3, [r7, #52]	; 0x34
 8002f16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f1a:	4622      	mov	r2, r4
 8002f1c:	462b      	mov	r3, r5
 8002f1e:	f04f 0000 	mov.w	r0, #0
 8002f22:	f04f 0100 	mov.w	r1, #0
 8002f26:	0159      	lsls	r1, r3, #5
 8002f28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f2c:	0150      	lsls	r0, r2, #5
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4621      	mov	r1, r4
 8002f34:	1a51      	subs	r1, r2, r1
 8002f36:	6139      	str	r1, [r7, #16]
 8002f38:	4629      	mov	r1, r5
 8002f3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f4c:	4659      	mov	r1, fp
 8002f4e:	018b      	lsls	r3, r1, #6
 8002f50:	4651      	mov	r1, sl
 8002f52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f56:	4651      	mov	r1, sl
 8002f58:	018a      	lsls	r2, r1, #6
 8002f5a:	46d4      	mov	ip, sl
 8002f5c:	ebb2 080c 	subs.w	r8, r2, ip
 8002f60:	4659      	mov	r1, fp
 8002f62:	eb63 0901 	sbc.w	r9, r3, r1
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f7a:	4690      	mov	r8, r2
 8002f7c:	4699      	mov	r9, r3
 8002f7e:	4623      	mov	r3, r4
 8002f80:	eb18 0303 	adds.w	r3, r8, r3
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	462b      	mov	r3, r5
 8002f88:	eb49 0303 	adc.w	r3, r9, r3
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f9a:	4629      	mov	r1, r5
 8002f9c:	024b      	lsls	r3, r1, #9
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	4604      	mov	r4, r0
 8002fa4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002fa8:	4601      	mov	r1, r0
 8002faa:	024a      	lsls	r2, r1, #9
 8002fac:	4610      	mov	r0, r2
 8002fae:	4619      	mov	r1, r3
 8002fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fbc:	f7fd fe64 	bl	8000c88 <__aeabi_uldivmod>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc8:	e05c      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fca:	4b3a      	ldr	r3, [pc, #232]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	099b      	lsrs	r3, r3, #6
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fda:	623b      	str	r3, [r7, #32]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fe4:	4642      	mov	r2, r8
 8002fe6:	464b      	mov	r3, r9
 8002fe8:	f04f 0000 	mov.w	r0, #0
 8002fec:	f04f 0100 	mov.w	r1, #0
 8002ff0:	0159      	lsls	r1, r3, #5
 8002ff2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ff6:	0150      	lsls	r0, r2, #5
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	46c4      	mov	ip, r8
 8002ffe:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003002:	4640      	mov	r0, r8
 8003004:	4649      	mov	r1, r9
 8003006:	468c      	mov	ip, r1
 8003008:	eb63 0b0c 	sbc.w	fp, r3, ip
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003018:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800301c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003020:	ebb2 040a 	subs.w	r4, r2, sl
 8003024:	eb63 050b 	sbc.w	r5, r3, fp
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	00eb      	lsls	r3, r5, #3
 8003032:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003036:	00e2      	lsls	r2, r4, #3
 8003038:	4614      	mov	r4, r2
 800303a:	461d      	mov	r5, r3
 800303c:	4603      	mov	r3, r0
 800303e:	18e3      	adds	r3, r4, r3
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	460b      	mov	r3, r1
 8003044:	eb45 0303 	adc.w	r3, r5, r3
 8003048:	607b      	str	r3, [r7, #4]
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003056:	4629      	mov	r1, r5
 8003058:	028b      	lsls	r3, r1, #10
 800305a:	4620      	mov	r0, r4
 800305c:	4629      	mov	r1, r5
 800305e:	4604      	mov	r4, r0
 8003060:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003064:	4601      	mov	r1, r0
 8003066:	028a      	lsls	r2, r1, #10
 8003068:	4610      	mov	r0, r2
 800306a:	4619      	mov	r1, r3
 800306c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800306e:	2200      	movs	r2, #0
 8003070:	61bb      	str	r3, [r7, #24]
 8003072:	61fa      	str	r2, [r7, #28]
 8003074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003078:	f7fd fe06 	bl	8000c88 <__aeabi_uldivmod>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4613      	mov	r3, r2
 8003082:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	3301      	adds	r3, #1
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003094:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003098:	fbb2 f3f3 	udiv	r3, r2, r3
 800309c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800309e:	e002      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030a0:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x210>)
 80030a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3750      	adds	r7, #80	; 0x50
 80030ac:	46bd      	mov	sp, r7
 80030ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800
 80030b8:	00f42400 	.word	0x00f42400
 80030bc:	007a1200 	.word	0x007a1200

080030c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c4:	4b02      	ldr	r3, [pc, #8]	; (80030d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr
 80030d0:	20000000 	.word	0x20000000

080030d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030d8:	f7ff fff2 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	0a9b      	lsrs	r3, r3, #10
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	4903      	ldr	r1, [pc, #12]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40023800 	.word	0x40023800
 80030f8:	080081b0 	.word	0x080081b0

080030fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003100:	f7ff ffde 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	0b5b      	lsrs	r3, r3, #13
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4903      	ldr	r1, [pc, #12]	; (8003120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40023800 	.word	0x40023800
 8003120:	080081b0 	.word	0x080081b0

08003124 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e042      	b.n	80031bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fe f94a 	bl	80013e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2224      	movs	r2, #36	; 0x24
 8003154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003166:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f971 	bl	8003450 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800317c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695a      	ldr	r2, [r3, #20]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800318c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800319c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08a      	sub	sp, #40	; 0x28
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	603b      	str	r3, [r7, #0]
 80031d0:	4613      	mov	r3, r2
 80031d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d175      	bne.n	80032d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <HAL_UART_Transmit+0x2c>
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e06e      	b.n	80032d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2221      	movs	r2, #33	; 0x21
 80031fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003202:	f7fe fabd 	bl	8001780 <HAL_GetTick>
 8003206:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	88fa      	ldrh	r2, [r7, #6]
 800320c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	88fa      	ldrh	r2, [r7, #6]
 8003212:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800321c:	d108      	bne.n	8003230 <HAL_UART_Transmit+0x6c>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d104      	bne.n	8003230 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	e003      	b.n	8003238 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003234:	2300      	movs	r3, #0
 8003236:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003238:	e02e      	b.n	8003298 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2200      	movs	r2, #0
 8003242:	2180      	movs	r1, #128	; 0x80
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 f848 	bl	80032da <UART_WaitOnFlagUntilTimeout>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d005      	beq.n	800325c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e03a      	b.n	80032d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10b      	bne.n	800327a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003270:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	3302      	adds	r3, #2
 8003276:	61bb      	str	r3, [r7, #24]
 8003278:	e007      	b.n	800328a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	781a      	ldrb	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	3301      	adds	r3, #1
 8003288:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800328e:	b29b      	uxth	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1cb      	bne.n	800323a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2200      	movs	r2, #0
 80032aa:	2140      	movs	r1, #64	; 0x40
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 f814 	bl	80032da <UART_WaitOnFlagUntilTimeout>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e006      	b.n	80032d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	e000      	b.n	80032d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80032d0:	2302      	movs	r3, #2
  }
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3720      	adds	r7, #32
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b086      	sub	sp, #24
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	603b      	str	r3, [r7, #0]
 80032e6:	4613      	mov	r3, r2
 80032e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ea:	e03b      	b.n	8003364 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f2:	d037      	beq.n	8003364 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f4:	f7fe fa44 	bl	8001780 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	6a3a      	ldr	r2, [r7, #32]
 8003300:	429a      	cmp	r2, r3
 8003302:	d302      	bcc.n	800330a <UART_WaitOnFlagUntilTimeout+0x30>
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e03a      	b.n	8003384 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d023      	beq.n	8003364 <UART_WaitOnFlagUntilTimeout+0x8a>
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b80      	cmp	r3, #128	; 0x80
 8003320:	d020      	beq.n	8003364 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b40      	cmp	r3, #64	; 0x40
 8003326:	d01d      	beq.n	8003364 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b08      	cmp	r3, #8
 8003334:	d116      	bne.n	8003364 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 f81d 	bl	800338c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2208      	movs	r2, #8
 8003356:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e00f      	b.n	8003384 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	4013      	ands	r3, r2
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	429a      	cmp	r2, r3
 8003372:	bf0c      	ite	eq
 8003374:	2301      	moveq	r3, #1
 8003376:	2300      	movne	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	461a      	mov	r2, r3
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	429a      	cmp	r2, r3
 8003380:	d0b4      	beq.n	80032ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800338c:	b480      	push	{r7}
 800338e:	b095      	sub	sp, #84	; 0x54
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	330c      	adds	r3, #12
 800339a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800339e:	e853 3f00 	ldrex	r3, [r3]
 80033a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	330c      	adds	r3, #12
 80033b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033b4:	643a      	str	r2, [r7, #64]	; 0x40
 80033b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033bc:	e841 2300 	strex	r3, r2, [r1]
 80033c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e5      	bne.n	8003394 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3314      	adds	r3, #20
 80033ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	e853 3f00 	ldrex	r3, [r3]
 80033d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f023 0301 	bic.w	r3, r3, #1
 80033de:	64bb      	str	r3, [r7, #72]	; 0x48
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3314      	adds	r3, #20
 80033e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033f0:	e841 2300 	strex	r3, r2, [r1]
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1e5      	bne.n	80033c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	2b01      	cmp	r3, #1
 8003402:	d119      	bne.n	8003438 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	330c      	adds	r3, #12
 800340a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	e853 3f00 	ldrex	r3, [r3]
 8003412:	60bb      	str	r3, [r7, #8]
   return(result);
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f023 0310 	bic.w	r3, r3, #16
 800341a:	647b      	str	r3, [r7, #68]	; 0x44
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	330c      	adds	r3, #12
 8003422:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003424:	61ba      	str	r2, [r7, #24]
 8003426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003428:	6979      	ldr	r1, [r7, #20]
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	e841 2300 	strex	r3, r2, [r1]
 8003430:	613b      	str	r3, [r7, #16]
   return(result);
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1e5      	bne.n	8003404 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003446:	bf00      	nop
 8003448:	3754      	adds	r7, #84	; 0x54
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr

08003450 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003454:	b0c0      	sub	sp, #256	; 0x100
 8003456:	af00      	add	r7, sp, #0
 8003458:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346c:	68d9      	ldr	r1, [r3, #12]
 800346e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	ea40 0301 	orr.w	r3, r0, r1
 8003478:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800347a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	431a      	orrs	r2, r3
 8003488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	431a      	orrs	r2, r3
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800349c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034a8:	f021 010c 	bic.w	r1, r1, #12
 80034ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034b6:	430b      	orrs	r3, r1
 80034b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ca:	6999      	ldr	r1, [r3, #24]
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	ea40 0301 	orr.w	r3, r0, r1
 80034d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	4b91      	ldr	r3, [pc, #580]	; (8003724 <UART_SetConfig+0x2d4>)
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d005      	beq.n	80034f0 <UART_SetConfig+0xa0>
 80034e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4b8f      	ldr	r3, [pc, #572]	; (8003728 <UART_SetConfig+0x2d8>)
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d104      	bne.n	80034fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034f0:	f7ff fe04 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 80034f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034f8:	e003      	b.n	8003502 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034fa:	f7ff fdeb 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 80034fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800350c:	f040 8110 	bne.w	8003730 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003514:	2200      	movs	r2, #0
 8003516:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800351a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800351e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003522:	4622      	mov	r2, r4
 8003524:	462b      	mov	r3, r5
 8003526:	1891      	adds	r1, r2, r2
 8003528:	65b9      	str	r1, [r7, #88]	; 0x58
 800352a:	415b      	adcs	r3, r3
 800352c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800352e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003532:	4620      	mov	r0, r4
 8003534:	4629      	mov	r1, r5
 8003536:	4604      	mov	r4, r0
 8003538:	eb12 0804 	adds.w	r8, r2, r4
 800353c:	460c      	mov	r4, r1
 800353e:	eb43 0904 	adc.w	r9, r3, r4
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800354e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003552:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003556:	4690      	mov	r8, r2
 8003558:	4699      	mov	r9, r3
 800355a:	4603      	mov	r3, r0
 800355c:	eb18 0303 	adds.w	r3, r8, r3
 8003560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003564:	460b      	mov	r3, r1
 8003566:	eb49 0303 	adc.w	r3, r9, r3
 800356a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800356e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800357a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800357e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003582:	460b      	mov	r3, r1
 8003584:	18db      	adds	r3, r3, r3
 8003586:	653b      	str	r3, [r7, #80]	; 0x50
 8003588:	4613      	mov	r3, r2
 800358a:	eb42 0303 	adc.w	r3, r2, r3
 800358e:	657b      	str	r3, [r7, #84]	; 0x54
 8003590:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003594:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003598:	f7fd fb76 	bl	8000c88 <__aeabi_uldivmod>
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4b62      	ldr	r3, [pc, #392]	; (800372c <UART_SetConfig+0x2dc>)
 80035a2:	fba3 2302 	umull	r2, r3, r3, r2
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	011c      	lsls	r4, r3, #4
 80035aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ae:	2200      	movs	r2, #0
 80035b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80035b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80035bc:	4642      	mov	r2, r8
 80035be:	464b      	mov	r3, r9
 80035c0:	1891      	adds	r1, r2, r2
 80035c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80035c4:	415b      	adcs	r3, r3
 80035c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035cc:	4645      	mov	r5, r8
 80035ce:	eb12 0a05 	adds.w	sl, r2, r5
 80035d2:	4640      	mov	r0, r8
 80035d4:	4649      	mov	r1, r9
 80035d6:	460d      	mov	r5, r1
 80035d8:	eb43 0b05 	adc.w	fp, r3, r5
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035f0:	4692      	mov	sl, r2
 80035f2:	469b      	mov	fp, r3
 80035f4:	4603      	mov	r3, r0
 80035f6:	eb1a 0303 	adds.w	r3, sl, r3
 80035fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035fe:	460b      	mov	r3, r1
 8003600:	eb4b 0303 	adc.w	r3, fp, r3
 8003604:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003614:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003618:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800361c:	460b      	mov	r3, r1
 800361e:	18db      	adds	r3, r3, r3
 8003620:	643b      	str	r3, [r7, #64]	; 0x40
 8003622:	4613      	mov	r3, r2
 8003624:	eb42 0303 	adc.w	r3, r2, r3
 8003628:	647b      	str	r3, [r7, #68]	; 0x44
 800362a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800362e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003632:	f7fd fb29 	bl	8000c88 <__aeabi_uldivmod>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4611      	mov	r1, r2
 800363c:	4b3b      	ldr	r3, [pc, #236]	; (800372c <UART_SetConfig+0x2dc>)
 800363e:	fba3 2301 	umull	r2, r3, r3, r1
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	2264      	movs	r2, #100	; 0x64
 8003646:	fb02 f303 	mul.w	r3, r2, r3
 800364a:	1acb      	subs	r3, r1, r3
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003652:	4b36      	ldr	r3, [pc, #216]	; (800372c <UART_SetConfig+0x2dc>)
 8003654:	fba3 2302 	umull	r2, r3, r3, r2
 8003658:	095b      	lsrs	r3, r3, #5
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003660:	441c      	add	r4, r3
 8003662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003666:	2200      	movs	r2, #0
 8003668:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800366c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003670:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003674:	4642      	mov	r2, r8
 8003676:	464b      	mov	r3, r9
 8003678:	1891      	adds	r1, r2, r2
 800367a:	63b9      	str	r1, [r7, #56]	; 0x38
 800367c:	415b      	adcs	r3, r3
 800367e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003680:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003684:	4641      	mov	r1, r8
 8003686:	1851      	adds	r1, r2, r1
 8003688:	6339      	str	r1, [r7, #48]	; 0x30
 800368a:	4649      	mov	r1, r9
 800368c:	414b      	adcs	r3, r1
 800368e:	637b      	str	r3, [r7, #52]	; 0x34
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800369c:	4659      	mov	r1, fp
 800369e:	00cb      	lsls	r3, r1, #3
 80036a0:	4655      	mov	r5, sl
 80036a2:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80036a6:	4651      	mov	r1, sl
 80036a8:	00ca      	lsls	r2, r1, #3
 80036aa:	4610      	mov	r0, r2
 80036ac:	4619      	mov	r1, r3
 80036ae:	4603      	mov	r3, r0
 80036b0:	4642      	mov	r2, r8
 80036b2:	189b      	adds	r3, r3, r2
 80036b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036b8:	464b      	mov	r3, r9
 80036ba:	460a      	mov	r2, r1
 80036bc:	eb42 0303 	adc.w	r3, r2, r3
 80036c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036d8:	460b      	mov	r3, r1
 80036da:	18db      	adds	r3, r3, r3
 80036dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80036de:	4613      	mov	r3, r2
 80036e0:	eb42 0303 	adc.w	r3, r2, r3
 80036e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036ee:	f7fd facb 	bl	8000c88 <__aeabi_uldivmod>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4b0d      	ldr	r3, [pc, #52]	; (800372c <UART_SetConfig+0x2dc>)
 80036f8:	fba3 1302 	umull	r1, r3, r3, r2
 80036fc:	095b      	lsrs	r3, r3, #5
 80036fe:	2164      	movs	r1, #100	; 0x64
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	3332      	adds	r3, #50	; 0x32
 800370a:	4a08      	ldr	r2, [pc, #32]	; (800372c <UART_SetConfig+0x2dc>)
 800370c:	fba2 2303 	umull	r2, r3, r2, r3
 8003710:	095b      	lsrs	r3, r3, #5
 8003712:	f003 0207 	and.w	r2, r3, #7
 8003716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4422      	add	r2, r4
 800371e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003720:	e10a      	b.n	8003938 <UART_SetConfig+0x4e8>
 8003722:	bf00      	nop
 8003724:	40011000 	.word	0x40011000
 8003728:	40011400 	.word	0x40011400
 800372c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003734:	2200      	movs	r2, #0
 8003736:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800373a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800373e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003742:	4642      	mov	r2, r8
 8003744:	464b      	mov	r3, r9
 8003746:	1891      	adds	r1, r2, r2
 8003748:	6239      	str	r1, [r7, #32]
 800374a:	415b      	adcs	r3, r3
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
 800374e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003752:	4641      	mov	r1, r8
 8003754:	1854      	adds	r4, r2, r1
 8003756:	46cc      	mov	ip, r9
 8003758:	eb43 050c 	adc.w	r5, r3, ip
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	00eb      	lsls	r3, r5, #3
 8003766:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800376a:	00e2      	lsls	r2, r4, #3
 800376c:	4614      	mov	r4, r2
 800376e:	461d      	mov	r5, r3
 8003770:	4640      	mov	r0, r8
 8003772:	4649      	mov	r1, r9
 8003774:	4603      	mov	r3, r0
 8003776:	18e3      	adds	r3, r4, r3
 8003778:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800377c:	460b      	mov	r3, r1
 800377e:	eb45 0303 	adc.w	r3, r5, r3
 8003782:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003792:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037a2:	4629      	mov	r1, r5
 80037a4:	008b      	lsls	r3, r1, #2
 80037a6:	4620      	mov	r0, r4
 80037a8:	4629      	mov	r1, r5
 80037aa:	4604      	mov	r4, r0
 80037ac:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80037b0:	4601      	mov	r1, r0
 80037b2:	008a      	lsls	r2, r1, #2
 80037b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80037b8:	f7fd fa66 	bl	8000c88 <__aeabi_uldivmod>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4b60      	ldr	r3, [pc, #384]	; (8003944 <UART_SetConfig+0x4f4>)
 80037c2:	fba3 2302 	umull	r2, r3, r3, r2
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	011c      	lsls	r4, r3, #4
 80037ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ce:	2200      	movs	r2, #0
 80037d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037dc:	4642      	mov	r2, r8
 80037de:	464b      	mov	r3, r9
 80037e0:	1891      	adds	r1, r2, r2
 80037e2:	61b9      	str	r1, [r7, #24]
 80037e4:	415b      	adcs	r3, r3
 80037e6:	61fb      	str	r3, [r7, #28]
 80037e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037ec:	4641      	mov	r1, r8
 80037ee:	1851      	adds	r1, r2, r1
 80037f0:	6139      	str	r1, [r7, #16]
 80037f2:	4649      	mov	r1, r9
 80037f4:	414b      	adcs	r3, r1
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003804:	4659      	mov	r1, fp
 8003806:	00cb      	lsls	r3, r1, #3
 8003808:	4655      	mov	r5, sl
 800380a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800380e:	4651      	mov	r1, sl
 8003810:	00ca      	lsls	r2, r1, #3
 8003812:	4610      	mov	r0, r2
 8003814:	4619      	mov	r1, r3
 8003816:	4603      	mov	r3, r0
 8003818:	4642      	mov	r2, r8
 800381a:	189b      	adds	r3, r3, r2
 800381c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003820:	464b      	mov	r3, r9
 8003822:	460a      	mov	r2, r1
 8003824:	eb42 0303 	adc.w	r3, r2, r3
 8003828:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	67bb      	str	r3, [r7, #120]	; 0x78
 8003836:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003844:	4649      	mov	r1, r9
 8003846:	008b      	lsls	r3, r1, #2
 8003848:	4645      	mov	r5, r8
 800384a:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 800384e:	4641      	mov	r1, r8
 8003850:	008a      	lsls	r2, r1, #2
 8003852:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003856:	f7fd fa17 	bl	8000c88 <__aeabi_uldivmod>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4611      	mov	r1, r2
 8003860:	4b38      	ldr	r3, [pc, #224]	; (8003944 <UART_SetConfig+0x4f4>)
 8003862:	fba3 2301 	umull	r2, r3, r3, r1
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	2264      	movs	r2, #100	; 0x64
 800386a:	fb02 f303 	mul.w	r3, r2, r3
 800386e:	1acb      	subs	r3, r1, r3
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	3332      	adds	r3, #50	; 0x32
 8003874:	4a33      	ldr	r2, [pc, #204]	; (8003944 <UART_SetConfig+0x4f4>)
 8003876:	fba2 2303 	umull	r2, r3, r2, r3
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003880:	441c      	add	r4, r3
 8003882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003886:	2200      	movs	r2, #0
 8003888:	673b      	str	r3, [r7, #112]	; 0x70
 800388a:	677a      	str	r2, [r7, #116]	; 0x74
 800388c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003890:	4642      	mov	r2, r8
 8003892:	464b      	mov	r3, r9
 8003894:	1891      	adds	r1, r2, r2
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	415b      	adcs	r3, r3
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038a0:	4641      	mov	r1, r8
 80038a2:	1851      	adds	r1, r2, r1
 80038a4:	6039      	str	r1, [r7, #0]
 80038a6:	4649      	mov	r1, r9
 80038a8:	414b      	adcs	r3, r1
 80038aa:	607b      	str	r3, [r7, #4]
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038b8:	4659      	mov	r1, fp
 80038ba:	00cb      	lsls	r3, r1, #3
 80038bc:	4655      	mov	r5, sl
 80038be:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80038c2:	4651      	mov	r1, sl
 80038c4:	00ca      	lsls	r2, r1, #3
 80038c6:	4610      	mov	r0, r2
 80038c8:	4619      	mov	r1, r3
 80038ca:	4603      	mov	r3, r0
 80038cc:	4642      	mov	r2, r8
 80038ce:	189b      	adds	r3, r3, r2
 80038d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80038d2:	464b      	mov	r3, r9
 80038d4:	460a      	mov	r2, r1
 80038d6:	eb42 0303 	adc.w	r3, r2, r3
 80038da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	663b      	str	r3, [r7, #96]	; 0x60
 80038e6:	667a      	str	r2, [r7, #100]	; 0x64
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038f4:	4649      	mov	r1, r9
 80038f6:	008b      	lsls	r3, r1, #2
 80038f8:	4645      	mov	r5, r8
 80038fa:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 80038fe:	4641      	mov	r1, r8
 8003900:	008a      	lsls	r2, r1, #2
 8003902:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003906:	f7fd f9bf 	bl	8000c88 <__aeabi_uldivmod>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4b0d      	ldr	r3, [pc, #52]	; (8003944 <UART_SetConfig+0x4f4>)
 8003910:	fba3 1302 	umull	r1, r3, r3, r2
 8003914:	095b      	lsrs	r3, r3, #5
 8003916:	2164      	movs	r1, #100	; 0x64
 8003918:	fb01 f303 	mul.w	r3, r1, r3
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	3332      	adds	r3, #50	; 0x32
 8003922:	4a08      	ldr	r2, [pc, #32]	; (8003944 <UART_SetConfig+0x4f4>)
 8003924:	fba2 2303 	umull	r2, r3, r2, r3
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	f003 020f 	and.w	r2, r3, #15
 800392e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4422      	add	r2, r4
 8003936:	609a      	str	r2, [r3, #8]
}
 8003938:	bf00      	nop
 800393a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800393e:	46bd      	mov	sp, r7
 8003940:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003944:	51eb851f 	.word	0x51eb851f

08003948 <__cvt>:
 8003948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800394c:	b088      	sub	sp, #32
 800394e:	2b00      	cmp	r3, #0
 8003950:	461f      	mov	r7, r3
 8003952:	4614      	mov	r4, r2
 8003954:	bfb8      	it	lt
 8003956:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800395a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800395c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800395e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003962:	bfb6      	itet	lt
 8003964:	461f      	movlt	r7, r3
 8003966:	2300      	movge	r3, #0
 8003968:	232d      	movlt	r3, #45	; 0x2d
 800396a:	7013      	strb	r3, [r2, #0]
 800396c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800396e:	f023 0820 	bic.w	r8, r3, #32
 8003972:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003976:	d005      	beq.n	8003984 <__cvt+0x3c>
 8003978:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800397c:	d100      	bne.n	8003980 <__cvt+0x38>
 800397e:	3501      	adds	r5, #1
 8003980:	2302      	movs	r3, #2
 8003982:	e000      	b.n	8003986 <__cvt+0x3e>
 8003984:	2303      	movs	r3, #3
 8003986:	aa07      	add	r2, sp, #28
 8003988:	9204      	str	r2, [sp, #16]
 800398a:	aa06      	add	r2, sp, #24
 800398c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003990:	e9cd 3500 	strd	r3, r5, [sp]
 8003994:	4622      	mov	r2, r4
 8003996:	463b      	mov	r3, r7
 8003998:	f001 f96e 	bl	8004c78 <_dtoa_r>
 800399c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80039a0:	4606      	mov	r6, r0
 80039a2:	d102      	bne.n	80039aa <__cvt+0x62>
 80039a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80039a6:	07db      	lsls	r3, r3, #31
 80039a8:	d522      	bpl.n	80039f0 <__cvt+0xa8>
 80039aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80039ae:	eb06 0905 	add.w	r9, r6, r5
 80039b2:	d110      	bne.n	80039d6 <__cvt+0x8e>
 80039b4:	7833      	ldrb	r3, [r6, #0]
 80039b6:	2b30      	cmp	r3, #48	; 0x30
 80039b8:	d10a      	bne.n	80039d0 <__cvt+0x88>
 80039ba:	2200      	movs	r2, #0
 80039bc:	2300      	movs	r3, #0
 80039be:	4620      	mov	r0, r4
 80039c0:	4639      	mov	r1, r7
 80039c2:	f7fd f881 	bl	8000ac8 <__aeabi_dcmpeq>
 80039c6:	b918      	cbnz	r0, 80039d0 <__cvt+0x88>
 80039c8:	f1c5 0501 	rsb	r5, r5, #1
 80039cc:	f8ca 5000 	str.w	r5, [sl]
 80039d0:	f8da 3000 	ldr.w	r3, [sl]
 80039d4:	4499      	add	r9, r3
 80039d6:	2200      	movs	r2, #0
 80039d8:	2300      	movs	r3, #0
 80039da:	4620      	mov	r0, r4
 80039dc:	4639      	mov	r1, r7
 80039de:	f7fd f873 	bl	8000ac8 <__aeabi_dcmpeq>
 80039e2:	b108      	cbz	r0, 80039e8 <__cvt+0xa0>
 80039e4:	f8cd 901c 	str.w	r9, [sp, #28]
 80039e8:	2230      	movs	r2, #48	; 0x30
 80039ea:	9b07      	ldr	r3, [sp, #28]
 80039ec:	454b      	cmp	r3, r9
 80039ee:	d307      	bcc.n	8003a00 <__cvt+0xb8>
 80039f0:	9b07      	ldr	r3, [sp, #28]
 80039f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80039f4:	1b9b      	subs	r3, r3, r6
 80039f6:	4630      	mov	r0, r6
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	b008      	add	sp, #32
 80039fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a00:	1c59      	adds	r1, r3, #1
 8003a02:	9107      	str	r1, [sp, #28]
 8003a04:	701a      	strb	r2, [r3, #0]
 8003a06:	e7f0      	b.n	80039ea <__cvt+0xa2>

08003a08 <__exponent>:
 8003a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2900      	cmp	r1, #0
 8003a0e:	bfb8      	it	lt
 8003a10:	4249      	neglt	r1, r1
 8003a12:	f803 2b02 	strb.w	r2, [r3], #2
 8003a16:	bfb4      	ite	lt
 8003a18:	222d      	movlt	r2, #45	; 0x2d
 8003a1a:	222b      	movge	r2, #43	; 0x2b
 8003a1c:	2909      	cmp	r1, #9
 8003a1e:	7042      	strb	r2, [r0, #1]
 8003a20:	dd2a      	ble.n	8003a78 <__exponent+0x70>
 8003a22:	f10d 0207 	add.w	r2, sp, #7
 8003a26:	4617      	mov	r7, r2
 8003a28:	260a      	movs	r6, #10
 8003a2a:	4694      	mov	ip, r2
 8003a2c:	fb91 f5f6 	sdiv	r5, r1, r6
 8003a30:	fb06 1415 	mls	r4, r6, r5, r1
 8003a34:	3430      	adds	r4, #48	; 0x30
 8003a36:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003a3a:	460c      	mov	r4, r1
 8003a3c:	2c63      	cmp	r4, #99	; 0x63
 8003a3e:	f102 32ff 	add.w	r2, r2, #4294967295
 8003a42:	4629      	mov	r1, r5
 8003a44:	dcf1      	bgt.n	8003a2a <__exponent+0x22>
 8003a46:	3130      	adds	r1, #48	; 0x30
 8003a48:	f1ac 0402 	sub.w	r4, ip, #2
 8003a4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003a50:	1c41      	adds	r1, r0, #1
 8003a52:	4622      	mov	r2, r4
 8003a54:	42ba      	cmp	r2, r7
 8003a56:	d30a      	bcc.n	8003a6e <__exponent+0x66>
 8003a58:	f10d 0209 	add.w	r2, sp, #9
 8003a5c:	eba2 020c 	sub.w	r2, r2, ip
 8003a60:	42bc      	cmp	r4, r7
 8003a62:	bf88      	it	hi
 8003a64:	2200      	movhi	r2, #0
 8003a66:	4413      	add	r3, r2
 8003a68:	1a18      	subs	r0, r3, r0
 8003a6a:	b003      	add	sp, #12
 8003a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a6e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003a72:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003a76:	e7ed      	b.n	8003a54 <__exponent+0x4c>
 8003a78:	2330      	movs	r3, #48	; 0x30
 8003a7a:	3130      	adds	r1, #48	; 0x30
 8003a7c:	7083      	strb	r3, [r0, #2]
 8003a7e:	70c1      	strb	r1, [r0, #3]
 8003a80:	1d03      	adds	r3, r0, #4
 8003a82:	e7f1      	b.n	8003a68 <__exponent+0x60>

08003a84 <_printf_float>:
 8003a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a88:	b091      	sub	sp, #68	; 0x44
 8003a8a:	460c      	mov	r4, r1
 8003a8c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003a90:	4616      	mov	r6, r2
 8003a92:	461f      	mov	r7, r3
 8003a94:	4605      	mov	r5, r0
 8003a96:	f000 ffed 	bl	8004a74 <_localeconv_r>
 8003a9a:	6803      	ldr	r3, [r0, #0]
 8003a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fc fbe6 	bl	8000270 <strlen>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	930e      	str	r3, [sp, #56]	; 0x38
 8003aa8:	f8d8 3000 	ldr.w	r3, [r8]
 8003aac:	900a      	str	r0, [sp, #40]	; 0x28
 8003aae:	3307      	adds	r3, #7
 8003ab0:	f023 0307 	bic.w	r3, r3, #7
 8003ab4:	f103 0208 	add.w	r2, r3, #8
 8003ab8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003abc:	f8d4 b000 	ldr.w	fp, [r4]
 8003ac0:	f8c8 2000 	str.w	r2, [r8]
 8003ac4:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003ac8:	4652      	mov	r2, sl
 8003aca:	4643      	mov	r3, r8
 8003acc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ad0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003ad4:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ad6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ad8:	4b9c      	ldr	r3, [pc, #624]	; (8003d4c <_printf_float+0x2c8>)
 8003ada:	f04f 32ff 	mov.w	r2, #4294967295
 8003ade:	4650      	mov	r0, sl
 8003ae0:	f7fd f824 	bl	8000b2c <__aeabi_dcmpun>
 8003ae4:	bb70      	cbnz	r0, 8003b44 <_printf_float+0xc0>
 8003ae6:	4b99      	ldr	r3, [pc, #612]	; (8003d4c <_printf_float+0x2c8>)
 8003ae8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003aea:	f04f 32ff 	mov.w	r2, #4294967295
 8003aee:	4650      	mov	r0, sl
 8003af0:	f7fc fffe 	bl	8000af0 <__aeabi_dcmple>
 8003af4:	bb30      	cbnz	r0, 8003b44 <_printf_float+0xc0>
 8003af6:	2200      	movs	r2, #0
 8003af8:	2300      	movs	r3, #0
 8003afa:	4650      	mov	r0, sl
 8003afc:	4641      	mov	r1, r8
 8003afe:	f7fc ffed 	bl	8000adc <__aeabi_dcmplt>
 8003b02:	b110      	cbz	r0, 8003b0a <_printf_float+0x86>
 8003b04:	232d      	movs	r3, #45	; 0x2d
 8003b06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b0a:	4a91      	ldr	r2, [pc, #580]	; (8003d50 <_printf_float+0x2cc>)
 8003b0c:	4b91      	ldr	r3, [pc, #580]	; (8003d54 <_printf_float+0x2d0>)
 8003b0e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003b12:	bf94      	ite	ls
 8003b14:	4690      	movls	r8, r2
 8003b16:	4698      	movhi	r8, r3
 8003b18:	2303      	movs	r3, #3
 8003b1a:	6123      	str	r3, [r4, #16]
 8003b1c:	f02b 0304 	bic.w	r3, fp, #4
 8003b20:	6023      	str	r3, [r4, #0]
 8003b22:	f04f 0a00 	mov.w	sl, #0
 8003b26:	9700      	str	r7, [sp, #0]
 8003b28:	4633      	mov	r3, r6
 8003b2a:	aa0f      	add	r2, sp, #60	; 0x3c
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	4628      	mov	r0, r5
 8003b30:	f000 f9d4 	bl	8003edc <_printf_common>
 8003b34:	3001      	adds	r0, #1
 8003b36:	f040 808f 	bne.w	8003c58 <_printf_float+0x1d4>
 8003b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b3e:	b011      	add	sp, #68	; 0x44
 8003b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b44:	4652      	mov	r2, sl
 8003b46:	4643      	mov	r3, r8
 8003b48:	4650      	mov	r0, sl
 8003b4a:	4641      	mov	r1, r8
 8003b4c:	f7fc ffee 	bl	8000b2c <__aeabi_dcmpun>
 8003b50:	b140      	cbz	r0, 8003b64 <_printf_float+0xe0>
 8003b52:	f1b8 0f00 	cmp.w	r8, #0
 8003b56:	bfbc      	itt	lt
 8003b58:	232d      	movlt	r3, #45	; 0x2d
 8003b5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003b5e:	4a7e      	ldr	r2, [pc, #504]	; (8003d58 <_printf_float+0x2d4>)
 8003b60:	4b7e      	ldr	r3, [pc, #504]	; (8003d5c <_printf_float+0x2d8>)
 8003b62:	e7d4      	b.n	8003b0e <_printf_float+0x8a>
 8003b64:	6863      	ldr	r3, [r4, #4]
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003b6c:	d142      	bne.n	8003bf4 <_printf_float+0x170>
 8003b6e:	2306      	movs	r3, #6
 8003b70:	6063      	str	r3, [r4, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	9206      	str	r2, [sp, #24]
 8003b76:	aa0e      	add	r2, sp, #56	; 0x38
 8003b78:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003b7c:	aa0d      	add	r2, sp, #52	; 0x34
 8003b7e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003b82:	9203      	str	r2, [sp, #12]
 8003b84:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003b88:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003b8c:	6023      	str	r3, [r4, #0]
 8003b8e:	6863      	ldr	r3, [r4, #4]
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	4652      	mov	r2, sl
 8003b94:	4643      	mov	r3, r8
 8003b96:	4628      	mov	r0, r5
 8003b98:	910b      	str	r1, [sp, #44]	; 0x2c
 8003b9a:	f7ff fed5 	bl	8003948 <__cvt>
 8003b9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ba0:	2947      	cmp	r1, #71	; 0x47
 8003ba2:	4680      	mov	r8, r0
 8003ba4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003ba6:	d108      	bne.n	8003bba <_printf_float+0x136>
 8003ba8:	1cc8      	adds	r0, r1, #3
 8003baa:	db02      	blt.n	8003bb2 <_printf_float+0x12e>
 8003bac:	6863      	ldr	r3, [r4, #4]
 8003bae:	4299      	cmp	r1, r3
 8003bb0:	dd40      	ble.n	8003c34 <_printf_float+0x1b0>
 8003bb2:	f1a9 0902 	sub.w	r9, r9, #2
 8003bb6:	fa5f f989 	uxtb.w	r9, r9
 8003bba:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003bbe:	d81f      	bhi.n	8003c00 <_printf_float+0x17c>
 8003bc0:	3901      	subs	r1, #1
 8003bc2:	464a      	mov	r2, r9
 8003bc4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003bc8:	910d      	str	r1, [sp, #52]	; 0x34
 8003bca:	f7ff ff1d 	bl	8003a08 <__exponent>
 8003bce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003bd0:	1813      	adds	r3, r2, r0
 8003bd2:	2a01      	cmp	r2, #1
 8003bd4:	4682      	mov	sl, r0
 8003bd6:	6123      	str	r3, [r4, #16]
 8003bd8:	dc02      	bgt.n	8003be0 <_printf_float+0x15c>
 8003bda:	6822      	ldr	r2, [r4, #0]
 8003bdc:	07d2      	lsls	r2, r2, #31
 8003bde:	d501      	bpl.n	8003be4 <_printf_float+0x160>
 8003be0:	3301      	adds	r3, #1
 8003be2:	6123      	str	r3, [r4, #16]
 8003be4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d09c      	beq.n	8003b26 <_printf_float+0xa2>
 8003bec:	232d      	movs	r3, #45	; 0x2d
 8003bee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bf2:	e798      	b.n	8003b26 <_printf_float+0xa2>
 8003bf4:	2947      	cmp	r1, #71	; 0x47
 8003bf6:	d1bc      	bne.n	8003b72 <_printf_float+0xee>
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1ba      	bne.n	8003b72 <_printf_float+0xee>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e7b7      	b.n	8003b70 <_printf_float+0xec>
 8003c00:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003c04:	d118      	bne.n	8003c38 <_printf_float+0x1b4>
 8003c06:	2900      	cmp	r1, #0
 8003c08:	6863      	ldr	r3, [r4, #4]
 8003c0a:	dd0b      	ble.n	8003c24 <_printf_float+0x1a0>
 8003c0c:	6121      	str	r1, [r4, #16]
 8003c0e:	b913      	cbnz	r3, 8003c16 <_printf_float+0x192>
 8003c10:	6822      	ldr	r2, [r4, #0]
 8003c12:	07d0      	lsls	r0, r2, #31
 8003c14:	d502      	bpl.n	8003c1c <_printf_float+0x198>
 8003c16:	3301      	adds	r3, #1
 8003c18:	440b      	add	r3, r1
 8003c1a:	6123      	str	r3, [r4, #16]
 8003c1c:	65a1      	str	r1, [r4, #88]	; 0x58
 8003c1e:	f04f 0a00 	mov.w	sl, #0
 8003c22:	e7df      	b.n	8003be4 <_printf_float+0x160>
 8003c24:	b913      	cbnz	r3, 8003c2c <_printf_float+0x1a8>
 8003c26:	6822      	ldr	r2, [r4, #0]
 8003c28:	07d2      	lsls	r2, r2, #31
 8003c2a:	d501      	bpl.n	8003c30 <_printf_float+0x1ac>
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	e7f4      	b.n	8003c1a <_printf_float+0x196>
 8003c30:	2301      	movs	r3, #1
 8003c32:	e7f2      	b.n	8003c1a <_printf_float+0x196>
 8003c34:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003c38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c3a:	4299      	cmp	r1, r3
 8003c3c:	db05      	blt.n	8003c4a <_printf_float+0x1c6>
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	6121      	str	r1, [r4, #16]
 8003c42:	07d8      	lsls	r0, r3, #31
 8003c44:	d5ea      	bpl.n	8003c1c <_printf_float+0x198>
 8003c46:	1c4b      	adds	r3, r1, #1
 8003c48:	e7e7      	b.n	8003c1a <_printf_float+0x196>
 8003c4a:	2900      	cmp	r1, #0
 8003c4c:	bfd4      	ite	le
 8003c4e:	f1c1 0202 	rsble	r2, r1, #2
 8003c52:	2201      	movgt	r2, #1
 8003c54:	4413      	add	r3, r2
 8003c56:	e7e0      	b.n	8003c1a <_printf_float+0x196>
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	055a      	lsls	r2, r3, #21
 8003c5c:	d407      	bmi.n	8003c6e <_printf_float+0x1ea>
 8003c5e:	6923      	ldr	r3, [r4, #16]
 8003c60:	4642      	mov	r2, r8
 8003c62:	4631      	mov	r1, r6
 8003c64:	4628      	mov	r0, r5
 8003c66:	47b8      	blx	r7
 8003c68:	3001      	adds	r0, #1
 8003c6a:	d12b      	bne.n	8003cc4 <_printf_float+0x240>
 8003c6c:	e765      	b.n	8003b3a <_printf_float+0xb6>
 8003c6e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003c72:	f240 80dc 	bls.w	8003e2e <_printf_float+0x3aa>
 8003c76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f7fc ff23 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c82:	2800      	cmp	r0, #0
 8003c84:	d033      	beq.n	8003cee <_printf_float+0x26a>
 8003c86:	4a36      	ldr	r2, [pc, #216]	; (8003d60 <_printf_float+0x2dc>)
 8003c88:	2301      	movs	r3, #1
 8003c8a:	4631      	mov	r1, r6
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	47b8      	blx	r7
 8003c90:	3001      	adds	r0, #1
 8003c92:	f43f af52 	beq.w	8003b3a <_printf_float+0xb6>
 8003c96:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	db02      	blt.n	8003ca4 <_printf_float+0x220>
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	07d8      	lsls	r0, r3, #31
 8003ca2:	d50f      	bpl.n	8003cc4 <_printf_float+0x240>
 8003ca4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ca8:	4631      	mov	r1, r6
 8003caa:	4628      	mov	r0, r5
 8003cac:	47b8      	blx	r7
 8003cae:	3001      	adds	r0, #1
 8003cb0:	f43f af43 	beq.w	8003b3a <_printf_float+0xb6>
 8003cb4:	f04f 0800 	mov.w	r8, #0
 8003cb8:	f104 091a 	add.w	r9, r4, #26
 8003cbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	4543      	cmp	r3, r8
 8003cc2:	dc09      	bgt.n	8003cd8 <_printf_float+0x254>
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	079b      	lsls	r3, r3, #30
 8003cc8:	f100 8103 	bmi.w	8003ed2 <_printf_float+0x44e>
 8003ccc:	68e0      	ldr	r0, [r4, #12]
 8003cce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003cd0:	4298      	cmp	r0, r3
 8003cd2:	bfb8      	it	lt
 8003cd4:	4618      	movlt	r0, r3
 8003cd6:	e732      	b.n	8003b3e <_printf_float+0xba>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	464a      	mov	r2, r9
 8003cdc:	4631      	mov	r1, r6
 8003cde:	4628      	mov	r0, r5
 8003ce0:	47b8      	blx	r7
 8003ce2:	3001      	adds	r0, #1
 8003ce4:	f43f af29 	beq.w	8003b3a <_printf_float+0xb6>
 8003ce8:	f108 0801 	add.w	r8, r8, #1
 8003cec:	e7e6      	b.n	8003cbc <_printf_float+0x238>
 8003cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	dc37      	bgt.n	8003d64 <_printf_float+0x2e0>
 8003cf4:	4a1a      	ldr	r2, [pc, #104]	; (8003d60 <_printf_float+0x2dc>)
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	4631      	mov	r1, r6
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	47b8      	blx	r7
 8003cfe:	3001      	adds	r0, #1
 8003d00:	f43f af1b 	beq.w	8003b3a <_printf_float+0xb6>
 8003d04:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	d102      	bne.n	8003d12 <_printf_float+0x28e>
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	07d9      	lsls	r1, r3, #31
 8003d10:	d5d8      	bpl.n	8003cc4 <_printf_float+0x240>
 8003d12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d16:	4631      	mov	r1, r6
 8003d18:	4628      	mov	r0, r5
 8003d1a:	47b8      	blx	r7
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	f43f af0c 	beq.w	8003b3a <_printf_float+0xb6>
 8003d22:	f04f 0900 	mov.w	r9, #0
 8003d26:	f104 0a1a 	add.w	sl, r4, #26
 8003d2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d2c:	425b      	negs	r3, r3
 8003d2e:	454b      	cmp	r3, r9
 8003d30:	dc01      	bgt.n	8003d36 <_printf_float+0x2b2>
 8003d32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d34:	e794      	b.n	8003c60 <_printf_float+0x1dc>
 8003d36:	2301      	movs	r3, #1
 8003d38:	4652      	mov	r2, sl
 8003d3a:	4631      	mov	r1, r6
 8003d3c:	4628      	mov	r0, r5
 8003d3e:	47b8      	blx	r7
 8003d40:	3001      	adds	r0, #1
 8003d42:	f43f aefa 	beq.w	8003b3a <_printf_float+0xb6>
 8003d46:	f109 0901 	add.w	r9, r9, #1
 8003d4a:	e7ee      	b.n	8003d2a <_printf_float+0x2a6>
 8003d4c:	7fefffff 	.word	0x7fefffff
 8003d50:	080081b8 	.word	0x080081b8
 8003d54:	080081bc 	.word	0x080081bc
 8003d58:	080081c0 	.word	0x080081c0
 8003d5c:	080081c4 	.word	0x080081c4
 8003d60:	080081c8 	.word	0x080081c8
 8003d64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	bfa8      	it	ge
 8003d6c:	461a      	movge	r2, r3
 8003d6e:	2a00      	cmp	r2, #0
 8003d70:	4691      	mov	r9, r2
 8003d72:	dc37      	bgt.n	8003de4 <_printf_float+0x360>
 8003d74:	f04f 0b00 	mov.w	fp, #0
 8003d78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d7c:	f104 021a 	add.w	r2, r4, #26
 8003d80:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003d84:	ebaa 0309 	sub.w	r3, sl, r9
 8003d88:	455b      	cmp	r3, fp
 8003d8a:	dc33      	bgt.n	8003df4 <_printf_float+0x370>
 8003d8c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d90:	429a      	cmp	r2, r3
 8003d92:	db3b      	blt.n	8003e0c <_printf_float+0x388>
 8003d94:	6823      	ldr	r3, [r4, #0]
 8003d96:	07da      	lsls	r2, r3, #31
 8003d98:	d438      	bmi.n	8003e0c <_printf_float+0x388>
 8003d9a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003d9e:	eba2 0903 	sub.w	r9, r2, r3
 8003da2:	eba2 020a 	sub.w	r2, r2, sl
 8003da6:	4591      	cmp	r9, r2
 8003da8:	bfa8      	it	ge
 8003daa:	4691      	movge	r9, r2
 8003dac:	f1b9 0f00 	cmp.w	r9, #0
 8003db0:	dc34      	bgt.n	8003e1c <_printf_float+0x398>
 8003db2:	f04f 0800 	mov.w	r8, #0
 8003db6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003dba:	f104 0a1a 	add.w	sl, r4, #26
 8003dbe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003dc2:	1a9b      	subs	r3, r3, r2
 8003dc4:	eba3 0309 	sub.w	r3, r3, r9
 8003dc8:	4543      	cmp	r3, r8
 8003dca:	f77f af7b 	ble.w	8003cc4 <_printf_float+0x240>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	4652      	mov	r2, sl
 8003dd2:	4631      	mov	r1, r6
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	47b8      	blx	r7
 8003dd8:	3001      	adds	r0, #1
 8003dda:	f43f aeae 	beq.w	8003b3a <_printf_float+0xb6>
 8003dde:	f108 0801 	add.w	r8, r8, #1
 8003de2:	e7ec      	b.n	8003dbe <_printf_float+0x33a>
 8003de4:	4613      	mov	r3, r2
 8003de6:	4631      	mov	r1, r6
 8003de8:	4642      	mov	r2, r8
 8003dea:	4628      	mov	r0, r5
 8003dec:	47b8      	blx	r7
 8003dee:	3001      	adds	r0, #1
 8003df0:	d1c0      	bne.n	8003d74 <_printf_float+0x2f0>
 8003df2:	e6a2      	b.n	8003b3a <_printf_float+0xb6>
 8003df4:	2301      	movs	r3, #1
 8003df6:	4631      	mov	r1, r6
 8003df8:	4628      	mov	r0, r5
 8003dfa:	920b      	str	r2, [sp, #44]	; 0x2c
 8003dfc:	47b8      	blx	r7
 8003dfe:	3001      	adds	r0, #1
 8003e00:	f43f ae9b 	beq.w	8003b3a <_printf_float+0xb6>
 8003e04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003e06:	f10b 0b01 	add.w	fp, fp, #1
 8003e0a:	e7b9      	b.n	8003d80 <_printf_float+0x2fc>
 8003e0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e10:	4631      	mov	r1, r6
 8003e12:	4628      	mov	r0, r5
 8003e14:	47b8      	blx	r7
 8003e16:	3001      	adds	r0, #1
 8003e18:	d1bf      	bne.n	8003d9a <_printf_float+0x316>
 8003e1a:	e68e      	b.n	8003b3a <_printf_float+0xb6>
 8003e1c:	464b      	mov	r3, r9
 8003e1e:	eb08 020a 	add.w	r2, r8, sl
 8003e22:	4631      	mov	r1, r6
 8003e24:	4628      	mov	r0, r5
 8003e26:	47b8      	blx	r7
 8003e28:	3001      	adds	r0, #1
 8003e2a:	d1c2      	bne.n	8003db2 <_printf_float+0x32e>
 8003e2c:	e685      	b.n	8003b3a <_printf_float+0xb6>
 8003e2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e30:	2a01      	cmp	r2, #1
 8003e32:	dc01      	bgt.n	8003e38 <_printf_float+0x3b4>
 8003e34:	07db      	lsls	r3, r3, #31
 8003e36:	d539      	bpl.n	8003eac <_printf_float+0x428>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	4642      	mov	r2, r8
 8003e3c:	4631      	mov	r1, r6
 8003e3e:	4628      	mov	r0, r5
 8003e40:	47b8      	blx	r7
 8003e42:	3001      	adds	r0, #1
 8003e44:	f43f ae79 	beq.w	8003b3a <_printf_float+0xb6>
 8003e48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e4c:	4631      	mov	r1, r6
 8003e4e:	4628      	mov	r0, r5
 8003e50:	47b8      	blx	r7
 8003e52:	3001      	adds	r0, #1
 8003e54:	f43f ae71 	beq.w	8003b3a <_printf_float+0xb6>
 8003e58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8003e64:	f7fc fe30 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e68:	b9d8      	cbnz	r0, 8003ea2 <_printf_float+0x41e>
 8003e6a:	f109 33ff 	add.w	r3, r9, #4294967295
 8003e6e:	f108 0201 	add.w	r2, r8, #1
 8003e72:	4631      	mov	r1, r6
 8003e74:	4628      	mov	r0, r5
 8003e76:	47b8      	blx	r7
 8003e78:	3001      	adds	r0, #1
 8003e7a:	d10e      	bne.n	8003e9a <_printf_float+0x416>
 8003e7c:	e65d      	b.n	8003b3a <_printf_float+0xb6>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	464a      	mov	r2, r9
 8003e82:	4631      	mov	r1, r6
 8003e84:	4628      	mov	r0, r5
 8003e86:	47b8      	blx	r7
 8003e88:	3001      	adds	r0, #1
 8003e8a:	f43f ae56 	beq.w	8003b3a <_printf_float+0xb6>
 8003e8e:	f108 0801 	add.w	r8, r8, #1
 8003e92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e94:	3b01      	subs	r3, #1
 8003e96:	4543      	cmp	r3, r8
 8003e98:	dcf1      	bgt.n	8003e7e <_printf_float+0x3fa>
 8003e9a:	4653      	mov	r3, sl
 8003e9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003ea0:	e6df      	b.n	8003c62 <_printf_float+0x1de>
 8003ea2:	f04f 0800 	mov.w	r8, #0
 8003ea6:	f104 091a 	add.w	r9, r4, #26
 8003eaa:	e7f2      	b.n	8003e92 <_printf_float+0x40e>
 8003eac:	2301      	movs	r3, #1
 8003eae:	4642      	mov	r2, r8
 8003eb0:	e7df      	b.n	8003e72 <_printf_float+0x3ee>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	464a      	mov	r2, r9
 8003eb6:	4631      	mov	r1, r6
 8003eb8:	4628      	mov	r0, r5
 8003eba:	47b8      	blx	r7
 8003ebc:	3001      	adds	r0, #1
 8003ebe:	f43f ae3c 	beq.w	8003b3a <_printf_float+0xb6>
 8003ec2:	f108 0801 	add.w	r8, r8, #1
 8003ec6:	68e3      	ldr	r3, [r4, #12]
 8003ec8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003eca:	1a5b      	subs	r3, r3, r1
 8003ecc:	4543      	cmp	r3, r8
 8003ece:	dcf0      	bgt.n	8003eb2 <_printf_float+0x42e>
 8003ed0:	e6fc      	b.n	8003ccc <_printf_float+0x248>
 8003ed2:	f04f 0800 	mov.w	r8, #0
 8003ed6:	f104 0919 	add.w	r9, r4, #25
 8003eda:	e7f4      	b.n	8003ec6 <_printf_float+0x442>

08003edc <_printf_common>:
 8003edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee0:	4616      	mov	r6, r2
 8003ee2:	4699      	mov	r9, r3
 8003ee4:	688a      	ldr	r2, [r1, #8]
 8003ee6:	690b      	ldr	r3, [r1, #16]
 8003ee8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003eec:	4293      	cmp	r3, r2
 8003eee:	bfb8      	it	lt
 8003ef0:	4613      	movlt	r3, r2
 8003ef2:	6033      	str	r3, [r6, #0]
 8003ef4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ef8:	4607      	mov	r7, r0
 8003efa:	460c      	mov	r4, r1
 8003efc:	b10a      	cbz	r2, 8003f02 <_printf_common+0x26>
 8003efe:	3301      	adds	r3, #1
 8003f00:	6033      	str	r3, [r6, #0]
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	0699      	lsls	r1, r3, #26
 8003f06:	bf42      	ittt	mi
 8003f08:	6833      	ldrmi	r3, [r6, #0]
 8003f0a:	3302      	addmi	r3, #2
 8003f0c:	6033      	strmi	r3, [r6, #0]
 8003f0e:	6825      	ldr	r5, [r4, #0]
 8003f10:	f015 0506 	ands.w	r5, r5, #6
 8003f14:	d106      	bne.n	8003f24 <_printf_common+0x48>
 8003f16:	f104 0a19 	add.w	sl, r4, #25
 8003f1a:	68e3      	ldr	r3, [r4, #12]
 8003f1c:	6832      	ldr	r2, [r6, #0]
 8003f1e:	1a9b      	subs	r3, r3, r2
 8003f20:	42ab      	cmp	r3, r5
 8003f22:	dc26      	bgt.n	8003f72 <_printf_common+0x96>
 8003f24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f28:	1e13      	subs	r3, r2, #0
 8003f2a:	6822      	ldr	r2, [r4, #0]
 8003f2c:	bf18      	it	ne
 8003f2e:	2301      	movne	r3, #1
 8003f30:	0692      	lsls	r2, r2, #26
 8003f32:	d42b      	bmi.n	8003f8c <_printf_common+0xb0>
 8003f34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f38:	4649      	mov	r1, r9
 8003f3a:	4638      	mov	r0, r7
 8003f3c:	47c0      	blx	r8
 8003f3e:	3001      	adds	r0, #1
 8003f40:	d01e      	beq.n	8003f80 <_printf_common+0xa4>
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	6922      	ldr	r2, [r4, #16]
 8003f46:	f003 0306 	and.w	r3, r3, #6
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	bf02      	ittt	eq
 8003f4e:	68e5      	ldreq	r5, [r4, #12]
 8003f50:	6833      	ldreq	r3, [r6, #0]
 8003f52:	1aed      	subeq	r5, r5, r3
 8003f54:	68a3      	ldr	r3, [r4, #8]
 8003f56:	bf0c      	ite	eq
 8003f58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f5c:	2500      	movne	r5, #0
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	bfc4      	itt	gt
 8003f62:	1a9b      	subgt	r3, r3, r2
 8003f64:	18ed      	addgt	r5, r5, r3
 8003f66:	2600      	movs	r6, #0
 8003f68:	341a      	adds	r4, #26
 8003f6a:	42b5      	cmp	r5, r6
 8003f6c:	d11a      	bne.n	8003fa4 <_printf_common+0xc8>
 8003f6e:	2000      	movs	r0, #0
 8003f70:	e008      	b.n	8003f84 <_printf_common+0xa8>
 8003f72:	2301      	movs	r3, #1
 8003f74:	4652      	mov	r2, sl
 8003f76:	4649      	mov	r1, r9
 8003f78:	4638      	mov	r0, r7
 8003f7a:	47c0      	blx	r8
 8003f7c:	3001      	adds	r0, #1
 8003f7e:	d103      	bne.n	8003f88 <_printf_common+0xac>
 8003f80:	f04f 30ff 	mov.w	r0, #4294967295
 8003f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f88:	3501      	adds	r5, #1
 8003f8a:	e7c6      	b.n	8003f1a <_printf_common+0x3e>
 8003f8c:	18e1      	adds	r1, r4, r3
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	2030      	movs	r0, #48	; 0x30
 8003f92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f96:	4422      	add	r2, r4
 8003f98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fa0:	3302      	adds	r3, #2
 8003fa2:	e7c7      	b.n	8003f34 <_printf_common+0x58>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	4622      	mov	r2, r4
 8003fa8:	4649      	mov	r1, r9
 8003faa:	4638      	mov	r0, r7
 8003fac:	47c0      	blx	r8
 8003fae:	3001      	adds	r0, #1
 8003fb0:	d0e6      	beq.n	8003f80 <_printf_common+0xa4>
 8003fb2:	3601      	adds	r6, #1
 8003fb4:	e7d9      	b.n	8003f6a <_printf_common+0x8e>
	...

08003fb8 <_printf_i>:
 8003fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fbc:	7e0f      	ldrb	r7, [r1, #24]
 8003fbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fc0:	2f78      	cmp	r7, #120	; 0x78
 8003fc2:	4691      	mov	r9, r2
 8003fc4:	4680      	mov	r8, r0
 8003fc6:	460c      	mov	r4, r1
 8003fc8:	469a      	mov	sl, r3
 8003fca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fce:	d807      	bhi.n	8003fe0 <_printf_i+0x28>
 8003fd0:	2f62      	cmp	r7, #98	; 0x62
 8003fd2:	d80a      	bhi.n	8003fea <_printf_i+0x32>
 8003fd4:	2f00      	cmp	r7, #0
 8003fd6:	f000 80d4 	beq.w	8004182 <_printf_i+0x1ca>
 8003fda:	2f58      	cmp	r7, #88	; 0x58
 8003fdc:	f000 80c0 	beq.w	8004160 <_printf_i+0x1a8>
 8003fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fe4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fe8:	e03a      	b.n	8004060 <_printf_i+0xa8>
 8003fea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fee:	2b15      	cmp	r3, #21
 8003ff0:	d8f6      	bhi.n	8003fe0 <_printf_i+0x28>
 8003ff2:	a101      	add	r1, pc, #4	; (adr r1, 8003ff8 <_printf_i+0x40>)
 8003ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ff8:	08004051 	.word	0x08004051
 8003ffc:	08004065 	.word	0x08004065
 8004000:	08003fe1 	.word	0x08003fe1
 8004004:	08003fe1 	.word	0x08003fe1
 8004008:	08003fe1 	.word	0x08003fe1
 800400c:	08003fe1 	.word	0x08003fe1
 8004010:	08004065 	.word	0x08004065
 8004014:	08003fe1 	.word	0x08003fe1
 8004018:	08003fe1 	.word	0x08003fe1
 800401c:	08003fe1 	.word	0x08003fe1
 8004020:	08003fe1 	.word	0x08003fe1
 8004024:	08004169 	.word	0x08004169
 8004028:	08004091 	.word	0x08004091
 800402c:	08004123 	.word	0x08004123
 8004030:	08003fe1 	.word	0x08003fe1
 8004034:	08003fe1 	.word	0x08003fe1
 8004038:	0800418b 	.word	0x0800418b
 800403c:	08003fe1 	.word	0x08003fe1
 8004040:	08004091 	.word	0x08004091
 8004044:	08003fe1 	.word	0x08003fe1
 8004048:	08003fe1 	.word	0x08003fe1
 800404c:	0800412b 	.word	0x0800412b
 8004050:	682b      	ldr	r3, [r5, #0]
 8004052:	1d1a      	adds	r2, r3, #4
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	602a      	str	r2, [r5, #0]
 8004058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800405c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004060:	2301      	movs	r3, #1
 8004062:	e09f      	b.n	80041a4 <_printf_i+0x1ec>
 8004064:	6820      	ldr	r0, [r4, #0]
 8004066:	682b      	ldr	r3, [r5, #0]
 8004068:	0607      	lsls	r7, r0, #24
 800406a:	f103 0104 	add.w	r1, r3, #4
 800406e:	6029      	str	r1, [r5, #0]
 8004070:	d501      	bpl.n	8004076 <_printf_i+0xbe>
 8004072:	681e      	ldr	r6, [r3, #0]
 8004074:	e003      	b.n	800407e <_printf_i+0xc6>
 8004076:	0646      	lsls	r6, r0, #25
 8004078:	d5fb      	bpl.n	8004072 <_printf_i+0xba>
 800407a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800407e:	2e00      	cmp	r6, #0
 8004080:	da03      	bge.n	800408a <_printf_i+0xd2>
 8004082:	232d      	movs	r3, #45	; 0x2d
 8004084:	4276      	negs	r6, r6
 8004086:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800408a:	485a      	ldr	r0, [pc, #360]	; (80041f4 <_printf_i+0x23c>)
 800408c:	230a      	movs	r3, #10
 800408e:	e012      	b.n	80040b6 <_printf_i+0xfe>
 8004090:	682b      	ldr	r3, [r5, #0]
 8004092:	6820      	ldr	r0, [r4, #0]
 8004094:	1d19      	adds	r1, r3, #4
 8004096:	6029      	str	r1, [r5, #0]
 8004098:	0605      	lsls	r5, r0, #24
 800409a:	d501      	bpl.n	80040a0 <_printf_i+0xe8>
 800409c:	681e      	ldr	r6, [r3, #0]
 800409e:	e002      	b.n	80040a6 <_printf_i+0xee>
 80040a0:	0641      	lsls	r1, r0, #25
 80040a2:	d5fb      	bpl.n	800409c <_printf_i+0xe4>
 80040a4:	881e      	ldrh	r6, [r3, #0]
 80040a6:	4853      	ldr	r0, [pc, #332]	; (80041f4 <_printf_i+0x23c>)
 80040a8:	2f6f      	cmp	r7, #111	; 0x6f
 80040aa:	bf0c      	ite	eq
 80040ac:	2308      	moveq	r3, #8
 80040ae:	230a      	movne	r3, #10
 80040b0:	2100      	movs	r1, #0
 80040b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040b6:	6865      	ldr	r5, [r4, #4]
 80040b8:	60a5      	str	r5, [r4, #8]
 80040ba:	2d00      	cmp	r5, #0
 80040bc:	bfa2      	ittt	ge
 80040be:	6821      	ldrge	r1, [r4, #0]
 80040c0:	f021 0104 	bicge.w	r1, r1, #4
 80040c4:	6021      	strge	r1, [r4, #0]
 80040c6:	b90e      	cbnz	r6, 80040cc <_printf_i+0x114>
 80040c8:	2d00      	cmp	r5, #0
 80040ca:	d04b      	beq.n	8004164 <_printf_i+0x1ac>
 80040cc:	4615      	mov	r5, r2
 80040ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80040d2:	fb03 6711 	mls	r7, r3, r1, r6
 80040d6:	5dc7      	ldrb	r7, [r0, r7]
 80040d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040dc:	4637      	mov	r7, r6
 80040de:	42bb      	cmp	r3, r7
 80040e0:	460e      	mov	r6, r1
 80040e2:	d9f4      	bls.n	80040ce <_printf_i+0x116>
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d10b      	bne.n	8004100 <_printf_i+0x148>
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	07de      	lsls	r6, r3, #31
 80040ec:	d508      	bpl.n	8004100 <_printf_i+0x148>
 80040ee:	6923      	ldr	r3, [r4, #16]
 80040f0:	6861      	ldr	r1, [r4, #4]
 80040f2:	4299      	cmp	r1, r3
 80040f4:	bfde      	ittt	le
 80040f6:	2330      	movle	r3, #48	; 0x30
 80040f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004100:	1b52      	subs	r2, r2, r5
 8004102:	6122      	str	r2, [r4, #16]
 8004104:	f8cd a000 	str.w	sl, [sp]
 8004108:	464b      	mov	r3, r9
 800410a:	aa03      	add	r2, sp, #12
 800410c:	4621      	mov	r1, r4
 800410e:	4640      	mov	r0, r8
 8004110:	f7ff fee4 	bl	8003edc <_printf_common>
 8004114:	3001      	adds	r0, #1
 8004116:	d14a      	bne.n	80041ae <_printf_i+0x1f6>
 8004118:	f04f 30ff 	mov.w	r0, #4294967295
 800411c:	b004      	add	sp, #16
 800411e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	f043 0320 	orr.w	r3, r3, #32
 8004128:	6023      	str	r3, [r4, #0]
 800412a:	4833      	ldr	r0, [pc, #204]	; (80041f8 <_printf_i+0x240>)
 800412c:	2778      	movs	r7, #120	; 0x78
 800412e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004132:	6823      	ldr	r3, [r4, #0]
 8004134:	6829      	ldr	r1, [r5, #0]
 8004136:	061f      	lsls	r7, r3, #24
 8004138:	f851 6b04 	ldr.w	r6, [r1], #4
 800413c:	d402      	bmi.n	8004144 <_printf_i+0x18c>
 800413e:	065f      	lsls	r7, r3, #25
 8004140:	bf48      	it	mi
 8004142:	b2b6      	uxthmi	r6, r6
 8004144:	07df      	lsls	r7, r3, #31
 8004146:	bf48      	it	mi
 8004148:	f043 0320 	orrmi.w	r3, r3, #32
 800414c:	6029      	str	r1, [r5, #0]
 800414e:	bf48      	it	mi
 8004150:	6023      	strmi	r3, [r4, #0]
 8004152:	b91e      	cbnz	r6, 800415c <_printf_i+0x1a4>
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	f023 0320 	bic.w	r3, r3, #32
 800415a:	6023      	str	r3, [r4, #0]
 800415c:	2310      	movs	r3, #16
 800415e:	e7a7      	b.n	80040b0 <_printf_i+0xf8>
 8004160:	4824      	ldr	r0, [pc, #144]	; (80041f4 <_printf_i+0x23c>)
 8004162:	e7e4      	b.n	800412e <_printf_i+0x176>
 8004164:	4615      	mov	r5, r2
 8004166:	e7bd      	b.n	80040e4 <_printf_i+0x12c>
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	6826      	ldr	r6, [r4, #0]
 800416c:	6961      	ldr	r1, [r4, #20]
 800416e:	1d18      	adds	r0, r3, #4
 8004170:	6028      	str	r0, [r5, #0]
 8004172:	0635      	lsls	r5, r6, #24
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	d501      	bpl.n	800417c <_printf_i+0x1c4>
 8004178:	6019      	str	r1, [r3, #0]
 800417a:	e002      	b.n	8004182 <_printf_i+0x1ca>
 800417c:	0670      	lsls	r0, r6, #25
 800417e:	d5fb      	bpl.n	8004178 <_printf_i+0x1c0>
 8004180:	8019      	strh	r1, [r3, #0]
 8004182:	2300      	movs	r3, #0
 8004184:	6123      	str	r3, [r4, #16]
 8004186:	4615      	mov	r5, r2
 8004188:	e7bc      	b.n	8004104 <_printf_i+0x14c>
 800418a:	682b      	ldr	r3, [r5, #0]
 800418c:	1d1a      	adds	r2, r3, #4
 800418e:	602a      	str	r2, [r5, #0]
 8004190:	681d      	ldr	r5, [r3, #0]
 8004192:	6862      	ldr	r2, [r4, #4]
 8004194:	2100      	movs	r1, #0
 8004196:	4628      	mov	r0, r5
 8004198:	f7fc f81a 	bl	80001d0 <memchr>
 800419c:	b108      	cbz	r0, 80041a2 <_printf_i+0x1ea>
 800419e:	1b40      	subs	r0, r0, r5
 80041a0:	6060      	str	r0, [r4, #4]
 80041a2:	6863      	ldr	r3, [r4, #4]
 80041a4:	6123      	str	r3, [r4, #16]
 80041a6:	2300      	movs	r3, #0
 80041a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ac:	e7aa      	b.n	8004104 <_printf_i+0x14c>
 80041ae:	6923      	ldr	r3, [r4, #16]
 80041b0:	462a      	mov	r2, r5
 80041b2:	4649      	mov	r1, r9
 80041b4:	4640      	mov	r0, r8
 80041b6:	47d0      	blx	sl
 80041b8:	3001      	adds	r0, #1
 80041ba:	d0ad      	beq.n	8004118 <_printf_i+0x160>
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	079b      	lsls	r3, r3, #30
 80041c0:	d413      	bmi.n	80041ea <_printf_i+0x232>
 80041c2:	68e0      	ldr	r0, [r4, #12]
 80041c4:	9b03      	ldr	r3, [sp, #12]
 80041c6:	4298      	cmp	r0, r3
 80041c8:	bfb8      	it	lt
 80041ca:	4618      	movlt	r0, r3
 80041cc:	e7a6      	b.n	800411c <_printf_i+0x164>
 80041ce:	2301      	movs	r3, #1
 80041d0:	4632      	mov	r2, r6
 80041d2:	4649      	mov	r1, r9
 80041d4:	4640      	mov	r0, r8
 80041d6:	47d0      	blx	sl
 80041d8:	3001      	adds	r0, #1
 80041da:	d09d      	beq.n	8004118 <_printf_i+0x160>
 80041dc:	3501      	adds	r5, #1
 80041de:	68e3      	ldr	r3, [r4, #12]
 80041e0:	9903      	ldr	r1, [sp, #12]
 80041e2:	1a5b      	subs	r3, r3, r1
 80041e4:	42ab      	cmp	r3, r5
 80041e6:	dcf2      	bgt.n	80041ce <_printf_i+0x216>
 80041e8:	e7eb      	b.n	80041c2 <_printf_i+0x20a>
 80041ea:	2500      	movs	r5, #0
 80041ec:	f104 0619 	add.w	r6, r4, #25
 80041f0:	e7f5      	b.n	80041de <_printf_i+0x226>
 80041f2:	bf00      	nop
 80041f4:	080081ca 	.word	0x080081ca
 80041f8:	080081db 	.word	0x080081db

080041fc <_scanf_float>:
 80041fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004200:	b087      	sub	sp, #28
 8004202:	4617      	mov	r7, r2
 8004204:	9303      	str	r3, [sp, #12]
 8004206:	688b      	ldr	r3, [r1, #8]
 8004208:	1e5a      	subs	r2, r3, #1
 800420a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800420e:	bf83      	ittte	hi
 8004210:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004214:	195b      	addhi	r3, r3, r5
 8004216:	9302      	strhi	r3, [sp, #8]
 8004218:	2300      	movls	r3, #0
 800421a:	bf86      	itte	hi
 800421c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004220:	608b      	strhi	r3, [r1, #8]
 8004222:	9302      	strls	r3, [sp, #8]
 8004224:	680b      	ldr	r3, [r1, #0]
 8004226:	468b      	mov	fp, r1
 8004228:	2500      	movs	r5, #0
 800422a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800422e:	f84b 3b1c 	str.w	r3, [fp], #28
 8004232:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004236:	4680      	mov	r8, r0
 8004238:	460c      	mov	r4, r1
 800423a:	465e      	mov	r6, fp
 800423c:	46aa      	mov	sl, r5
 800423e:	46a9      	mov	r9, r5
 8004240:	9501      	str	r5, [sp, #4]
 8004242:	68a2      	ldr	r2, [r4, #8]
 8004244:	b152      	cbz	r2, 800425c <_scanf_float+0x60>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	2b4e      	cmp	r3, #78	; 0x4e
 800424c:	d864      	bhi.n	8004318 <_scanf_float+0x11c>
 800424e:	2b40      	cmp	r3, #64	; 0x40
 8004250:	d83c      	bhi.n	80042cc <_scanf_float+0xd0>
 8004252:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004256:	b2c8      	uxtb	r0, r1
 8004258:	280e      	cmp	r0, #14
 800425a:	d93a      	bls.n	80042d2 <_scanf_float+0xd6>
 800425c:	f1b9 0f00 	cmp.w	r9, #0
 8004260:	d003      	beq.n	800426a <_scanf_float+0x6e>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004268:	6023      	str	r3, [r4, #0]
 800426a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800426e:	f1ba 0f01 	cmp.w	sl, #1
 8004272:	f200 8113 	bhi.w	800449c <_scanf_float+0x2a0>
 8004276:	455e      	cmp	r6, fp
 8004278:	f200 8105 	bhi.w	8004486 <_scanf_float+0x28a>
 800427c:	2501      	movs	r5, #1
 800427e:	4628      	mov	r0, r5
 8004280:	b007      	add	sp, #28
 8004282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004286:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800428a:	2a0d      	cmp	r2, #13
 800428c:	d8e6      	bhi.n	800425c <_scanf_float+0x60>
 800428e:	a101      	add	r1, pc, #4	; (adr r1, 8004294 <_scanf_float+0x98>)
 8004290:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004294:	080043d3 	.word	0x080043d3
 8004298:	0800425d 	.word	0x0800425d
 800429c:	0800425d 	.word	0x0800425d
 80042a0:	0800425d 	.word	0x0800425d
 80042a4:	08004433 	.word	0x08004433
 80042a8:	0800440b 	.word	0x0800440b
 80042ac:	0800425d 	.word	0x0800425d
 80042b0:	0800425d 	.word	0x0800425d
 80042b4:	080043e1 	.word	0x080043e1
 80042b8:	0800425d 	.word	0x0800425d
 80042bc:	0800425d 	.word	0x0800425d
 80042c0:	0800425d 	.word	0x0800425d
 80042c4:	0800425d 	.word	0x0800425d
 80042c8:	08004399 	.word	0x08004399
 80042cc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80042d0:	e7db      	b.n	800428a <_scanf_float+0x8e>
 80042d2:	290e      	cmp	r1, #14
 80042d4:	d8c2      	bhi.n	800425c <_scanf_float+0x60>
 80042d6:	a001      	add	r0, pc, #4	; (adr r0, 80042dc <_scanf_float+0xe0>)
 80042d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80042dc:	0800438b 	.word	0x0800438b
 80042e0:	0800425d 	.word	0x0800425d
 80042e4:	0800438b 	.word	0x0800438b
 80042e8:	0800441f 	.word	0x0800441f
 80042ec:	0800425d 	.word	0x0800425d
 80042f0:	08004339 	.word	0x08004339
 80042f4:	08004375 	.word	0x08004375
 80042f8:	08004375 	.word	0x08004375
 80042fc:	08004375 	.word	0x08004375
 8004300:	08004375 	.word	0x08004375
 8004304:	08004375 	.word	0x08004375
 8004308:	08004375 	.word	0x08004375
 800430c:	08004375 	.word	0x08004375
 8004310:	08004375 	.word	0x08004375
 8004314:	08004375 	.word	0x08004375
 8004318:	2b6e      	cmp	r3, #110	; 0x6e
 800431a:	d809      	bhi.n	8004330 <_scanf_float+0x134>
 800431c:	2b60      	cmp	r3, #96	; 0x60
 800431e:	d8b2      	bhi.n	8004286 <_scanf_float+0x8a>
 8004320:	2b54      	cmp	r3, #84	; 0x54
 8004322:	d077      	beq.n	8004414 <_scanf_float+0x218>
 8004324:	2b59      	cmp	r3, #89	; 0x59
 8004326:	d199      	bne.n	800425c <_scanf_float+0x60>
 8004328:	2d07      	cmp	r5, #7
 800432a:	d197      	bne.n	800425c <_scanf_float+0x60>
 800432c:	2508      	movs	r5, #8
 800432e:	e029      	b.n	8004384 <_scanf_float+0x188>
 8004330:	2b74      	cmp	r3, #116	; 0x74
 8004332:	d06f      	beq.n	8004414 <_scanf_float+0x218>
 8004334:	2b79      	cmp	r3, #121	; 0x79
 8004336:	e7f6      	b.n	8004326 <_scanf_float+0x12a>
 8004338:	6821      	ldr	r1, [r4, #0]
 800433a:	05c8      	lsls	r0, r1, #23
 800433c:	d51a      	bpl.n	8004374 <_scanf_float+0x178>
 800433e:	9b02      	ldr	r3, [sp, #8]
 8004340:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004344:	6021      	str	r1, [r4, #0]
 8004346:	f109 0901 	add.w	r9, r9, #1
 800434a:	b11b      	cbz	r3, 8004354 <_scanf_float+0x158>
 800434c:	3b01      	subs	r3, #1
 800434e:	3201      	adds	r2, #1
 8004350:	9302      	str	r3, [sp, #8]
 8004352:	60a2      	str	r2, [r4, #8]
 8004354:	68a3      	ldr	r3, [r4, #8]
 8004356:	3b01      	subs	r3, #1
 8004358:	60a3      	str	r3, [r4, #8]
 800435a:	6923      	ldr	r3, [r4, #16]
 800435c:	3301      	adds	r3, #1
 800435e:	6123      	str	r3, [r4, #16]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3b01      	subs	r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	607b      	str	r3, [r7, #4]
 8004368:	f340 8084 	ble.w	8004474 <_scanf_float+0x278>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	3301      	adds	r3, #1
 8004370:	603b      	str	r3, [r7, #0]
 8004372:	e766      	b.n	8004242 <_scanf_float+0x46>
 8004374:	eb1a 0f05 	cmn.w	sl, r5
 8004378:	f47f af70 	bne.w	800425c <_scanf_float+0x60>
 800437c:	6822      	ldr	r2, [r4, #0]
 800437e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004382:	6022      	str	r2, [r4, #0]
 8004384:	f806 3b01 	strb.w	r3, [r6], #1
 8004388:	e7e4      	b.n	8004354 <_scanf_float+0x158>
 800438a:	6822      	ldr	r2, [r4, #0]
 800438c:	0610      	lsls	r0, r2, #24
 800438e:	f57f af65 	bpl.w	800425c <_scanf_float+0x60>
 8004392:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004396:	e7f4      	b.n	8004382 <_scanf_float+0x186>
 8004398:	f1ba 0f00 	cmp.w	sl, #0
 800439c:	d10e      	bne.n	80043bc <_scanf_float+0x1c0>
 800439e:	f1b9 0f00 	cmp.w	r9, #0
 80043a2:	d10e      	bne.n	80043c2 <_scanf_float+0x1c6>
 80043a4:	6822      	ldr	r2, [r4, #0]
 80043a6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80043aa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80043ae:	d108      	bne.n	80043c2 <_scanf_float+0x1c6>
 80043b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80043b4:	6022      	str	r2, [r4, #0]
 80043b6:	f04f 0a01 	mov.w	sl, #1
 80043ba:	e7e3      	b.n	8004384 <_scanf_float+0x188>
 80043bc:	f1ba 0f02 	cmp.w	sl, #2
 80043c0:	d055      	beq.n	800446e <_scanf_float+0x272>
 80043c2:	2d01      	cmp	r5, #1
 80043c4:	d002      	beq.n	80043cc <_scanf_float+0x1d0>
 80043c6:	2d04      	cmp	r5, #4
 80043c8:	f47f af48 	bne.w	800425c <_scanf_float+0x60>
 80043cc:	3501      	adds	r5, #1
 80043ce:	b2ed      	uxtb	r5, r5
 80043d0:	e7d8      	b.n	8004384 <_scanf_float+0x188>
 80043d2:	f1ba 0f01 	cmp.w	sl, #1
 80043d6:	f47f af41 	bne.w	800425c <_scanf_float+0x60>
 80043da:	f04f 0a02 	mov.w	sl, #2
 80043de:	e7d1      	b.n	8004384 <_scanf_float+0x188>
 80043e0:	b97d      	cbnz	r5, 8004402 <_scanf_float+0x206>
 80043e2:	f1b9 0f00 	cmp.w	r9, #0
 80043e6:	f47f af3c 	bne.w	8004262 <_scanf_float+0x66>
 80043ea:	6822      	ldr	r2, [r4, #0]
 80043ec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80043f0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80043f4:	f47f af39 	bne.w	800426a <_scanf_float+0x6e>
 80043f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80043fc:	6022      	str	r2, [r4, #0]
 80043fe:	2501      	movs	r5, #1
 8004400:	e7c0      	b.n	8004384 <_scanf_float+0x188>
 8004402:	2d03      	cmp	r5, #3
 8004404:	d0e2      	beq.n	80043cc <_scanf_float+0x1d0>
 8004406:	2d05      	cmp	r5, #5
 8004408:	e7de      	b.n	80043c8 <_scanf_float+0x1cc>
 800440a:	2d02      	cmp	r5, #2
 800440c:	f47f af26 	bne.w	800425c <_scanf_float+0x60>
 8004410:	2503      	movs	r5, #3
 8004412:	e7b7      	b.n	8004384 <_scanf_float+0x188>
 8004414:	2d06      	cmp	r5, #6
 8004416:	f47f af21 	bne.w	800425c <_scanf_float+0x60>
 800441a:	2507      	movs	r5, #7
 800441c:	e7b2      	b.n	8004384 <_scanf_float+0x188>
 800441e:	6822      	ldr	r2, [r4, #0]
 8004420:	0591      	lsls	r1, r2, #22
 8004422:	f57f af1b 	bpl.w	800425c <_scanf_float+0x60>
 8004426:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800442a:	6022      	str	r2, [r4, #0]
 800442c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004430:	e7a8      	b.n	8004384 <_scanf_float+0x188>
 8004432:	6822      	ldr	r2, [r4, #0]
 8004434:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004438:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800443c:	d006      	beq.n	800444c <_scanf_float+0x250>
 800443e:	0550      	lsls	r0, r2, #21
 8004440:	f57f af0c 	bpl.w	800425c <_scanf_float+0x60>
 8004444:	f1b9 0f00 	cmp.w	r9, #0
 8004448:	f43f af0f 	beq.w	800426a <_scanf_float+0x6e>
 800444c:	0591      	lsls	r1, r2, #22
 800444e:	bf58      	it	pl
 8004450:	9901      	ldrpl	r1, [sp, #4]
 8004452:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004456:	bf58      	it	pl
 8004458:	eba9 0101 	subpl.w	r1, r9, r1
 800445c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004460:	bf58      	it	pl
 8004462:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004466:	6022      	str	r2, [r4, #0]
 8004468:	f04f 0900 	mov.w	r9, #0
 800446c:	e78a      	b.n	8004384 <_scanf_float+0x188>
 800446e:	f04f 0a03 	mov.w	sl, #3
 8004472:	e787      	b.n	8004384 <_scanf_float+0x188>
 8004474:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004478:	4639      	mov	r1, r7
 800447a:	4640      	mov	r0, r8
 800447c:	4798      	blx	r3
 800447e:	2800      	cmp	r0, #0
 8004480:	f43f aedf 	beq.w	8004242 <_scanf_float+0x46>
 8004484:	e6ea      	b.n	800425c <_scanf_float+0x60>
 8004486:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800448a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800448e:	463a      	mov	r2, r7
 8004490:	4640      	mov	r0, r8
 8004492:	4798      	blx	r3
 8004494:	6923      	ldr	r3, [r4, #16]
 8004496:	3b01      	subs	r3, #1
 8004498:	6123      	str	r3, [r4, #16]
 800449a:	e6ec      	b.n	8004276 <_scanf_float+0x7a>
 800449c:	1e6b      	subs	r3, r5, #1
 800449e:	2b06      	cmp	r3, #6
 80044a0:	d825      	bhi.n	80044ee <_scanf_float+0x2f2>
 80044a2:	2d02      	cmp	r5, #2
 80044a4:	d836      	bhi.n	8004514 <_scanf_float+0x318>
 80044a6:	455e      	cmp	r6, fp
 80044a8:	f67f aee8 	bls.w	800427c <_scanf_float+0x80>
 80044ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80044b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80044b4:	463a      	mov	r2, r7
 80044b6:	4640      	mov	r0, r8
 80044b8:	4798      	blx	r3
 80044ba:	6923      	ldr	r3, [r4, #16]
 80044bc:	3b01      	subs	r3, #1
 80044be:	6123      	str	r3, [r4, #16]
 80044c0:	e7f1      	b.n	80044a6 <_scanf_float+0x2aa>
 80044c2:	9802      	ldr	r0, [sp, #8]
 80044c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80044c8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80044cc:	9002      	str	r0, [sp, #8]
 80044ce:	463a      	mov	r2, r7
 80044d0:	4640      	mov	r0, r8
 80044d2:	4798      	blx	r3
 80044d4:	6923      	ldr	r3, [r4, #16]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	6123      	str	r3, [r4, #16]
 80044da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80044de:	fa5f fa8a 	uxtb.w	sl, sl
 80044e2:	f1ba 0f02 	cmp.w	sl, #2
 80044e6:	d1ec      	bne.n	80044c2 <_scanf_float+0x2c6>
 80044e8:	3d03      	subs	r5, #3
 80044ea:	b2ed      	uxtb	r5, r5
 80044ec:	1b76      	subs	r6, r6, r5
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	05da      	lsls	r2, r3, #23
 80044f2:	d52f      	bpl.n	8004554 <_scanf_float+0x358>
 80044f4:	055b      	lsls	r3, r3, #21
 80044f6:	d510      	bpl.n	800451a <_scanf_float+0x31e>
 80044f8:	455e      	cmp	r6, fp
 80044fa:	f67f aebf 	bls.w	800427c <_scanf_float+0x80>
 80044fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004502:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004506:	463a      	mov	r2, r7
 8004508:	4640      	mov	r0, r8
 800450a:	4798      	blx	r3
 800450c:	6923      	ldr	r3, [r4, #16]
 800450e:	3b01      	subs	r3, #1
 8004510:	6123      	str	r3, [r4, #16]
 8004512:	e7f1      	b.n	80044f8 <_scanf_float+0x2fc>
 8004514:	46aa      	mov	sl, r5
 8004516:	9602      	str	r6, [sp, #8]
 8004518:	e7df      	b.n	80044da <_scanf_float+0x2de>
 800451a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800451e:	6923      	ldr	r3, [r4, #16]
 8004520:	2965      	cmp	r1, #101	; 0x65
 8004522:	f103 33ff 	add.w	r3, r3, #4294967295
 8004526:	f106 35ff 	add.w	r5, r6, #4294967295
 800452a:	6123      	str	r3, [r4, #16]
 800452c:	d00c      	beq.n	8004548 <_scanf_float+0x34c>
 800452e:	2945      	cmp	r1, #69	; 0x45
 8004530:	d00a      	beq.n	8004548 <_scanf_float+0x34c>
 8004532:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004536:	463a      	mov	r2, r7
 8004538:	4640      	mov	r0, r8
 800453a:	4798      	blx	r3
 800453c:	6923      	ldr	r3, [r4, #16]
 800453e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004542:	3b01      	subs	r3, #1
 8004544:	1eb5      	subs	r5, r6, #2
 8004546:	6123      	str	r3, [r4, #16]
 8004548:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800454c:	463a      	mov	r2, r7
 800454e:	4640      	mov	r0, r8
 8004550:	4798      	blx	r3
 8004552:	462e      	mov	r6, r5
 8004554:	6825      	ldr	r5, [r4, #0]
 8004556:	f015 0510 	ands.w	r5, r5, #16
 800455a:	d155      	bne.n	8004608 <_scanf_float+0x40c>
 800455c:	7035      	strb	r5, [r6, #0]
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004568:	d11d      	bne.n	80045a6 <_scanf_float+0x3aa>
 800456a:	9b01      	ldr	r3, [sp, #4]
 800456c:	454b      	cmp	r3, r9
 800456e:	eba3 0209 	sub.w	r2, r3, r9
 8004572:	d125      	bne.n	80045c0 <_scanf_float+0x3c4>
 8004574:	2200      	movs	r2, #0
 8004576:	4659      	mov	r1, fp
 8004578:	4640      	mov	r0, r8
 800457a:	f002 fd09 	bl	8006f90 <_strtod_r>
 800457e:	9b03      	ldr	r3, [sp, #12]
 8004580:	f8d4 c000 	ldr.w	ip, [r4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f01c 0f02 	tst.w	ip, #2
 800458a:	4606      	mov	r6, r0
 800458c:	460f      	mov	r7, r1
 800458e:	f103 0204 	add.w	r2, r3, #4
 8004592:	d020      	beq.n	80045d6 <_scanf_float+0x3da>
 8004594:	9903      	ldr	r1, [sp, #12]
 8004596:	600a      	str	r2, [r1, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	e9c3 6700 	strd	r6, r7, [r3]
 800459e:	68e3      	ldr	r3, [r4, #12]
 80045a0:	3301      	adds	r3, #1
 80045a2:	60e3      	str	r3, [r4, #12]
 80045a4:	e66b      	b.n	800427e <_scanf_float+0x82>
 80045a6:	9b04      	ldr	r3, [sp, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0e3      	beq.n	8004574 <_scanf_float+0x378>
 80045ac:	9905      	ldr	r1, [sp, #20]
 80045ae:	230a      	movs	r3, #10
 80045b0:	462a      	mov	r2, r5
 80045b2:	3101      	adds	r1, #1
 80045b4:	4640      	mov	r0, r8
 80045b6:	f002 fd6f 	bl	8007098 <_strtol_r>
 80045ba:	9b04      	ldr	r3, [sp, #16]
 80045bc:	9e05      	ldr	r6, [sp, #20]
 80045be:	1ac2      	subs	r2, r0, r3
 80045c0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80045c4:	429e      	cmp	r6, r3
 80045c6:	bf28      	it	cs
 80045c8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80045cc:	490f      	ldr	r1, [pc, #60]	; (800460c <_scanf_float+0x410>)
 80045ce:	4630      	mov	r0, r6
 80045d0:	f000 f950 	bl	8004874 <siprintf>
 80045d4:	e7ce      	b.n	8004574 <_scanf_float+0x378>
 80045d6:	f01c 0f04 	tst.w	ip, #4
 80045da:	d1db      	bne.n	8004594 <_scanf_float+0x398>
 80045dc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80045e0:	f8cc 2000 	str.w	r2, [ip]
 80045e4:	f8d3 8000 	ldr.w	r8, [r3]
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	f7fc fa9e 	bl	8000b2c <__aeabi_dcmpun>
 80045f0:	b128      	cbz	r0, 80045fe <_scanf_float+0x402>
 80045f2:	4807      	ldr	r0, [pc, #28]	; (8004610 <_scanf_float+0x414>)
 80045f4:	f000 fab6 	bl	8004b64 <nanf>
 80045f8:	f8c8 0000 	str.w	r0, [r8]
 80045fc:	e7cf      	b.n	800459e <_scanf_float+0x3a2>
 80045fe:	4630      	mov	r0, r6
 8004600:	4639      	mov	r1, r7
 8004602:	f7fc faf1 	bl	8000be8 <__aeabi_d2f>
 8004606:	e7f7      	b.n	80045f8 <_scanf_float+0x3fc>
 8004608:	2500      	movs	r5, #0
 800460a:	e638      	b.n	800427e <_scanf_float+0x82>
 800460c:	080081ec 	.word	0x080081ec
 8004610:	0800857d 	.word	0x0800857d

08004614 <std>:
 8004614:	2300      	movs	r3, #0
 8004616:	b510      	push	{r4, lr}
 8004618:	4604      	mov	r4, r0
 800461a:	e9c0 3300 	strd	r3, r3, [r0]
 800461e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004622:	6083      	str	r3, [r0, #8]
 8004624:	8181      	strh	r1, [r0, #12]
 8004626:	6643      	str	r3, [r0, #100]	; 0x64
 8004628:	81c2      	strh	r2, [r0, #14]
 800462a:	6183      	str	r3, [r0, #24]
 800462c:	4619      	mov	r1, r3
 800462e:	2208      	movs	r2, #8
 8004630:	305c      	adds	r0, #92	; 0x5c
 8004632:	f000 fa17 	bl	8004a64 <memset>
 8004636:	4b0d      	ldr	r3, [pc, #52]	; (800466c <std+0x58>)
 8004638:	6263      	str	r3, [r4, #36]	; 0x24
 800463a:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <std+0x5c>)
 800463c:	62a3      	str	r3, [r4, #40]	; 0x28
 800463e:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <std+0x60>)
 8004640:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004642:	4b0d      	ldr	r3, [pc, #52]	; (8004678 <std+0x64>)
 8004644:	6323      	str	r3, [r4, #48]	; 0x30
 8004646:	4b0d      	ldr	r3, [pc, #52]	; (800467c <std+0x68>)
 8004648:	6224      	str	r4, [r4, #32]
 800464a:	429c      	cmp	r4, r3
 800464c:	d006      	beq.n	800465c <std+0x48>
 800464e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004652:	4294      	cmp	r4, r2
 8004654:	d002      	beq.n	800465c <std+0x48>
 8004656:	33d0      	adds	r3, #208	; 0xd0
 8004658:	429c      	cmp	r4, r3
 800465a:	d105      	bne.n	8004668 <std+0x54>
 800465c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004664:	f000 ba7a 	b.w	8004b5c <__retarget_lock_init_recursive>
 8004668:	bd10      	pop	{r4, pc}
 800466a:	bf00      	nop
 800466c:	080048b5 	.word	0x080048b5
 8004670:	080048d7 	.word	0x080048d7
 8004674:	0800490f 	.word	0x0800490f
 8004678:	08004933 	.word	0x08004933
 800467c:	2000028c 	.word	0x2000028c

08004680 <stdio_exit_handler>:
 8004680:	4a02      	ldr	r2, [pc, #8]	; (800468c <stdio_exit_handler+0xc>)
 8004682:	4903      	ldr	r1, [pc, #12]	; (8004690 <stdio_exit_handler+0x10>)
 8004684:	4803      	ldr	r0, [pc, #12]	; (8004694 <stdio_exit_handler+0x14>)
 8004686:	f000 b869 	b.w	800475c <_fwalk_sglue>
 800468a:	bf00      	nop
 800468c:	2000000c 	.word	0x2000000c
 8004690:	080076d5 	.word	0x080076d5
 8004694:	20000018 	.word	0x20000018

08004698 <cleanup_stdio>:
 8004698:	6841      	ldr	r1, [r0, #4]
 800469a:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <cleanup_stdio+0x34>)
 800469c:	4299      	cmp	r1, r3
 800469e:	b510      	push	{r4, lr}
 80046a0:	4604      	mov	r4, r0
 80046a2:	d001      	beq.n	80046a8 <cleanup_stdio+0x10>
 80046a4:	f003 f816 	bl	80076d4 <_fflush_r>
 80046a8:	68a1      	ldr	r1, [r4, #8]
 80046aa:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <cleanup_stdio+0x38>)
 80046ac:	4299      	cmp	r1, r3
 80046ae:	d002      	beq.n	80046b6 <cleanup_stdio+0x1e>
 80046b0:	4620      	mov	r0, r4
 80046b2:	f003 f80f 	bl	80076d4 <_fflush_r>
 80046b6:	68e1      	ldr	r1, [r4, #12]
 80046b8:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <cleanup_stdio+0x3c>)
 80046ba:	4299      	cmp	r1, r3
 80046bc:	d004      	beq.n	80046c8 <cleanup_stdio+0x30>
 80046be:	4620      	mov	r0, r4
 80046c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046c4:	f003 b806 	b.w	80076d4 <_fflush_r>
 80046c8:	bd10      	pop	{r4, pc}
 80046ca:	bf00      	nop
 80046cc:	2000028c 	.word	0x2000028c
 80046d0:	200002f4 	.word	0x200002f4
 80046d4:	2000035c 	.word	0x2000035c

080046d8 <global_stdio_init.part.0>:
 80046d8:	b510      	push	{r4, lr}
 80046da:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <global_stdio_init.part.0+0x30>)
 80046dc:	4c0b      	ldr	r4, [pc, #44]	; (800470c <global_stdio_init.part.0+0x34>)
 80046de:	4a0c      	ldr	r2, [pc, #48]	; (8004710 <global_stdio_init.part.0+0x38>)
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	4620      	mov	r0, r4
 80046e4:	2200      	movs	r2, #0
 80046e6:	2104      	movs	r1, #4
 80046e8:	f7ff ff94 	bl	8004614 <std>
 80046ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80046f0:	2201      	movs	r2, #1
 80046f2:	2109      	movs	r1, #9
 80046f4:	f7ff ff8e 	bl	8004614 <std>
 80046f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80046fc:	2202      	movs	r2, #2
 80046fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004702:	2112      	movs	r1, #18
 8004704:	f7ff bf86 	b.w	8004614 <std>
 8004708:	200003c4 	.word	0x200003c4
 800470c:	2000028c 	.word	0x2000028c
 8004710:	08004681 	.word	0x08004681

08004714 <__sfp_lock_acquire>:
 8004714:	4801      	ldr	r0, [pc, #4]	; (800471c <__sfp_lock_acquire+0x8>)
 8004716:	f000 ba22 	b.w	8004b5e <__retarget_lock_acquire_recursive>
 800471a:	bf00      	nop
 800471c:	200003cd 	.word	0x200003cd

08004720 <__sfp_lock_release>:
 8004720:	4801      	ldr	r0, [pc, #4]	; (8004728 <__sfp_lock_release+0x8>)
 8004722:	f000 ba1d 	b.w	8004b60 <__retarget_lock_release_recursive>
 8004726:	bf00      	nop
 8004728:	200003cd 	.word	0x200003cd

0800472c <__sinit>:
 800472c:	b510      	push	{r4, lr}
 800472e:	4604      	mov	r4, r0
 8004730:	f7ff fff0 	bl	8004714 <__sfp_lock_acquire>
 8004734:	6a23      	ldr	r3, [r4, #32]
 8004736:	b11b      	cbz	r3, 8004740 <__sinit+0x14>
 8004738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800473c:	f7ff bff0 	b.w	8004720 <__sfp_lock_release>
 8004740:	4b04      	ldr	r3, [pc, #16]	; (8004754 <__sinit+0x28>)
 8004742:	6223      	str	r3, [r4, #32]
 8004744:	4b04      	ldr	r3, [pc, #16]	; (8004758 <__sinit+0x2c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1f5      	bne.n	8004738 <__sinit+0xc>
 800474c:	f7ff ffc4 	bl	80046d8 <global_stdio_init.part.0>
 8004750:	e7f2      	b.n	8004738 <__sinit+0xc>
 8004752:	bf00      	nop
 8004754:	08004699 	.word	0x08004699
 8004758:	200003c4 	.word	0x200003c4

0800475c <_fwalk_sglue>:
 800475c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004760:	4607      	mov	r7, r0
 8004762:	4688      	mov	r8, r1
 8004764:	4614      	mov	r4, r2
 8004766:	2600      	movs	r6, #0
 8004768:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800476c:	f1b9 0901 	subs.w	r9, r9, #1
 8004770:	d505      	bpl.n	800477e <_fwalk_sglue+0x22>
 8004772:	6824      	ldr	r4, [r4, #0]
 8004774:	2c00      	cmp	r4, #0
 8004776:	d1f7      	bne.n	8004768 <_fwalk_sglue+0xc>
 8004778:	4630      	mov	r0, r6
 800477a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800477e:	89ab      	ldrh	r3, [r5, #12]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d907      	bls.n	8004794 <_fwalk_sglue+0x38>
 8004784:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004788:	3301      	adds	r3, #1
 800478a:	d003      	beq.n	8004794 <_fwalk_sglue+0x38>
 800478c:	4629      	mov	r1, r5
 800478e:	4638      	mov	r0, r7
 8004790:	47c0      	blx	r8
 8004792:	4306      	orrs	r6, r0
 8004794:	3568      	adds	r5, #104	; 0x68
 8004796:	e7e9      	b.n	800476c <_fwalk_sglue+0x10>

08004798 <iprintf>:
 8004798:	b40f      	push	{r0, r1, r2, r3}
 800479a:	b507      	push	{r0, r1, r2, lr}
 800479c:	4906      	ldr	r1, [pc, #24]	; (80047b8 <iprintf+0x20>)
 800479e:	ab04      	add	r3, sp, #16
 80047a0:	6808      	ldr	r0, [r1, #0]
 80047a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80047a6:	6881      	ldr	r1, [r0, #8]
 80047a8:	9301      	str	r3, [sp, #4]
 80047aa:	f002 fdf7 	bl	800739c <_vfiprintf_r>
 80047ae:	b003      	add	sp, #12
 80047b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80047b4:	b004      	add	sp, #16
 80047b6:	4770      	bx	lr
 80047b8:	20000064 	.word	0x20000064

080047bc <_puts_r>:
 80047bc:	6a03      	ldr	r3, [r0, #32]
 80047be:	b570      	push	{r4, r5, r6, lr}
 80047c0:	6884      	ldr	r4, [r0, #8]
 80047c2:	4605      	mov	r5, r0
 80047c4:	460e      	mov	r6, r1
 80047c6:	b90b      	cbnz	r3, 80047cc <_puts_r+0x10>
 80047c8:	f7ff ffb0 	bl	800472c <__sinit>
 80047cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047ce:	07db      	lsls	r3, r3, #31
 80047d0:	d405      	bmi.n	80047de <_puts_r+0x22>
 80047d2:	89a3      	ldrh	r3, [r4, #12]
 80047d4:	0598      	lsls	r0, r3, #22
 80047d6:	d402      	bmi.n	80047de <_puts_r+0x22>
 80047d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047da:	f000 f9c0 	bl	8004b5e <__retarget_lock_acquire_recursive>
 80047de:	89a3      	ldrh	r3, [r4, #12]
 80047e0:	0719      	lsls	r1, r3, #28
 80047e2:	d513      	bpl.n	800480c <_puts_r+0x50>
 80047e4:	6923      	ldr	r3, [r4, #16]
 80047e6:	b18b      	cbz	r3, 800480c <_puts_r+0x50>
 80047e8:	3e01      	subs	r6, #1
 80047ea:	68a3      	ldr	r3, [r4, #8]
 80047ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047f0:	3b01      	subs	r3, #1
 80047f2:	60a3      	str	r3, [r4, #8]
 80047f4:	b9e9      	cbnz	r1, 8004832 <_puts_r+0x76>
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	da2e      	bge.n	8004858 <_puts_r+0x9c>
 80047fa:	4622      	mov	r2, r4
 80047fc:	210a      	movs	r1, #10
 80047fe:	4628      	mov	r0, r5
 8004800:	f000 f89b 	bl	800493a <__swbuf_r>
 8004804:	3001      	adds	r0, #1
 8004806:	d007      	beq.n	8004818 <_puts_r+0x5c>
 8004808:	250a      	movs	r5, #10
 800480a:	e007      	b.n	800481c <_puts_r+0x60>
 800480c:	4621      	mov	r1, r4
 800480e:	4628      	mov	r0, r5
 8004810:	f000 f8d0 	bl	80049b4 <__swsetup_r>
 8004814:	2800      	cmp	r0, #0
 8004816:	d0e7      	beq.n	80047e8 <_puts_r+0x2c>
 8004818:	f04f 35ff 	mov.w	r5, #4294967295
 800481c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800481e:	07da      	lsls	r2, r3, #31
 8004820:	d405      	bmi.n	800482e <_puts_r+0x72>
 8004822:	89a3      	ldrh	r3, [r4, #12]
 8004824:	059b      	lsls	r3, r3, #22
 8004826:	d402      	bmi.n	800482e <_puts_r+0x72>
 8004828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800482a:	f000 f999 	bl	8004b60 <__retarget_lock_release_recursive>
 800482e:	4628      	mov	r0, r5
 8004830:	bd70      	pop	{r4, r5, r6, pc}
 8004832:	2b00      	cmp	r3, #0
 8004834:	da04      	bge.n	8004840 <_puts_r+0x84>
 8004836:	69a2      	ldr	r2, [r4, #24]
 8004838:	429a      	cmp	r2, r3
 800483a:	dc06      	bgt.n	800484a <_puts_r+0x8e>
 800483c:	290a      	cmp	r1, #10
 800483e:	d004      	beq.n	800484a <_puts_r+0x8e>
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	6022      	str	r2, [r4, #0]
 8004846:	7019      	strb	r1, [r3, #0]
 8004848:	e7cf      	b.n	80047ea <_puts_r+0x2e>
 800484a:	4622      	mov	r2, r4
 800484c:	4628      	mov	r0, r5
 800484e:	f000 f874 	bl	800493a <__swbuf_r>
 8004852:	3001      	adds	r0, #1
 8004854:	d1c9      	bne.n	80047ea <_puts_r+0x2e>
 8004856:	e7df      	b.n	8004818 <_puts_r+0x5c>
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	250a      	movs	r5, #10
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	6022      	str	r2, [r4, #0]
 8004860:	701d      	strb	r5, [r3, #0]
 8004862:	e7db      	b.n	800481c <_puts_r+0x60>

08004864 <puts>:
 8004864:	4b02      	ldr	r3, [pc, #8]	; (8004870 <puts+0xc>)
 8004866:	4601      	mov	r1, r0
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	f7ff bfa7 	b.w	80047bc <_puts_r>
 800486e:	bf00      	nop
 8004870:	20000064 	.word	0x20000064

08004874 <siprintf>:
 8004874:	b40e      	push	{r1, r2, r3}
 8004876:	b500      	push	{lr}
 8004878:	b09c      	sub	sp, #112	; 0x70
 800487a:	ab1d      	add	r3, sp, #116	; 0x74
 800487c:	9002      	str	r0, [sp, #8]
 800487e:	9006      	str	r0, [sp, #24]
 8004880:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004884:	4809      	ldr	r0, [pc, #36]	; (80048ac <siprintf+0x38>)
 8004886:	9107      	str	r1, [sp, #28]
 8004888:	9104      	str	r1, [sp, #16]
 800488a:	4909      	ldr	r1, [pc, #36]	; (80048b0 <siprintf+0x3c>)
 800488c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004890:	9105      	str	r1, [sp, #20]
 8004892:	6800      	ldr	r0, [r0, #0]
 8004894:	9301      	str	r3, [sp, #4]
 8004896:	a902      	add	r1, sp, #8
 8004898:	f002 fc5a 	bl	8007150 <_svfiprintf_r>
 800489c:	9b02      	ldr	r3, [sp, #8]
 800489e:	2200      	movs	r2, #0
 80048a0:	701a      	strb	r2, [r3, #0]
 80048a2:	b01c      	add	sp, #112	; 0x70
 80048a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80048a8:	b003      	add	sp, #12
 80048aa:	4770      	bx	lr
 80048ac:	20000064 	.word	0x20000064
 80048b0:	ffff0208 	.word	0xffff0208

080048b4 <__sread>:
 80048b4:	b510      	push	{r4, lr}
 80048b6:	460c      	mov	r4, r1
 80048b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048bc:	f000 f900 	bl	8004ac0 <_read_r>
 80048c0:	2800      	cmp	r0, #0
 80048c2:	bfab      	itete	ge
 80048c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048c6:	89a3      	ldrhlt	r3, [r4, #12]
 80048c8:	181b      	addge	r3, r3, r0
 80048ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048ce:	bfac      	ite	ge
 80048d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80048d2:	81a3      	strhlt	r3, [r4, #12]
 80048d4:	bd10      	pop	{r4, pc}

080048d6 <__swrite>:
 80048d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048da:	461f      	mov	r7, r3
 80048dc:	898b      	ldrh	r3, [r1, #12]
 80048de:	05db      	lsls	r3, r3, #23
 80048e0:	4605      	mov	r5, r0
 80048e2:	460c      	mov	r4, r1
 80048e4:	4616      	mov	r6, r2
 80048e6:	d505      	bpl.n	80048f4 <__swrite+0x1e>
 80048e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ec:	2302      	movs	r3, #2
 80048ee:	2200      	movs	r2, #0
 80048f0:	f000 f8d4 	bl	8004a9c <_lseek_r>
 80048f4:	89a3      	ldrh	r3, [r4, #12]
 80048f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048fe:	81a3      	strh	r3, [r4, #12]
 8004900:	4632      	mov	r2, r6
 8004902:	463b      	mov	r3, r7
 8004904:	4628      	mov	r0, r5
 8004906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800490a:	f000 b8eb 	b.w	8004ae4 <_write_r>

0800490e <__sseek>:
 800490e:	b510      	push	{r4, lr}
 8004910:	460c      	mov	r4, r1
 8004912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004916:	f000 f8c1 	bl	8004a9c <_lseek_r>
 800491a:	1c43      	adds	r3, r0, #1
 800491c:	89a3      	ldrh	r3, [r4, #12]
 800491e:	bf15      	itete	ne
 8004920:	6560      	strne	r0, [r4, #84]	; 0x54
 8004922:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004926:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800492a:	81a3      	strheq	r3, [r4, #12]
 800492c:	bf18      	it	ne
 800492e:	81a3      	strhne	r3, [r4, #12]
 8004930:	bd10      	pop	{r4, pc}

08004932 <__sclose>:
 8004932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004936:	f000 b8a1 	b.w	8004a7c <_close_r>

0800493a <__swbuf_r>:
 800493a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493c:	460e      	mov	r6, r1
 800493e:	4614      	mov	r4, r2
 8004940:	4605      	mov	r5, r0
 8004942:	b118      	cbz	r0, 800494c <__swbuf_r+0x12>
 8004944:	6a03      	ldr	r3, [r0, #32]
 8004946:	b90b      	cbnz	r3, 800494c <__swbuf_r+0x12>
 8004948:	f7ff fef0 	bl	800472c <__sinit>
 800494c:	69a3      	ldr	r3, [r4, #24]
 800494e:	60a3      	str	r3, [r4, #8]
 8004950:	89a3      	ldrh	r3, [r4, #12]
 8004952:	071a      	lsls	r2, r3, #28
 8004954:	d525      	bpl.n	80049a2 <__swbuf_r+0x68>
 8004956:	6923      	ldr	r3, [r4, #16]
 8004958:	b31b      	cbz	r3, 80049a2 <__swbuf_r+0x68>
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	6922      	ldr	r2, [r4, #16]
 800495e:	1a98      	subs	r0, r3, r2
 8004960:	6963      	ldr	r3, [r4, #20]
 8004962:	b2f6      	uxtb	r6, r6
 8004964:	4283      	cmp	r3, r0
 8004966:	4637      	mov	r7, r6
 8004968:	dc04      	bgt.n	8004974 <__swbuf_r+0x3a>
 800496a:	4621      	mov	r1, r4
 800496c:	4628      	mov	r0, r5
 800496e:	f002 feb1 	bl	80076d4 <_fflush_r>
 8004972:	b9e0      	cbnz	r0, 80049ae <__swbuf_r+0x74>
 8004974:	68a3      	ldr	r3, [r4, #8]
 8004976:	3b01      	subs	r3, #1
 8004978:	60a3      	str	r3, [r4, #8]
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	6022      	str	r2, [r4, #0]
 8004980:	701e      	strb	r6, [r3, #0]
 8004982:	6962      	ldr	r2, [r4, #20]
 8004984:	1c43      	adds	r3, r0, #1
 8004986:	429a      	cmp	r2, r3
 8004988:	d004      	beq.n	8004994 <__swbuf_r+0x5a>
 800498a:	89a3      	ldrh	r3, [r4, #12]
 800498c:	07db      	lsls	r3, r3, #31
 800498e:	d506      	bpl.n	800499e <__swbuf_r+0x64>
 8004990:	2e0a      	cmp	r6, #10
 8004992:	d104      	bne.n	800499e <__swbuf_r+0x64>
 8004994:	4621      	mov	r1, r4
 8004996:	4628      	mov	r0, r5
 8004998:	f002 fe9c 	bl	80076d4 <_fflush_r>
 800499c:	b938      	cbnz	r0, 80049ae <__swbuf_r+0x74>
 800499e:	4638      	mov	r0, r7
 80049a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049a2:	4621      	mov	r1, r4
 80049a4:	4628      	mov	r0, r5
 80049a6:	f000 f805 	bl	80049b4 <__swsetup_r>
 80049aa:	2800      	cmp	r0, #0
 80049ac:	d0d5      	beq.n	800495a <__swbuf_r+0x20>
 80049ae:	f04f 37ff 	mov.w	r7, #4294967295
 80049b2:	e7f4      	b.n	800499e <__swbuf_r+0x64>

080049b4 <__swsetup_r>:
 80049b4:	b538      	push	{r3, r4, r5, lr}
 80049b6:	4b2a      	ldr	r3, [pc, #168]	; (8004a60 <__swsetup_r+0xac>)
 80049b8:	4605      	mov	r5, r0
 80049ba:	6818      	ldr	r0, [r3, #0]
 80049bc:	460c      	mov	r4, r1
 80049be:	b118      	cbz	r0, 80049c8 <__swsetup_r+0x14>
 80049c0:	6a03      	ldr	r3, [r0, #32]
 80049c2:	b90b      	cbnz	r3, 80049c8 <__swsetup_r+0x14>
 80049c4:	f7ff feb2 	bl	800472c <__sinit>
 80049c8:	89a3      	ldrh	r3, [r4, #12]
 80049ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049ce:	0718      	lsls	r0, r3, #28
 80049d0:	d422      	bmi.n	8004a18 <__swsetup_r+0x64>
 80049d2:	06d9      	lsls	r1, r3, #27
 80049d4:	d407      	bmi.n	80049e6 <__swsetup_r+0x32>
 80049d6:	2309      	movs	r3, #9
 80049d8:	602b      	str	r3, [r5, #0]
 80049da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80049de:	81a3      	strh	r3, [r4, #12]
 80049e0:	f04f 30ff 	mov.w	r0, #4294967295
 80049e4:	e034      	b.n	8004a50 <__swsetup_r+0x9c>
 80049e6:	0758      	lsls	r0, r3, #29
 80049e8:	d512      	bpl.n	8004a10 <__swsetup_r+0x5c>
 80049ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049ec:	b141      	cbz	r1, 8004a00 <__swsetup_r+0x4c>
 80049ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049f2:	4299      	cmp	r1, r3
 80049f4:	d002      	beq.n	80049fc <__swsetup_r+0x48>
 80049f6:	4628      	mov	r0, r5
 80049f8:	f000 ff1e 	bl	8005838 <_free_r>
 80049fc:	2300      	movs	r3, #0
 80049fe:	6363      	str	r3, [r4, #52]	; 0x34
 8004a00:	89a3      	ldrh	r3, [r4, #12]
 8004a02:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a06:	81a3      	strh	r3, [r4, #12]
 8004a08:	2300      	movs	r3, #0
 8004a0a:	6063      	str	r3, [r4, #4]
 8004a0c:	6923      	ldr	r3, [r4, #16]
 8004a0e:	6023      	str	r3, [r4, #0]
 8004a10:	89a3      	ldrh	r3, [r4, #12]
 8004a12:	f043 0308 	orr.w	r3, r3, #8
 8004a16:	81a3      	strh	r3, [r4, #12]
 8004a18:	6923      	ldr	r3, [r4, #16]
 8004a1a:	b94b      	cbnz	r3, 8004a30 <__swsetup_r+0x7c>
 8004a1c:	89a3      	ldrh	r3, [r4, #12]
 8004a1e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a26:	d003      	beq.n	8004a30 <__swsetup_r+0x7c>
 8004a28:	4621      	mov	r1, r4
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	f002 fea0 	bl	8007770 <__smakebuf_r>
 8004a30:	89a0      	ldrh	r0, [r4, #12]
 8004a32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a36:	f010 0301 	ands.w	r3, r0, #1
 8004a3a:	d00a      	beq.n	8004a52 <__swsetup_r+0x9e>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60a3      	str	r3, [r4, #8]
 8004a40:	6963      	ldr	r3, [r4, #20]
 8004a42:	425b      	negs	r3, r3
 8004a44:	61a3      	str	r3, [r4, #24]
 8004a46:	6923      	ldr	r3, [r4, #16]
 8004a48:	b943      	cbnz	r3, 8004a5c <__swsetup_r+0xa8>
 8004a4a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a4e:	d1c4      	bne.n	80049da <__swsetup_r+0x26>
 8004a50:	bd38      	pop	{r3, r4, r5, pc}
 8004a52:	0781      	lsls	r1, r0, #30
 8004a54:	bf58      	it	pl
 8004a56:	6963      	ldrpl	r3, [r4, #20]
 8004a58:	60a3      	str	r3, [r4, #8]
 8004a5a:	e7f4      	b.n	8004a46 <__swsetup_r+0x92>
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	e7f7      	b.n	8004a50 <__swsetup_r+0x9c>
 8004a60:	20000064 	.word	0x20000064

08004a64 <memset>:
 8004a64:	4402      	add	r2, r0
 8004a66:	4603      	mov	r3, r0
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d100      	bne.n	8004a6e <memset+0xa>
 8004a6c:	4770      	bx	lr
 8004a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a72:	e7f9      	b.n	8004a68 <memset+0x4>

08004a74 <_localeconv_r>:
 8004a74:	4800      	ldr	r0, [pc, #0]	; (8004a78 <_localeconv_r+0x4>)
 8004a76:	4770      	bx	lr
 8004a78:	20000158 	.word	0x20000158

08004a7c <_close_r>:
 8004a7c:	b538      	push	{r3, r4, r5, lr}
 8004a7e:	4d06      	ldr	r5, [pc, #24]	; (8004a98 <_close_r+0x1c>)
 8004a80:	2300      	movs	r3, #0
 8004a82:	4604      	mov	r4, r0
 8004a84:	4608      	mov	r0, r1
 8004a86:	602b      	str	r3, [r5, #0]
 8004a88:	f7fc fd80 	bl	800158c <_close>
 8004a8c:	1c43      	adds	r3, r0, #1
 8004a8e:	d102      	bne.n	8004a96 <_close_r+0x1a>
 8004a90:	682b      	ldr	r3, [r5, #0]
 8004a92:	b103      	cbz	r3, 8004a96 <_close_r+0x1a>
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	bd38      	pop	{r3, r4, r5, pc}
 8004a98:	200003c8 	.word	0x200003c8

08004a9c <_lseek_r>:
 8004a9c:	b538      	push	{r3, r4, r5, lr}
 8004a9e:	4d07      	ldr	r5, [pc, #28]	; (8004abc <_lseek_r+0x20>)
 8004aa0:	4604      	mov	r4, r0
 8004aa2:	4608      	mov	r0, r1
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	602a      	str	r2, [r5, #0]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f7fc fd92 	bl	80015d4 <_lseek>
 8004ab0:	1c43      	adds	r3, r0, #1
 8004ab2:	d102      	bne.n	8004aba <_lseek_r+0x1e>
 8004ab4:	682b      	ldr	r3, [r5, #0]
 8004ab6:	b103      	cbz	r3, 8004aba <_lseek_r+0x1e>
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	bd38      	pop	{r3, r4, r5, pc}
 8004abc:	200003c8 	.word	0x200003c8

08004ac0 <_read_r>:
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	4d07      	ldr	r5, [pc, #28]	; (8004ae0 <_read_r+0x20>)
 8004ac4:	4604      	mov	r4, r0
 8004ac6:	4608      	mov	r0, r1
 8004ac8:	4611      	mov	r1, r2
 8004aca:	2200      	movs	r2, #0
 8004acc:	602a      	str	r2, [r5, #0]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f7fc fd23 	bl	800151a <_read>
 8004ad4:	1c43      	adds	r3, r0, #1
 8004ad6:	d102      	bne.n	8004ade <_read_r+0x1e>
 8004ad8:	682b      	ldr	r3, [r5, #0]
 8004ada:	b103      	cbz	r3, 8004ade <_read_r+0x1e>
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	bd38      	pop	{r3, r4, r5, pc}
 8004ae0:	200003c8 	.word	0x200003c8

08004ae4 <_write_r>:
 8004ae4:	b538      	push	{r3, r4, r5, lr}
 8004ae6:	4d07      	ldr	r5, [pc, #28]	; (8004b04 <_write_r+0x20>)
 8004ae8:	4604      	mov	r4, r0
 8004aea:	4608      	mov	r0, r1
 8004aec:	4611      	mov	r1, r2
 8004aee:	2200      	movs	r2, #0
 8004af0:	602a      	str	r2, [r5, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	f7fc fd2e 	bl	8001554 <_write>
 8004af8:	1c43      	adds	r3, r0, #1
 8004afa:	d102      	bne.n	8004b02 <_write_r+0x1e>
 8004afc:	682b      	ldr	r3, [r5, #0]
 8004afe:	b103      	cbz	r3, 8004b02 <_write_r+0x1e>
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	bd38      	pop	{r3, r4, r5, pc}
 8004b04:	200003c8 	.word	0x200003c8

08004b08 <__errno>:
 8004b08:	4b01      	ldr	r3, [pc, #4]	; (8004b10 <__errno+0x8>)
 8004b0a:	6818      	ldr	r0, [r3, #0]
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	20000064 	.word	0x20000064

08004b14 <__libc_init_array>:
 8004b14:	b570      	push	{r4, r5, r6, lr}
 8004b16:	4d0d      	ldr	r5, [pc, #52]	; (8004b4c <__libc_init_array+0x38>)
 8004b18:	4c0d      	ldr	r4, [pc, #52]	; (8004b50 <__libc_init_array+0x3c>)
 8004b1a:	1b64      	subs	r4, r4, r5
 8004b1c:	10a4      	asrs	r4, r4, #2
 8004b1e:	2600      	movs	r6, #0
 8004b20:	42a6      	cmp	r6, r4
 8004b22:	d109      	bne.n	8004b38 <__libc_init_array+0x24>
 8004b24:	4d0b      	ldr	r5, [pc, #44]	; (8004b54 <__libc_init_array+0x40>)
 8004b26:	4c0c      	ldr	r4, [pc, #48]	; (8004b58 <__libc_init_array+0x44>)
 8004b28:	f003 fb10 	bl	800814c <_init>
 8004b2c:	1b64      	subs	r4, r4, r5
 8004b2e:	10a4      	asrs	r4, r4, #2
 8004b30:	2600      	movs	r6, #0
 8004b32:	42a6      	cmp	r6, r4
 8004b34:	d105      	bne.n	8004b42 <__libc_init_array+0x2e>
 8004b36:	bd70      	pop	{r4, r5, r6, pc}
 8004b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b3c:	4798      	blx	r3
 8004b3e:	3601      	adds	r6, #1
 8004b40:	e7ee      	b.n	8004b20 <__libc_init_array+0xc>
 8004b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b46:	4798      	blx	r3
 8004b48:	3601      	adds	r6, #1
 8004b4a:	e7f2      	b.n	8004b32 <__libc_init_array+0x1e>
 8004b4c:	080085e8 	.word	0x080085e8
 8004b50:	080085e8 	.word	0x080085e8
 8004b54:	080085e8 	.word	0x080085e8
 8004b58:	080085ec 	.word	0x080085ec

08004b5c <__retarget_lock_init_recursive>:
 8004b5c:	4770      	bx	lr

08004b5e <__retarget_lock_acquire_recursive>:
 8004b5e:	4770      	bx	lr

08004b60 <__retarget_lock_release_recursive>:
 8004b60:	4770      	bx	lr
	...

08004b64 <nanf>:
 8004b64:	4800      	ldr	r0, [pc, #0]	; (8004b68 <nanf+0x4>)
 8004b66:	4770      	bx	lr
 8004b68:	7fc00000 	.word	0x7fc00000

08004b6c <quorem>:
 8004b6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b70:	6903      	ldr	r3, [r0, #16]
 8004b72:	690c      	ldr	r4, [r1, #16]
 8004b74:	42a3      	cmp	r3, r4
 8004b76:	4607      	mov	r7, r0
 8004b78:	db7b      	blt.n	8004c72 <quorem+0x106>
 8004b7a:	3c01      	subs	r4, #1
 8004b7c:	f101 0814 	add.w	r8, r1, #20
 8004b80:	f100 0514 	add.w	r5, r0, #20
 8004b84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b88:	9301      	str	r3, [sp, #4]
 8004b8a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b92:	3301      	adds	r3, #1
 8004b94:	429a      	cmp	r2, r3
 8004b96:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b9a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b9e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ba2:	d32e      	bcc.n	8004c02 <quorem+0x96>
 8004ba4:	f04f 0e00 	mov.w	lr, #0
 8004ba8:	4640      	mov	r0, r8
 8004baa:	46ac      	mov	ip, r5
 8004bac:	46f2      	mov	sl, lr
 8004bae:	f850 2b04 	ldr.w	r2, [r0], #4
 8004bb2:	b293      	uxth	r3, r2
 8004bb4:	fb06 e303 	mla	r3, r6, r3, lr
 8004bb8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004bbc:	0c1a      	lsrs	r2, r3, #16
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	fb06 220e 	mla	r2, r6, lr, r2
 8004bc4:	ebaa 0303 	sub.w	r3, sl, r3
 8004bc8:	f8dc a000 	ldr.w	sl, [ip]
 8004bcc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004bd0:	b292      	uxth	r2, r2
 8004bd2:	fa13 f38a 	uxtah	r3, r3, sl
 8004bd6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004bda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004be4:	4581      	cmp	r9, r0
 8004be6:	f84c 3b04 	str.w	r3, [ip], #4
 8004bea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004bee:	d2de      	bcs.n	8004bae <quorem+0x42>
 8004bf0:	f855 300b 	ldr.w	r3, [r5, fp]
 8004bf4:	b92b      	cbnz	r3, 8004c02 <quorem+0x96>
 8004bf6:	9b01      	ldr	r3, [sp, #4]
 8004bf8:	3b04      	subs	r3, #4
 8004bfa:	429d      	cmp	r5, r3
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	d32c      	bcc.n	8004c5a <quorem+0xee>
 8004c00:	613c      	str	r4, [r7, #16]
 8004c02:	4638      	mov	r0, r7
 8004c04:	f001 f9dc 	bl	8005fc0 <__mcmp>
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	db22      	blt.n	8004c52 <quorem+0xe6>
 8004c0c:	3601      	adds	r6, #1
 8004c0e:	4629      	mov	r1, r5
 8004c10:	2000      	movs	r0, #0
 8004c12:	f858 2b04 	ldr.w	r2, [r8], #4
 8004c16:	f8d1 c000 	ldr.w	ip, [r1]
 8004c1a:	b293      	uxth	r3, r2
 8004c1c:	1ac3      	subs	r3, r0, r3
 8004c1e:	0c12      	lsrs	r2, r2, #16
 8004c20:	fa13 f38c 	uxtah	r3, r3, ip
 8004c24:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004c28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c32:	45c1      	cmp	r9, r8
 8004c34:	f841 3b04 	str.w	r3, [r1], #4
 8004c38:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004c3c:	d2e9      	bcs.n	8004c12 <quorem+0xa6>
 8004c3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c46:	b922      	cbnz	r2, 8004c52 <quorem+0xe6>
 8004c48:	3b04      	subs	r3, #4
 8004c4a:	429d      	cmp	r5, r3
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	d30a      	bcc.n	8004c66 <quorem+0xfa>
 8004c50:	613c      	str	r4, [r7, #16]
 8004c52:	4630      	mov	r0, r6
 8004c54:	b003      	add	sp, #12
 8004c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c5a:	6812      	ldr	r2, [r2, #0]
 8004c5c:	3b04      	subs	r3, #4
 8004c5e:	2a00      	cmp	r2, #0
 8004c60:	d1ce      	bne.n	8004c00 <quorem+0x94>
 8004c62:	3c01      	subs	r4, #1
 8004c64:	e7c9      	b.n	8004bfa <quorem+0x8e>
 8004c66:	6812      	ldr	r2, [r2, #0]
 8004c68:	3b04      	subs	r3, #4
 8004c6a:	2a00      	cmp	r2, #0
 8004c6c:	d1f0      	bne.n	8004c50 <quorem+0xe4>
 8004c6e:	3c01      	subs	r4, #1
 8004c70:	e7eb      	b.n	8004c4a <quorem+0xde>
 8004c72:	2000      	movs	r0, #0
 8004c74:	e7ee      	b.n	8004c54 <quorem+0xe8>
	...

08004c78 <_dtoa_r>:
 8004c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7c:	69c4      	ldr	r4, [r0, #28]
 8004c7e:	b099      	sub	sp, #100	; 0x64
 8004c80:	4616      	mov	r6, r2
 8004c82:	461f      	mov	r7, r3
 8004c84:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c88:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004c8c:	4605      	mov	r5, r0
 8004c8e:	b974      	cbnz	r4, 8004cae <_dtoa_r+0x36>
 8004c90:	2010      	movs	r0, #16
 8004c92:	f000 fe1b 	bl	80058cc <malloc>
 8004c96:	4602      	mov	r2, r0
 8004c98:	61e8      	str	r0, [r5, #28]
 8004c9a:	b920      	cbnz	r0, 8004ca6 <_dtoa_r+0x2e>
 8004c9c:	4baa      	ldr	r3, [pc, #680]	; (8004f48 <_dtoa_r+0x2d0>)
 8004c9e:	21ef      	movs	r1, #239	; 0xef
 8004ca0:	48aa      	ldr	r0, [pc, #680]	; (8004f4c <_dtoa_r+0x2d4>)
 8004ca2:	f002 fe13 	bl	80078cc <__assert_func>
 8004ca6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004caa:	6004      	str	r4, [r0, #0]
 8004cac:	60c4      	str	r4, [r0, #12]
 8004cae:	69eb      	ldr	r3, [r5, #28]
 8004cb0:	6819      	ldr	r1, [r3, #0]
 8004cb2:	b151      	cbz	r1, 8004cca <_dtoa_r+0x52>
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	604a      	str	r2, [r1, #4]
 8004cb8:	2301      	movs	r3, #1
 8004cba:	4093      	lsls	r3, r2
 8004cbc:	608b      	str	r3, [r1, #8]
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f000 fef8 	bl	8005ab4 <_Bfree>
 8004cc4:	69eb      	ldr	r3, [r5, #28]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	1e3b      	subs	r3, r7, #0
 8004ccc:	bfb9      	ittee	lt
 8004cce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004cd2:	9305      	strlt	r3, [sp, #20]
 8004cd4:	2300      	movge	r3, #0
 8004cd6:	f8c8 3000 	strge.w	r3, [r8]
 8004cda:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004cde:	4b9c      	ldr	r3, [pc, #624]	; (8004f50 <_dtoa_r+0x2d8>)
 8004ce0:	bfbc      	itt	lt
 8004ce2:	2201      	movlt	r2, #1
 8004ce4:	f8c8 2000 	strlt.w	r2, [r8]
 8004ce8:	ea33 0309 	bics.w	r3, r3, r9
 8004cec:	d119      	bne.n	8004d22 <_dtoa_r+0xaa>
 8004cee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004cf0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004cfa:	4333      	orrs	r3, r6
 8004cfc:	f000 8587 	beq.w	800580e <_dtoa_r+0xb96>
 8004d00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d02:	b953      	cbnz	r3, 8004d1a <_dtoa_r+0xa2>
 8004d04:	4b93      	ldr	r3, [pc, #588]	; (8004f54 <_dtoa_r+0x2dc>)
 8004d06:	e023      	b.n	8004d50 <_dtoa_r+0xd8>
 8004d08:	4b93      	ldr	r3, [pc, #588]	; (8004f58 <_dtoa_r+0x2e0>)
 8004d0a:	9303      	str	r3, [sp, #12]
 8004d0c:	3308      	adds	r3, #8
 8004d0e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	9803      	ldr	r0, [sp, #12]
 8004d14:	b019      	add	sp, #100	; 0x64
 8004d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d1a:	4b8e      	ldr	r3, [pc, #568]	; (8004f54 <_dtoa_r+0x2dc>)
 8004d1c:	9303      	str	r3, [sp, #12]
 8004d1e:	3303      	adds	r3, #3
 8004d20:	e7f5      	b.n	8004d0e <_dtoa_r+0x96>
 8004d22:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004d26:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004d2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d2e:	2200      	movs	r2, #0
 8004d30:	2300      	movs	r3, #0
 8004d32:	f7fb fec9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d36:	4680      	mov	r8, r0
 8004d38:	b160      	cbz	r0, 8004d54 <_dtoa_r+0xdc>
 8004d3a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 8560 	beq.w	8005808 <_dtoa_r+0xb90>
 8004d48:	4b84      	ldr	r3, [pc, #528]	; (8004f5c <_dtoa_r+0x2e4>)
 8004d4a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	9303      	str	r3, [sp, #12]
 8004d52:	e7de      	b.n	8004d12 <_dtoa_r+0x9a>
 8004d54:	ab16      	add	r3, sp, #88	; 0x58
 8004d56:	9301      	str	r3, [sp, #4]
 8004d58:	ab17      	add	r3, sp, #92	; 0x5c
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004d62:	f001 fa39 	bl	80061d8 <__d2b>
 8004d66:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004d6a:	4682      	mov	sl, r0
 8004d6c:	2c00      	cmp	r4, #0
 8004d6e:	d07d      	beq.n	8004e6c <_dtoa_r+0x1f4>
 8004d70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d72:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004d76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d7e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004d82:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004d86:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	4b74      	ldr	r3, [pc, #464]	; (8004f60 <_dtoa_r+0x2e8>)
 8004d90:	f7fb fa7a 	bl	8000288 <__aeabi_dsub>
 8004d94:	a366      	add	r3, pc, #408	; (adr r3, 8004f30 <_dtoa_r+0x2b8>)
 8004d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9a:	f7fb fc2d 	bl	80005f8 <__aeabi_dmul>
 8004d9e:	a366      	add	r3, pc, #408	; (adr r3, 8004f38 <_dtoa_r+0x2c0>)
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	f7fb fa72 	bl	800028c <__adddf3>
 8004da8:	4606      	mov	r6, r0
 8004daa:	4620      	mov	r0, r4
 8004dac:	460f      	mov	r7, r1
 8004dae:	f7fb fbb9 	bl	8000524 <__aeabi_i2d>
 8004db2:	a363      	add	r3, pc, #396	; (adr r3, 8004f40 <_dtoa_r+0x2c8>)
 8004db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db8:	f7fb fc1e 	bl	80005f8 <__aeabi_dmul>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	4639      	mov	r1, r7
 8004dc4:	f7fb fa62 	bl	800028c <__adddf3>
 8004dc8:	4606      	mov	r6, r0
 8004dca:	460f      	mov	r7, r1
 8004dcc:	f7fb fec4 	bl	8000b58 <__aeabi_d2iz>
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	4683      	mov	fp, r0
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	4639      	mov	r1, r7
 8004dda:	f7fb fe7f 	bl	8000adc <__aeabi_dcmplt>
 8004dde:	b148      	cbz	r0, 8004df4 <_dtoa_r+0x17c>
 8004de0:	4658      	mov	r0, fp
 8004de2:	f7fb fb9f 	bl	8000524 <__aeabi_i2d>
 8004de6:	4632      	mov	r2, r6
 8004de8:	463b      	mov	r3, r7
 8004dea:	f7fb fe6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004dee:	b908      	cbnz	r0, 8004df4 <_dtoa_r+0x17c>
 8004df0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004df4:	f1bb 0f16 	cmp.w	fp, #22
 8004df8:	d856      	bhi.n	8004ea8 <_dtoa_r+0x230>
 8004dfa:	4b5a      	ldr	r3, [pc, #360]	; (8004f64 <_dtoa_r+0x2ec>)
 8004dfc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e08:	f7fb fe68 	bl	8000adc <__aeabi_dcmplt>
 8004e0c:	2800      	cmp	r0, #0
 8004e0e:	d04d      	beq.n	8004eac <_dtoa_r+0x234>
 8004e10:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e14:	2300      	movs	r3, #0
 8004e16:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004e1a:	1b1b      	subs	r3, r3, r4
 8004e1c:	1e5a      	subs	r2, r3, #1
 8004e1e:	bf44      	itt	mi
 8004e20:	f1c3 0901 	rsbmi	r9, r3, #1
 8004e24:	2300      	movmi	r3, #0
 8004e26:	9209      	str	r2, [sp, #36]	; 0x24
 8004e28:	bf54      	ite	pl
 8004e2a:	f04f 0900 	movpl.w	r9, #0
 8004e2e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004e30:	f1bb 0f00 	cmp.w	fp, #0
 8004e34:	db3c      	blt.n	8004eb0 <_dtoa_r+0x238>
 8004e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e38:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8004e3c:	445b      	add	r3, fp
 8004e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e40:	2300      	movs	r3, #0
 8004e42:	930a      	str	r3, [sp, #40]	; 0x28
 8004e44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e46:	2b09      	cmp	r3, #9
 8004e48:	d866      	bhi.n	8004f18 <_dtoa_r+0x2a0>
 8004e4a:	2b05      	cmp	r3, #5
 8004e4c:	bfc4      	itt	gt
 8004e4e:	3b04      	subgt	r3, #4
 8004e50:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004e52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e54:	f1a3 0302 	sub.w	r3, r3, #2
 8004e58:	bfcc      	ite	gt
 8004e5a:	2400      	movgt	r4, #0
 8004e5c:	2401      	movle	r4, #1
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	f200 8084 	bhi.w	8004f6c <_dtoa_r+0x2f4>
 8004e64:	e8df f003 	tbb	[pc, r3]
 8004e68:	5637392c 	.word	0x5637392c
 8004e6c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004e70:	441c      	add	r4, r3
 8004e72:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	bfc1      	itttt	gt
 8004e7a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e7e:	fa09 f903 	lslgt.w	r9, r9, r3
 8004e82:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8004e86:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004e8a:	bfd6      	itet	le
 8004e8c:	f1c3 0320 	rsble	r3, r3, #32
 8004e90:	ea49 0003 	orrgt.w	r0, r9, r3
 8004e94:	fa06 f003 	lslle.w	r0, r6, r3
 8004e98:	f7fb fb34 	bl	8000504 <__aeabi_ui2d>
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004ea2:	3c01      	subs	r4, #1
 8004ea4:	9213      	str	r2, [sp, #76]	; 0x4c
 8004ea6:	e770      	b.n	8004d8a <_dtoa_r+0x112>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e7b4      	b.n	8004e16 <_dtoa_r+0x19e>
 8004eac:	900f      	str	r0, [sp, #60]	; 0x3c
 8004eae:	e7b3      	b.n	8004e18 <_dtoa_r+0x1a0>
 8004eb0:	f1cb 0300 	rsb	r3, fp, #0
 8004eb4:	930a      	str	r3, [sp, #40]	; 0x28
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	eba9 090b 	sub.w	r9, r9, fp
 8004ebc:	930e      	str	r3, [sp, #56]	; 0x38
 8004ebe:	e7c1      	b.n	8004e44 <_dtoa_r+0x1cc>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ec4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	dc53      	bgt.n	8004f72 <_dtoa_r+0x2fa>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	9306      	str	r3, [sp, #24]
 8004ece:	9308      	str	r3, [sp, #32]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	9223      	str	r2, [sp, #140]	; 0x8c
 8004ed4:	e00b      	b.n	8004eee <_dtoa_r+0x276>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e7f3      	b.n	8004ec2 <_dtoa_r+0x24a>
 8004eda:	2300      	movs	r3, #0
 8004edc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ede:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ee0:	445b      	add	r3, fp
 8004ee2:	9306      	str	r3, [sp, #24]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	9308      	str	r3, [sp, #32]
 8004eea:	bfb8      	it	lt
 8004eec:	2301      	movlt	r3, #1
 8004eee:	69e8      	ldr	r0, [r5, #28]
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	f102 0614 	add.w	r6, r2, #20
 8004ef8:	429e      	cmp	r6, r3
 8004efa:	d93e      	bls.n	8004f7a <_dtoa_r+0x302>
 8004efc:	6041      	str	r1, [r0, #4]
 8004efe:	4628      	mov	r0, r5
 8004f00:	f000 fd98 	bl	8005a34 <_Balloc>
 8004f04:	9003      	str	r0, [sp, #12]
 8004f06:	2800      	cmp	r0, #0
 8004f08:	d13a      	bne.n	8004f80 <_dtoa_r+0x308>
 8004f0a:	4b17      	ldr	r3, [pc, #92]	; (8004f68 <_dtoa_r+0x2f0>)
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	f240 11af 	movw	r1, #431	; 0x1af
 8004f12:	e6c5      	b.n	8004ca0 <_dtoa_r+0x28>
 8004f14:	2301      	movs	r3, #1
 8004f16:	e7e1      	b.n	8004edc <_dtoa_r+0x264>
 8004f18:	2401      	movs	r4, #1
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9322      	str	r3, [sp, #136]	; 0x88
 8004f1e:	940b      	str	r4, [sp, #44]	; 0x2c
 8004f20:	f04f 33ff 	mov.w	r3, #4294967295
 8004f24:	9306      	str	r3, [sp, #24]
 8004f26:	9308      	str	r3, [sp, #32]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2312      	movs	r3, #18
 8004f2c:	e7d1      	b.n	8004ed2 <_dtoa_r+0x25a>
 8004f2e:	bf00      	nop
 8004f30:	636f4361 	.word	0x636f4361
 8004f34:	3fd287a7 	.word	0x3fd287a7
 8004f38:	8b60c8b3 	.word	0x8b60c8b3
 8004f3c:	3fc68a28 	.word	0x3fc68a28
 8004f40:	509f79fb 	.word	0x509f79fb
 8004f44:	3fd34413 	.word	0x3fd34413
 8004f48:	080081fe 	.word	0x080081fe
 8004f4c:	08008215 	.word	0x08008215
 8004f50:	7ff00000 	.word	0x7ff00000
 8004f54:	080081fa 	.word	0x080081fa
 8004f58:	080081f1 	.word	0x080081f1
 8004f5c:	080081c9 	.word	0x080081c9
 8004f60:	3ff80000 	.word	0x3ff80000
 8004f64:	08008300 	.word	0x08008300
 8004f68:	0800826d 	.word	0x0800826d
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f70:	e7d6      	b.n	8004f20 <_dtoa_r+0x2a8>
 8004f72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f74:	9306      	str	r3, [sp, #24]
 8004f76:	9308      	str	r3, [sp, #32]
 8004f78:	e7b9      	b.n	8004eee <_dtoa_r+0x276>
 8004f7a:	3101      	adds	r1, #1
 8004f7c:	0052      	lsls	r2, r2, #1
 8004f7e:	e7b9      	b.n	8004ef4 <_dtoa_r+0x27c>
 8004f80:	69eb      	ldr	r3, [r5, #28]
 8004f82:	9a03      	ldr	r2, [sp, #12]
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	9b08      	ldr	r3, [sp, #32]
 8004f88:	2b0e      	cmp	r3, #14
 8004f8a:	f200 80a8 	bhi.w	80050de <_dtoa_r+0x466>
 8004f8e:	2c00      	cmp	r4, #0
 8004f90:	f000 80a5 	beq.w	80050de <_dtoa_r+0x466>
 8004f94:	f1bb 0f00 	cmp.w	fp, #0
 8004f98:	dd34      	ble.n	8005004 <_dtoa_r+0x38c>
 8004f9a:	4b9a      	ldr	r3, [pc, #616]	; (8005204 <_dtoa_r+0x58c>)
 8004f9c:	f00b 020f 	and.w	r2, fp, #15
 8004fa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fa4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fa8:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004fac:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004fb0:	ea4f 142b 	mov.w	r4, fp, asr #4
 8004fb4:	d016      	beq.n	8004fe4 <_dtoa_r+0x36c>
 8004fb6:	4b94      	ldr	r3, [pc, #592]	; (8005208 <_dtoa_r+0x590>)
 8004fb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fc0:	f7fb fc44 	bl	800084c <__aeabi_ddiv>
 8004fc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fc8:	f004 040f 	and.w	r4, r4, #15
 8004fcc:	2703      	movs	r7, #3
 8004fce:	4e8e      	ldr	r6, [pc, #568]	; (8005208 <_dtoa_r+0x590>)
 8004fd0:	b954      	cbnz	r4, 8004fe8 <_dtoa_r+0x370>
 8004fd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004fd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fda:	f7fb fc37 	bl	800084c <__aeabi_ddiv>
 8004fde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fe2:	e029      	b.n	8005038 <_dtoa_r+0x3c0>
 8004fe4:	2702      	movs	r7, #2
 8004fe6:	e7f2      	b.n	8004fce <_dtoa_r+0x356>
 8004fe8:	07e1      	lsls	r1, r4, #31
 8004fea:	d508      	bpl.n	8004ffe <_dtoa_r+0x386>
 8004fec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ff0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ff4:	f7fb fb00 	bl	80005f8 <__aeabi_dmul>
 8004ff8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ffc:	3701      	adds	r7, #1
 8004ffe:	1064      	asrs	r4, r4, #1
 8005000:	3608      	adds	r6, #8
 8005002:	e7e5      	b.n	8004fd0 <_dtoa_r+0x358>
 8005004:	f000 80a5 	beq.w	8005152 <_dtoa_r+0x4da>
 8005008:	f1cb 0400 	rsb	r4, fp, #0
 800500c:	4b7d      	ldr	r3, [pc, #500]	; (8005204 <_dtoa_r+0x58c>)
 800500e:	4e7e      	ldr	r6, [pc, #504]	; (8005208 <_dtoa_r+0x590>)
 8005010:	f004 020f 	and.w	r2, r4, #15
 8005014:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005020:	f7fb faea 	bl	80005f8 <__aeabi_dmul>
 8005024:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005028:	1124      	asrs	r4, r4, #4
 800502a:	2300      	movs	r3, #0
 800502c:	2702      	movs	r7, #2
 800502e:	2c00      	cmp	r4, #0
 8005030:	f040 8084 	bne.w	800513c <_dtoa_r+0x4c4>
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1d2      	bne.n	8004fde <_dtoa_r+0x366>
 8005038:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800503c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005040:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 8087 	beq.w	8005156 <_dtoa_r+0x4de>
 8005048:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800504c:	4b6f      	ldr	r3, [pc, #444]	; (800520c <_dtoa_r+0x594>)
 800504e:	2200      	movs	r2, #0
 8005050:	f7fb fd44 	bl	8000adc <__aeabi_dcmplt>
 8005054:	2800      	cmp	r0, #0
 8005056:	d07e      	beq.n	8005156 <_dtoa_r+0x4de>
 8005058:	9b08      	ldr	r3, [sp, #32]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d07b      	beq.n	8005156 <_dtoa_r+0x4de>
 800505e:	9b06      	ldr	r3, [sp, #24]
 8005060:	2b00      	cmp	r3, #0
 8005062:	dd38      	ble.n	80050d6 <_dtoa_r+0x45e>
 8005064:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005068:	4b69      	ldr	r3, [pc, #420]	; (8005210 <_dtoa_r+0x598>)
 800506a:	2200      	movs	r2, #0
 800506c:	f7fb fac4 	bl	80005f8 <__aeabi_dmul>
 8005070:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005074:	9c06      	ldr	r4, [sp, #24]
 8005076:	f10b 38ff 	add.w	r8, fp, #4294967295
 800507a:	3701      	adds	r7, #1
 800507c:	4638      	mov	r0, r7
 800507e:	f7fb fa51 	bl	8000524 <__aeabi_i2d>
 8005082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005086:	f7fb fab7 	bl	80005f8 <__aeabi_dmul>
 800508a:	4b62      	ldr	r3, [pc, #392]	; (8005214 <_dtoa_r+0x59c>)
 800508c:	2200      	movs	r2, #0
 800508e:	f7fb f8fd 	bl	800028c <__adddf3>
 8005092:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005096:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800509a:	9611      	str	r6, [sp, #68]	; 0x44
 800509c:	2c00      	cmp	r4, #0
 800509e:	d15d      	bne.n	800515c <_dtoa_r+0x4e4>
 80050a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050a4:	4b5c      	ldr	r3, [pc, #368]	; (8005218 <_dtoa_r+0x5a0>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	f7fb f8ee 	bl	8000288 <__aeabi_dsub>
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050b6:	4633      	mov	r3, r6
 80050b8:	f7fb fd2e 	bl	8000b18 <__aeabi_dcmpgt>
 80050bc:	2800      	cmp	r0, #0
 80050be:	f040 8295 	bne.w	80055ec <_dtoa_r+0x974>
 80050c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80050cc:	f7fb fd06 	bl	8000adc <__aeabi_dcmplt>
 80050d0:	2800      	cmp	r0, #0
 80050d2:	f040 8289 	bne.w	80055e8 <_dtoa_r+0x970>
 80050d6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80050da:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80050de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f2c0 8151 	blt.w	8005388 <_dtoa_r+0x710>
 80050e6:	f1bb 0f0e 	cmp.w	fp, #14
 80050ea:	f300 814d 	bgt.w	8005388 <_dtoa_r+0x710>
 80050ee:	4b45      	ldr	r3, [pc, #276]	; (8005204 <_dtoa_r+0x58c>)
 80050f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80050f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050f8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80050fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f280 80da 	bge.w	80052b8 <_dtoa_r+0x640>
 8005104:	9b08      	ldr	r3, [sp, #32]
 8005106:	2b00      	cmp	r3, #0
 8005108:	f300 80d6 	bgt.w	80052b8 <_dtoa_r+0x640>
 800510c:	f040 826b 	bne.w	80055e6 <_dtoa_r+0x96e>
 8005110:	4b41      	ldr	r3, [pc, #260]	; (8005218 <_dtoa_r+0x5a0>)
 8005112:	2200      	movs	r2, #0
 8005114:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005118:	f7fb fa6e 	bl	80005f8 <__aeabi_dmul>
 800511c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005120:	f7fb fcf0 	bl	8000b04 <__aeabi_dcmpge>
 8005124:	9c08      	ldr	r4, [sp, #32]
 8005126:	4626      	mov	r6, r4
 8005128:	2800      	cmp	r0, #0
 800512a:	f040 8241 	bne.w	80055b0 <_dtoa_r+0x938>
 800512e:	9f03      	ldr	r7, [sp, #12]
 8005130:	2331      	movs	r3, #49	; 0x31
 8005132:	f807 3b01 	strb.w	r3, [r7], #1
 8005136:	f10b 0b01 	add.w	fp, fp, #1
 800513a:	e23d      	b.n	80055b8 <_dtoa_r+0x940>
 800513c:	07e2      	lsls	r2, r4, #31
 800513e:	d505      	bpl.n	800514c <_dtoa_r+0x4d4>
 8005140:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005144:	f7fb fa58 	bl	80005f8 <__aeabi_dmul>
 8005148:	3701      	adds	r7, #1
 800514a:	2301      	movs	r3, #1
 800514c:	1064      	asrs	r4, r4, #1
 800514e:	3608      	adds	r6, #8
 8005150:	e76d      	b.n	800502e <_dtoa_r+0x3b6>
 8005152:	2702      	movs	r7, #2
 8005154:	e770      	b.n	8005038 <_dtoa_r+0x3c0>
 8005156:	9c08      	ldr	r4, [sp, #32]
 8005158:	46d8      	mov	r8, fp
 800515a:	e78f      	b.n	800507c <_dtoa_r+0x404>
 800515c:	9903      	ldr	r1, [sp, #12]
 800515e:	4b29      	ldr	r3, [pc, #164]	; (8005204 <_dtoa_r+0x58c>)
 8005160:	4421      	add	r1, r4
 8005162:	9112      	str	r1, [sp, #72]	; 0x48
 8005164:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005166:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800516a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800516e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005172:	2900      	cmp	r1, #0
 8005174:	d054      	beq.n	8005220 <_dtoa_r+0x5a8>
 8005176:	4929      	ldr	r1, [pc, #164]	; (800521c <_dtoa_r+0x5a4>)
 8005178:	2000      	movs	r0, #0
 800517a:	f7fb fb67 	bl	800084c <__aeabi_ddiv>
 800517e:	463b      	mov	r3, r7
 8005180:	4632      	mov	r2, r6
 8005182:	f7fb f881 	bl	8000288 <__aeabi_dsub>
 8005186:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800518a:	9f03      	ldr	r7, [sp, #12]
 800518c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005190:	f7fb fce2 	bl	8000b58 <__aeabi_d2iz>
 8005194:	4604      	mov	r4, r0
 8005196:	f7fb f9c5 	bl	8000524 <__aeabi_i2d>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051a2:	f7fb f871 	bl	8000288 <__aeabi_dsub>
 80051a6:	3430      	adds	r4, #48	; 0x30
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051b0:	f807 4b01 	strb.w	r4, [r7], #1
 80051b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051b8:	f7fb fc90 	bl	8000adc <__aeabi_dcmplt>
 80051bc:	2800      	cmp	r0, #0
 80051be:	d173      	bne.n	80052a8 <_dtoa_r+0x630>
 80051c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051c4:	4911      	ldr	r1, [pc, #68]	; (800520c <_dtoa_r+0x594>)
 80051c6:	2000      	movs	r0, #0
 80051c8:	f7fb f85e 	bl	8000288 <__aeabi_dsub>
 80051cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051d0:	f7fb fc84 	bl	8000adc <__aeabi_dcmplt>
 80051d4:	2800      	cmp	r0, #0
 80051d6:	f040 80b6 	bne.w	8005346 <_dtoa_r+0x6ce>
 80051da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051dc:	429f      	cmp	r7, r3
 80051de:	f43f af7a 	beq.w	80050d6 <_dtoa_r+0x45e>
 80051e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051e6:	4b0a      	ldr	r3, [pc, #40]	; (8005210 <_dtoa_r+0x598>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	f7fb fa05 	bl	80005f8 <__aeabi_dmul>
 80051ee:	4b08      	ldr	r3, [pc, #32]	; (8005210 <_dtoa_r+0x598>)
 80051f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051f4:	2200      	movs	r2, #0
 80051f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051fa:	f7fb f9fd 	bl	80005f8 <__aeabi_dmul>
 80051fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005202:	e7c3      	b.n	800518c <_dtoa_r+0x514>
 8005204:	08008300 	.word	0x08008300
 8005208:	080082d8 	.word	0x080082d8
 800520c:	3ff00000 	.word	0x3ff00000
 8005210:	40240000 	.word	0x40240000
 8005214:	401c0000 	.word	0x401c0000
 8005218:	40140000 	.word	0x40140000
 800521c:	3fe00000 	.word	0x3fe00000
 8005220:	4630      	mov	r0, r6
 8005222:	4639      	mov	r1, r7
 8005224:	f7fb f9e8 	bl	80005f8 <__aeabi_dmul>
 8005228:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800522c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800522e:	9c03      	ldr	r4, [sp, #12]
 8005230:	9314      	str	r3, [sp, #80]	; 0x50
 8005232:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005236:	f7fb fc8f 	bl	8000b58 <__aeabi_d2iz>
 800523a:	9015      	str	r0, [sp, #84]	; 0x54
 800523c:	f7fb f972 	bl	8000524 <__aeabi_i2d>
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005248:	f7fb f81e 	bl	8000288 <__aeabi_dsub>
 800524c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800524e:	3330      	adds	r3, #48	; 0x30
 8005250:	f804 3b01 	strb.w	r3, [r4], #1
 8005254:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005256:	429c      	cmp	r4, r3
 8005258:	4606      	mov	r6, r0
 800525a:	460f      	mov	r7, r1
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	d124      	bne.n	80052ac <_dtoa_r+0x634>
 8005262:	4bb0      	ldr	r3, [pc, #704]	; (8005524 <_dtoa_r+0x8ac>)
 8005264:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005268:	f7fb f810 	bl	800028c <__adddf3>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	4630      	mov	r0, r6
 8005272:	4639      	mov	r1, r7
 8005274:	f7fb fc50 	bl	8000b18 <__aeabi_dcmpgt>
 8005278:	2800      	cmp	r0, #0
 800527a:	d163      	bne.n	8005344 <_dtoa_r+0x6cc>
 800527c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005280:	49a8      	ldr	r1, [pc, #672]	; (8005524 <_dtoa_r+0x8ac>)
 8005282:	2000      	movs	r0, #0
 8005284:	f7fb f800 	bl	8000288 <__aeabi_dsub>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4630      	mov	r0, r6
 800528e:	4639      	mov	r1, r7
 8005290:	f7fb fc24 	bl	8000adc <__aeabi_dcmplt>
 8005294:	2800      	cmp	r0, #0
 8005296:	f43f af1e 	beq.w	80050d6 <_dtoa_r+0x45e>
 800529a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800529c:	1e7b      	subs	r3, r7, #1
 800529e:	9314      	str	r3, [sp, #80]	; 0x50
 80052a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80052a4:	2b30      	cmp	r3, #48	; 0x30
 80052a6:	d0f8      	beq.n	800529a <_dtoa_r+0x622>
 80052a8:	46c3      	mov	fp, r8
 80052aa:	e03b      	b.n	8005324 <_dtoa_r+0x6ac>
 80052ac:	4b9e      	ldr	r3, [pc, #632]	; (8005528 <_dtoa_r+0x8b0>)
 80052ae:	f7fb f9a3 	bl	80005f8 <__aeabi_dmul>
 80052b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052b6:	e7bc      	b.n	8005232 <_dtoa_r+0x5ba>
 80052b8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80052bc:	9f03      	ldr	r7, [sp, #12]
 80052be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052c2:	4640      	mov	r0, r8
 80052c4:	4649      	mov	r1, r9
 80052c6:	f7fb fac1 	bl	800084c <__aeabi_ddiv>
 80052ca:	f7fb fc45 	bl	8000b58 <__aeabi_d2iz>
 80052ce:	4604      	mov	r4, r0
 80052d0:	f7fb f928 	bl	8000524 <__aeabi_i2d>
 80052d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052d8:	f7fb f98e 	bl	80005f8 <__aeabi_dmul>
 80052dc:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4640      	mov	r0, r8
 80052e6:	4649      	mov	r1, r9
 80052e8:	f7fa ffce 	bl	8000288 <__aeabi_dsub>
 80052ec:	f807 6b01 	strb.w	r6, [r7], #1
 80052f0:	9e03      	ldr	r6, [sp, #12]
 80052f2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80052f6:	1bbe      	subs	r6, r7, r6
 80052f8:	45b4      	cmp	ip, r6
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	d136      	bne.n	800536e <_dtoa_r+0x6f6>
 8005300:	f7fa ffc4 	bl	800028c <__adddf3>
 8005304:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005308:	4680      	mov	r8, r0
 800530a:	4689      	mov	r9, r1
 800530c:	f7fb fc04 	bl	8000b18 <__aeabi_dcmpgt>
 8005310:	bb58      	cbnz	r0, 800536a <_dtoa_r+0x6f2>
 8005312:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005316:	4640      	mov	r0, r8
 8005318:	4649      	mov	r1, r9
 800531a:	f7fb fbd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800531e:	b108      	cbz	r0, 8005324 <_dtoa_r+0x6ac>
 8005320:	07e3      	lsls	r3, r4, #31
 8005322:	d422      	bmi.n	800536a <_dtoa_r+0x6f2>
 8005324:	4651      	mov	r1, sl
 8005326:	4628      	mov	r0, r5
 8005328:	f000 fbc4 	bl	8005ab4 <_Bfree>
 800532c:	2300      	movs	r3, #0
 800532e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005330:	703b      	strb	r3, [r7, #0]
 8005332:	f10b 0301 	add.w	r3, fp, #1
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800533a:	2b00      	cmp	r3, #0
 800533c:	f43f ace9 	beq.w	8004d12 <_dtoa_r+0x9a>
 8005340:	601f      	str	r7, [r3, #0]
 8005342:	e4e6      	b.n	8004d12 <_dtoa_r+0x9a>
 8005344:	4627      	mov	r7, r4
 8005346:	463b      	mov	r3, r7
 8005348:	461f      	mov	r7, r3
 800534a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800534e:	2a39      	cmp	r2, #57	; 0x39
 8005350:	d107      	bne.n	8005362 <_dtoa_r+0x6ea>
 8005352:	9a03      	ldr	r2, [sp, #12]
 8005354:	429a      	cmp	r2, r3
 8005356:	d1f7      	bne.n	8005348 <_dtoa_r+0x6d0>
 8005358:	9903      	ldr	r1, [sp, #12]
 800535a:	2230      	movs	r2, #48	; 0x30
 800535c:	f108 0801 	add.w	r8, r8, #1
 8005360:	700a      	strb	r2, [r1, #0]
 8005362:	781a      	ldrb	r2, [r3, #0]
 8005364:	3201      	adds	r2, #1
 8005366:	701a      	strb	r2, [r3, #0]
 8005368:	e79e      	b.n	80052a8 <_dtoa_r+0x630>
 800536a:	46d8      	mov	r8, fp
 800536c:	e7eb      	b.n	8005346 <_dtoa_r+0x6ce>
 800536e:	4b6e      	ldr	r3, [pc, #440]	; (8005528 <_dtoa_r+0x8b0>)
 8005370:	2200      	movs	r2, #0
 8005372:	f7fb f941 	bl	80005f8 <__aeabi_dmul>
 8005376:	2200      	movs	r2, #0
 8005378:	2300      	movs	r3, #0
 800537a:	4680      	mov	r8, r0
 800537c:	4689      	mov	r9, r1
 800537e:	f7fb fba3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005382:	2800      	cmp	r0, #0
 8005384:	d09b      	beq.n	80052be <_dtoa_r+0x646>
 8005386:	e7cd      	b.n	8005324 <_dtoa_r+0x6ac>
 8005388:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800538a:	2a00      	cmp	r2, #0
 800538c:	f000 80c4 	beq.w	8005518 <_dtoa_r+0x8a0>
 8005390:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005392:	2a01      	cmp	r2, #1
 8005394:	f300 80a8 	bgt.w	80054e8 <_dtoa_r+0x870>
 8005398:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800539a:	2a00      	cmp	r2, #0
 800539c:	f000 80a0 	beq.w	80054e0 <_dtoa_r+0x868>
 80053a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80053a6:	464f      	mov	r7, r9
 80053a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053aa:	2101      	movs	r1, #1
 80053ac:	441a      	add	r2, r3
 80053ae:	4628      	mov	r0, r5
 80053b0:	4499      	add	r9, r3
 80053b2:	9209      	str	r2, [sp, #36]	; 0x24
 80053b4:	f000 fc7e 	bl	8005cb4 <__i2b>
 80053b8:	4606      	mov	r6, r0
 80053ba:	b15f      	cbz	r7, 80053d4 <_dtoa_r+0x75c>
 80053bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053be:	2b00      	cmp	r3, #0
 80053c0:	dd08      	ble.n	80053d4 <_dtoa_r+0x75c>
 80053c2:	42bb      	cmp	r3, r7
 80053c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053c6:	bfa8      	it	ge
 80053c8:	463b      	movge	r3, r7
 80053ca:	eba9 0903 	sub.w	r9, r9, r3
 80053ce:	1aff      	subs	r7, r7, r3
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	9309      	str	r3, [sp, #36]	; 0x24
 80053d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053d6:	b1f3      	cbz	r3, 8005416 <_dtoa_r+0x79e>
 80053d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 80a0 	beq.w	8005520 <_dtoa_r+0x8a8>
 80053e0:	2c00      	cmp	r4, #0
 80053e2:	dd10      	ble.n	8005406 <_dtoa_r+0x78e>
 80053e4:	4631      	mov	r1, r6
 80053e6:	4622      	mov	r2, r4
 80053e8:	4628      	mov	r0, r5
 80053ea:	f000 fd23 	bl	8005e34 <__pow5mult>
 80053ee:	4652      	mov	r2, sl
 80053f0:	4601      	mov	r1, r0
 80053f2:	4606      	mov	r6, r0
 80053f4:	4628      	mov	r0, r5
 80053f6:	f000 fc73 	bl	8005ce0 <__multiply>
 80053fa:	4651      	mov	r1, sl
 80053fc:	4680      	mov	r8, r0
 80053fe:	4628      	mov	r0, r5
 8005400:	f000 fb58 	bl	8005ab4 <_Bfree>
 8005404:	46c2      	mov	sl, r8
 8005406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005408:	1b1a      	subs	r2, r3, r4
 800540a:	d004      	beq.n	8005416 <_dtoa_r+0x79e>
 800540c:	4651      	mov	r1, sl
 800540e:	4628      	mov	r0, r5
 8005410:	f000 fd10 	bl	8005e34 <__pow5mult>
 8005414:	4682      	mov	sl, r0
 8005416:	2101      	movs	r1, #1
 8005418:	4628      	mov	r0, r5
 800541a:	f000 fc4b 	bl	8005cb4 <__i2b>
 800541e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005420:	2b00      	cmp	r3, #0
 8005422:	4604      	mov	r4, r0
 8005424:	f340 8082 	ble.w	800552c <_dtoa_r+0x8b4>
 8005428:	461a      	mov	r2, r3
 800542a:	4601      	mov	r1, r0
 800542c:	4628      	mov	r0, r5
 800542e:	f000 fd01 	bl	8005e34 <__pow5mult>
 8005432:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005434:	2b01      	cmp	r3, #1
 8005436:	4604      	mov	r4, r0
 8005438:	dd7b      	ble.n	8005532 <_dtoa_r+0x8ba>
 800543a:	f04f 0800 	mov.w	r8, #0
 800543e:	6923      	ldr	r3, [r4, #16]
 8005440:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005444:	6918      	ldr	r0, [r3, #16]
 8005446:	f000 fbe7 	bl	8005c18 <__hi0bits>
 800544a:	f1c0 0020 	rsb	r0, r0, #32
 800544e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005450:	4418      	add	r0, r3
 8005452:	f010 001f 	ands.w	r0, r0, #31
 8005456:	f000 8092 	beq.w	800557e <_dtoa_r+0x906>
 800545a:	f1c0 0320 	rsb	r3, r0, #32
 800545e:	2b04      	cmp	r3, #4
 8005460:	f340 8085 	ble.w	800556e <_dtoa_r+0x8f6>
 8005464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005466:	f1c0 001c 	rsb	r0, r0, #28
 800546a:	4403      	add	r3, r0
 800546c:	4481      	add	r9, r0
 800546e:	4407      	add	r7, r0
 8005470:	9309      	str	r3, [sp, #36]	; 0x24
 8005472:	f1b9 0f00 	cmp.w	r9, #0
 8005476:	dd05      	ble.n	8005484 <_dtoa_r+0x80c>
 8005478:	4651      	mov	r1, sl
 800547a:	464a      	mov	r2, r9
 800547c:	4628      	mov	r0, r5
 800547e:	f000 fd33 	bl	8005ee8 <__lshift>
 8005482:	4682      	mov	sl, r0
 8005484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005486:	2b00      	cmp	r3, #0
 8005488:	dd05      	ble.n	8005496 <_dtoa_r+0x81e>
 800548a:	4621      	mov	r1, r4
 800548c:	461a      	mov	r2, r3
 800548e:	4628      	mov	r0, r5
 8005490:	f000 fd2a 	bl	8005ee8 <__lshift>
 8005494:	4604      	mov	r4, r0
 8005496:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005498:	2b00      	cmp	r3, #0
 800549a:	d072      	beq.n	8005582 <_dtoa_r+0x90a>
 800549c:	4621      	mov	r1, r4
 800549e:	4650      	mov	r0, sl
 80054a0:	f000 fd8e 	bl	8005fc0 <__mcmp>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	da6c      	bge.n	8005582 <_dtoa_r+0x90a>
 80054a8:	2300      	movs	r3, #0
 80054aa:	4651      	mov	r1, sl
 80054ac:	220a      	movs	r2, #10
 80054ae:	4628      	mov	r0, r5
 80054b0:	f000 fb22 	bl	8005af8 <__multadd>
 80054b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80054ba:	4682      	mov	sl, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 81ad 	beq.w	800581c <_dtoa_r+0xba4>
 80054c2:	2300      	movs	r3, #0
 80054c4:	4631      	mov	r1, r6
 80054c6:	220a      	movs	r2, #10
 80054c8:	4628      	mov	r0, r5
 80054ca:	f000 fb15 	bl	8005af8 <__multadd>
 80054ce:	9b06      	ldr	r3, [sp, #24]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	4606      	mov	r6, r0
 80054d4:	f300 8093 	bgt.w	80055fe <_dtoa_r+0x986>
 80054d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054da:	2b02      	cmp	r3, #2
 80054dc:	dc59      	bgt.n	8005592 <_dtoa_r+0x91a>
 80054de:	e08e      	b.n	80055fe <_dtoa_r+0x986>
 80054e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80054e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80054e6:	e75d      	b.n	80053a4 <_dtoa_r+0x72c>
 80054e8:	9b08      	ldr	r3, [sp, #32]
 80054ea:	1e5c      	subs	r4, r3, #1
 80054ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054ee:	42a3      	cmp	r3, r4
 80054f0:	bfbf      	itttt	lt
 80054f2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80054f4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80054f6:	940a      	strlt	r4, [sp, #40]	; 0x28
 80054f8:	1ae3      	sublt	r3, r4, r3
 80054fa:	bfb4      	ite	lt
 80054fc:	18d2      	addlt	r2, r2, r3
 80054fe:	1b1c      	subge	r4, r3, r4
 8005500:	9b08      	ldr	r3, [sp, #32]
 8005502:	bfbc      	itt	lt
 8005504:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005506:	2400      	movlt	r4, #0
 8005508:	2b00      	cmp	r3, #0
 800550a:	bfb5      	itete	lt
 800550c:	eba9 0703 	sublt.w	r7, r9, r3
 8005510:	9b08      	ldrge	r3, [sp, #32]
 8005512:	2300      	movlt	r3, #0
 8005514:	464f      	movge	r7, r9
 8005516:	e747      	b.n	80053a8 <_dtoa_r+0x730>
 8005518:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800551a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800551c:	464f      	mov	r7, r9
 800551e:	e74c      	b.n	80053ba <_dtoa_r+0x742>
 8005520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005522:	e773      	b.n	800540c <_dtoa_r+0x794>
 8005524:	3fe00000 	.word	0x3fe00000
 8005528:	40240000 	.word	0x40240000
 800552c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800552e:	2b01      	cmp	r3, #1
 8005530:	dc18      	bgt.n	8005564 <_dtoa_r+0x8ec>
 8005532:	9b04      	ldr	r3, [sp, #16]
 8005534:	b9b3      	cbnz	r3, 8005564 <_dtoa_r+0x8ec>
 8005536:	9b05      	ldr	r3, [sp, #20]
 8005538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800553c:	b993      	cbnz	r3, 8005564 <_dtoa_r+0x8ec>
 800553e:	9b05      	ldr	r3, [sp, #20]
 8005540:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005544:	0d1b      	lsrs	r3, r3, #20
 8005546:	051b      	lsls	r3, r3, #20
 8005548:	b17b      	cbz	r3, 800556a <_dtoa_r+0x8f2>
 800554a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800554c:	3301      	adds	r3, #1
 800554e:	f109 0901 	add.w	r9, r9, #1
 8005552:	9309      	str	r3, [sp, #36]	; 0x24
 8005554:	f04f 0801 	mov.w	r8, #1
 8005558:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800555a:	2b00      	cmp	r3, #0
 800555c:	f47f af6f 	bne.w	800543e <_dtoa_r+0x7c6>
 8005560:	2001      	movs	r0, #1
 8005562:	e774      	b.n	800544e <_dtoa_r+0x7d6>
 8005564:	f04f 0800 	mov.w	r8, #0
 8005568:	e7f6      	b.n	8005558 <_dtoa_r+0x8e0>
 800556a:	4698      	mov	r8, r3
 800556c:	e7f4      	b.n	8005558 <_dtoa_r+0x8e0>
 800556e:	d080      	beq.n	8005472 <_dtoa_r+0x7fa>
 8005570:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005572:	331c      	adds	r3, #28
 8005574:	441a      	add	r2, r3
 8005576:	4499      	add	r9, r3
 8005578:	441f      	add	r7, r3
 800557a:	9209      	str	r2, [sp, #36]	; 0x24
 800557c:	e779      	b.n	8005472 <_dtoa_r+0x7fa>
 800557e:	4603      	mov	r3, r0
 8005580:	e7f6      	b.n	8005570 <_dtoa_r+0x8f8>
 8005582:	9b08      	ldr	r3, [sp, #32]
 8005584:	2b00      	cmp	r3, #0
 8005586:	dc34      	bgt.n	80055f2 <_dtoa_r+0x97a>
 8005588:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800558a:	2b02      	cmp	r3, #2
 800558c:	dd31      	ble.n	80055f2 <_dtoa_r+0x97a>
 800558e:	9b08      	ldr	r3, [sp, #32]
 8005590:	9306      	str	r3, [sp, #24]
 8005592:	9b06      	ldr	r3, [sp, #24]
 8005594:	b963      	cbnz	r3, 80055b0 <_dtoa_r+0x938>
 8005596:	4621      	mov	r1, r4
 8005598:	2205      	movs	r2, #5
 800559a:	4628      	mov	r0, r5
 800559c:	f000 faac 	bl	8005af8 <__multadd>
 80055a0:	4601      	mov	r1, r0
 80055a2:	4604      	mov	r4, r0
 80055a4:	4650      	mov	r0, sl
 80055a6:	f000 fd0b 	bl	8005fc0 <__mcmp>
 80055aa:	2800      	cmp	r0, #0
 80055ac:	f73f adbf 	bgt.w	800512e <_dtoa_r+0x4b6>
 80055b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055b2:	9f03      	ldr	r7, [sp, #12]
 80055b4:	ea6f 0b03 	mvn.w	fp, r3
 80055b8:	f04f 0800 	mov.w	r8, #0
 80055bc:	4621      	mov	r1, r4
 80055be:	4628      	mov	r0, r5
 80055c0:	f000 fa78 	bl	8005ab4 <_Bfree>
 80055c4:	2e00      	cmp	r6, #0
 80055c6:	f43f aead 	beq.w	8005324 <_dtoa_r+0x6ac>
 80055ca:	f1b8 0f00 	cmp.w	r8, #0
 80055ce:	d005      	beq.n	80055dc <_dtoa_r+0x964>
 80055d0:	45b0      	cmp	r8, r6
 80055d2:	d003      	beq.n	80055dc <_dtoa_r+0x964>
 80055d4:	4641      	mov	r1, r8
 80055d6:	4628      	mov	r0, r5
 80055d8:	f000 fa6c 	bl	8005ab4 <_Bfree>
 80055dc:	4631      	mov	r1, r6
 80055de:	4628      	mov	r0, r5
 80055e0:	f000 fa68 	bl	8005ab4 <_Bfree>
 80055e4:	e69e      	b.n	8005324 <_dtoa_r+0x6ac>
 80055e6:	2400      	movs	r4, #0
 80055e8:	4626      	mov	r6, r4
 80055ea:	e7e1      	b.n	80055b0 <_dtoa_r+0x938>
 80055ec:	46c3      	mov	fp, r8
 80055ee:	4626      	mov	r6, r4
 80055f0:	e59d      	b.n	800512e <_dtoa_r+0x4b6>
 80055f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 80c8 	beq.w	800578a <_dtoa_r+0xb12>
 80055fa:	9b08      	ldr	r3, [sp, #32]
 80055fc:	9306      	str	r3, [sp, #24]
 80055fe:	2f00      	cmp	r7, #0
 8005600:	dd05      	ble.n	800560e <_dtoa_r+0x996>
 8005602:	4631      	mov	r1, r6
 8005604:	463a      	mov	r2, r7
 8005606:	4628      	mov	r0, r5
 8005608:	f000 fc6e 	bl	8005ee8 <__lshift>
 800560c:	4606      	mov	r6, r0
 800560e:	f1b8 0f00 	cmp.w	r8, #0
 8005612:	d05b      	beq.n	80056cc <_dtoa_r+0xa54>
 8005614:	6871      	ldr	r1, [r6, #4]
 8005616:	4628      	mov	r0, r5
 8005618:	f000 fa0c 	bl	8005a34 <_Balloc>
 800561c:	4607      	mov	r7, r0
 800561e:	b928      	cbnz	r0, 800562c <_dtoa_r+0x9b4>
 8005620:	4b82      	ldr	r3, [pc, #520]	; (800582c <_dtoa_r+0xbb4>)
 8005622:	4602      	mov	r2, r0
 8005624:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005628:	f7ff bb3a 	b.w	8004ca0 <_dtoa_r+0x28>
 800562c:	6932      	ldr	r2, [r6, #16]
 800562e:	3202      	adds	r2, #2
 8005630:	0092      	lsls	r2, r2, #2
 8005632:	f106 010c 	add.w	r1, r6, #12
 8005636:	300c      	adds	r0, #12
 8005638:	f002 f934 	bl	80078a4 <memcpy>
 800563c:	2201      	movs	r2, #1
 800563e:	4639      	mov	r1, r7
 8005640:	4628      	mov	r0, r5
 8005642:	f000 fc51 	bl	8005ee8 <__lshift>
 8005646:	9b03      	ldr	r3, [sp, #12]
 8005648:	9a03      	ldr	r2, [sp, #12]
 800564a:	3301      	adds	r3, #1
 800564c:	9308      	str	r3, [sp, #32]
 800564e:	9b06      	ldr	r3, [sp, #24]
 8005650:	4413      	add	r3, r2
 8005652:	930b      	str	r3, [sp, #44]	; 0x2c
 8005654:	9b04      	ldr	r3, [sp, #16]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	46b0      	mov	r8, r6
 800565c:	930a      	str	r3, [sp, #40]	; 0x28
 800565e:	4606      	mov	r6, r0
 8005660:	9b08      	ldr	r3, [sp, #32]
 8005662:	4621      	mov	r1, r4
 8005664:	3b01      	subs	r3, #1
 8005666:	4650      	mov	r0, sl
 8005668:	9304      	str	r3, [sp, #16]
 800566a:	f7ff fa7f 	bl	8004b6c <quorem>
 800566e:	4641      	mov	r1, r8
 8005670:	9006      	str	r0, [sp, #24]
 8005672:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005676:	4650      	mov	r0, sl
 8005678:	f000 fca2 	bl	8005fc0 <__mcmp>
 800567c:	4632      	mov	r2, r6
 800567e:	9009      	str	r0, [sp, #36]	; 0x24
 8005680:	4621      	mov	r1, r4
 8005682:	4628      	mov	r0, r5
 8005684:	f000 fcb8 	bl	8005ff8 <__mdiff>
 8005688:	68c2      	ldr	r2, [r0, #12]
 800568a:	4607      	mov	r7, r0
 800568c:	bb02      	cbnz	r2, 80056d0 <_dtoa_r+0xa58>
 800568e:	4601      	mov	r1, r0
 8005690:	4650      	mov	r0, sl
 8005692:	f000 fc95 	bl	8005fc0 <__mcmp>
 8005696:	4602      	mov	r2, r0
 8005698:	4639      	mov	r1, r7
 800569a:	4628      	mov	r0, r5
 800569c:	920c      	str	r2, [sp, #48]	; 0x30
 800569e:	f000 fa09 	bl	8005ab4 <_Bfree>
 80056a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056a6:	9f08      	ldr	r7, [sp, #32]
 80056a8:	ea43 0102 	orr.w	r1, r3, r2
 80056ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ae:	4319      	orrs	r1, r3
 80056b0:	d110      	bne.n	80056d4 <_dtoa_r+0xa5c>
 80056b2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80056b6:	d029      	beq.n	800570c <_dtoa_r+0xa94>
 80056b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	dd02      	ble.n	80056c4 <_dtoa_r+0xa4c>
 80056be:	9b06      	ldr	r3, [sp, #24]
 80056c0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80056c4:	9b04      	ldr	r3, [sp, #16]
 80056c6:	f883 9000 	strb.w	r9, [r3]
 80056ca:	e777      	b.n	80055bc <_dtoa_r+0x944>
 80056cc:	4630      	mov	r0, r6
 80056ce:	e7ba      	b.n	8005646 <_dtoa_r+0x9ce>
 80056d0:	2201      	movs	r2, #1
 80056d2:	e7e1      	b.n	8005698 <_dtoa_r+0xa20>
 80056d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	db04      	blt.n	80056e4 <_dtoa_r+0xa6c>
 80056da:	9922      	ldr	r1, [sp, #136]	; 0x88
 80056dc:	430b      	orrs	r3, r1
 80056de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80056e0:	430b      	orrs	r3, r1
 80056e2:	d120      	bne.n	8005726 <_dtoa_r+0xaae>
 80056e4:	2a00      	cmp	r2, #0
 80056e6:	dded      	ble.n	80056c4 <_dtoa_r+0xa4c>
 80056e8:	4651      	mov	r1, sl
 80056ea:	2201      	movs	r2, #1
 80056ec:	4628      	mov	r0, r5
 80056ee:	f000 fbfb 	bl	8005ee8 <__lshift>
 80056f2:	4621      	mov	r1, r4
 80056f4:	4682      	mov	sl, r0
 80056f6:	f000 fc63 	bl	8005fc0 <__mcmp>
 80056fa:	2800      	cmp	r0, #0
 80056fc:	dc03      	bgt.n	8005706 <_dtoa_r+0xa8e>
 80056fe:	d1e1      	bne.n	80056c4 <_dtoa_r+0xa4c>
 8005700:	f019 0f01 	tst.w	r9, #1
 8005704:	d0de      	beq.n	80056c4 <_dtoa_r+0xa4c>
 8005706:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800570a:	d1d8      	bne.n	80056be <_dtoa_r+0xa46>
 800570c:	9a04      	ldr	r2, [sp, #16]
 800570e:	2339      	movs	r3, #57	; 0x39
 8005710:	7013      	strb	r3, [r2, #0]
 8005712:	463b      	mov	r3, r7
 8005714:	461f      	mov	r7, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800571c:	2a39      	cmp	r2, #57	; 0x39
 800571e:	d06c      	beq.n	80057fa <_dtoa_r+0xb82>
 8005720:	3201      	adds	r2, #1
 8005722:	701a      	strb	r2, [r3, #0]
 8005724:	e74a      	b.n	80055bc <_dtoa_r+0x944>
 8005726:	2a00      	cmp	r2, #0
 8005728:	dd07      	ble.n	800573a <_dtoa_r+0xac2>
 800572a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800572e:	d0ed      	beq.n	800570c <_dtoa_r+0xa94>
 8005730:	9a04      	ldr	r2, [sp, #16]
 8005732:	f109 0301 	add.w	r3, r9, #1
 8005736:	7013      	strb	r3, [r2, #0]
 8005738:	e740      	b.n	80055bc <_dtoa_r+0x944>
 800573a:	9b08      	ldr	r3, [sp, #32]
 800573c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800573e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005742:	4293      	cmp	r3, r2
 8005744:	d043      	beq.n	80057ce <_dtoa_r+0xb56>
 8005746:	4651      	mov	r1, sl
 8005748:	2300      	movs	r3, #0
 800574a:	220a      	movs	r2, #10
 800574c:	4628      	mov	r0, r5
 800574e:	f000 f9d3 	bl	8005af8 <__multadd>
 8005752:	45b0      	cmp	r8, r6
 8005754:	4682      	mov	sl, r0
 8005756:	f04f 0300 	mov.w	r3, #0
 800575a:	f04f 020a 	mov.w	r2, #10
 800575e:	4641      	mov	r1, r8
 8005760:	4628      	mov	r0, r5
 8005762:	d107      	bne.n	8005774 <_dtoa_r+0xafc>
 8005764:	f000 f9c8 	bl	8005af8 <__multadd>
 8005768:	4680      	mov	r8, r0
 800576a:	4606      	mov	r6, r0
 800576c:	9b08      	ldr	r3, [sp, #32]
 800576e:	3301      	adds	r3, #1
 8005770:	9308      	str	r3, [sp, #32]
 8005772:	e775      	b.n	8005660 <_dtoa_r+0x9e8>
 8005774:	f000 f9c0 	bl	8005af8 <__multadd>
 8005778:	4631      	mov	r1, r6
 800577a:	4680      	mov	r8, r0
 800577c:	2300      	movs	r3, #0
 800577e:	220a      	movs	r2, #10
 8005780:	4628      	mov	r0, r5
 8005782:	f000 f9b9 	bl	8005af8 <__multadd>
 8005786:	4606      	mov	r6, r0
 8005788:	e7f0      	b.n	800576c <_dtoa_r+0xaf4>
 800578a:	9b08      	ldr	r3, [sp, #32]
 800578c:	9306      	str	r3, [sp, #24]
 800578e:	9f03      	ldr	r7, [sp, #12]
 8005790:	4621      	mov	r1, r4
 8005792:	4650      	mov	r0, sl
 8005794:	f7ff f9ea 	bl	8004b6c <quorem>
 8005798:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800579c:	9b03      	ldr	r3, [sp, #12]
 800579e:	f807 9b01 	strb.w	r9, [r7], #1
 80057a2:	1afa      	subs	r2, r7, r3
 80057a4:	9b06      	ldr	r3, [sp, #24]
 80057a6:	4293      	cmp	r3, r2
 80057a8:	dd07      	ble.n	80057ba <_dtoa_r+0xb42>
 80057aa:	4651      	mov	r1, sl
 80057ac:	2300      	movs	r3, #0
 80057ae:	220a      	movs	r2, #10
 80057b0:	4628      	mov	r0, r5
 80057b2:	f000 f9a1 	bl	8005af8 <__multadd>
 80057b6:	4682      	mov	sl, r0
 80057b8:	e7ea      	b.n	8005790 <_dtoa_r+0xb18>
 80057ba:	9b06      	ldr	r3, [sp, #24]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	bfc8      	it	gt
 80057c0:	461f      	movgt	r7, r3
 80057c2:	9b03      	ldr	r3, [sp, #12]
 80057c4:	bfd8      	it	le
 80057c6:	2701      	movle	r7, #1
 80057c8:	441f      	add	r7, r3
 80057ca:	f04f 0800 	mov.w	r8, #0
 80057ce:	4651      	mov	r1, sl
 80057d0:	2201      	movs	r2, #1
 80057d2:	4628      	mov	r0, r5
 80057d4:	f000 fb88 	bl	8005ee8 <__lshift>
 80057d8:	4621      	mov	r1, r4
 80057da:	4682      	mov	sl, r0
 80057dc:	f000 fbf0 	bl	8005fc0 <__mcmp>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	dc96      	bgt.n	8005712 <_dtoa_r+0xa9a>
 80057e4:	d102      	bne.n	80057ec <_dtoa_r+0xb74>
 80057e6:	f019 0f01 	tst.w	r9, #1
 80057ea:	d192      	bne.n	8005712 <_dtoa_r+0xa9a>
 80057ec:	463b      	mov	r3, r7
 80057ee:	461f      	mov	r7, r3
 80057f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057f4:	2a30      	cmp	r2, #48	; 0x30
 80057f6:	d0fa      	beq.n	80057ee <_dtoa_r+0xb76>
 80057f8:	e6e0      	b.n	80055bc <_dtoa_r+0x944>
 80057fa:	9a03      	ldr	r2, [sp, #12]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d189      	bne.n	8005714 <_dtoa_r+0xa9c>
 8005800:	f10b 0b01 	add.w	fp, fp, #1
 8005804:	2331      	movs	r3, #49	; 0x31
 8005806:	e796      	b.n	8005736 <_dtoa_r+0xabe>
 8005808:	4b09      	ldr	r3, [pc, #36]	; (8005830 <_dtoa_r+0xbb8>)
 800580a:	f7ff baa1 	b.w	8004d50 <_dtoa_r+0xd8>
 800580e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005810:	2b00      	cmp	r3, #0
 8005812:	f47f aa79 	bne.w	8004d08 <_dtoa_r+0x90>
 8005816:	4b07      	ldr	r3, [pc, #28]	; (8005834 <_dtoa_r+0xbbc>)
 8005818:	f7ff ba9a 	b.w	8004d50 <_dtoa_r+0xd8>
 800581c:	9b06      	ldr	r3, [sp, #24]
 800581e:	2b00      	cmp	r3, #0
 8005820:	dcb5      	bgt.n	800578e <_dtoa_r+0xb16>
 8005822:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005824:	2b02      	cmp	r3, #2
 8005826:	f73f aeb4 	bgt.w	8005592 <_dtoa_r+0x91a>
 800582a:	e7b0      	b.n	800578e <_dtoa_r+0xb16>
 800582c:	0800826d 	.word	0x0800826d
 8005830:	080081c8 	.word	0x080081c8
 8005834:	080081f1 	.word	0x080081f1

08005838 <_free_r>:
 8005838:	b538      	push	{r3, r4, r5, lr}
 800583a:	4605      	mov	r5, r0
 800583c:	2900      	cmp	r1, #0
 800583e:	d041      	beq.n	80058c4 <_free_r+0x8c>
 8005840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005844:	1f0c      	subs	r4, r1, #4
 8005846:	2b00      	cmp	r3, #0
 8005848:	bfb8      	it	lt
 800584a:	18e4      	addlt	r4, r4, r3
 800584c:	f000 f8e6 	bl	8005a1c <__malloc_lock>
 8005850:	4a1d      	ldr	r2, [pc, #116]	; (80058c8 <_free_r+0x90>)
 8005852:	6813      	ldr	r3, [r2, #0]
 8005854:	b933      	cbnz	r3, 8005864 <_free_r+0x2c>
 8005856:	6063      	str	r3, [r4, #4]
 8005858:	6014      	str	r4, [r2, #0]
 800585a:	4628      	mov	r0, r5
 800585c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005860:	f000 b8e2 	b.w	8005a28 <__malloc_unlock>
 8005864:	42a3      	cmp	r3, r4
 8005866:	d908      	bls.n	800587a <_free_r+0x42>
 8005868:	6820      	ldr	r0, [r4, #0]
 800586a:	1821      	adds	r1, r4, r0
 800586c:	428b      	cmp	r3, r1
 800586e:	bf01      	itttt	eq
 8005870:	6819      	ldreq	r1, [r3, #0]
 8005872:	685b      	ldreq	r3, [r3, #4]
 8005874:	1809      	addeq	r1, r1, r0
 8005876:	6021      	streq	r1, [r4, #0]
 8005878:	e7ed      	b.n	8005856 <_free_r+0x1e>
 800587a:	461a      	mov	r2, r3
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	b10b      	cbz	r3, 8005884 <_free_r+0x4c>
 8005880:	42a3      	cmp	r3, r4
 8005882:	d9fa      	bls.n	800587a <_free_r+0x42>
 8005884:	6811      	ldr	r1, [r2, #0]
 8005886:	1850      	adds	r0, r2, r1
 8005888:	42a0      	cmp	r0, r4
 800588a:	d10b      	bne.n	80058a4 <_free_r+0x6c>
 800588c:	6820      	ldr	r0, [r4, #0]
 800588e:	4401      	add	r1, r0
 8005890:	1850      	adds	r0, r2, r1
 8005892:	4283      	cmp	r3, r0
 8005894:	6011      	str	r1, [r2, #0]
 8005896:	d1e0      	bne.n	800585a <_free_r+0x22>
 8005898:	6818      	ldr	r0, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	6053      	str	r3, [r2, #4]
 800589e:	4408      	add	r0, r1
 80058a0:	6010      	str	r0, [r2, #0]
 80058a2:	e7da      	b.n	800585a <_free_r+0x22>
 80058a4:	d902      	bls.n	80058ac <_free_r+0x74>
 80058a6:	230c      	movs	r3, #12
 80058a8:	602b      	str	r3, [r5, #0]
 80058aa:	e7d6      	b.n	800585a <_free_r+0x22>
 80058ac:	6820      	ldr	r0, [r4, #0]
 80058ae:	1821      	adds	r1, r4, r0
 80058b0:	428b      	cmp	r3, r1
 80058b2:	bf04      	itt	eq
 80058b4:	6819      	ldreq	r1, [r3, #0]
 80058b6:	685b      	ldreq	r3, [r3, #4]
 80058b8:	6063      	str	r3, [r4, #4]
 80058ba:	bf04      	itt	eq
 80058bc:	1809      	addeq	r1, r1, r0
 80058be:	6021      	streq	r1, [r4, #0]
 80058c0:	6054      	str	r4, [r2, #4]
 80058c2:	e7ca      	b.n	800585a <_free_r+0x22>
 80058c4:	bd38      	pop	{r3, r4, r5, pc}
 80058c6:	bf00      	nop
 80058c8:	200003d0 	.word	0x200003d0

080058cc <malloc>:
 80058cc:	4b02      	ldr	r3, [pc, #8]	; (80058d8 <malloc+0xc>)
 80058ce:	4601      	mov	r1, r0
 80058d0:	6818      	ldr	r0, [r3, #0]
 80058d2:	f000 b823 	b.w	800591c <_malloc_r>
 80058d6:	bf00      	nop
 80058d8:	20000064 	.word	0x20000064

080058dc <sbrk_aligned>:
 80058dc:	b570      	push	{r4, r5, r6, lr}
 80058de:	4e0e      	ldr	r6, [pc, #56]	; (8005918 <sbrk_aligned+0x3c>)
 80058e0:	460c      	mov	r4, r1
 80058e2:	6831      	ldr	r1, [r6, #0]
 80058e4:	4605      	mov	r5, r0
 80058e6:	b911      	cbnz	r1, 80058ee <sbrk_aligned+0x12>
 80058e8:	f001 ffcc 	bl	8007884 <_sbrk_r>
 80058ec:	6030      	str	r0, [r6, #0]
 80058ee:	4621      	mov	r1, r4
 80058f0:	4628      	mov	r0, r5
 80058f2:	f001 ffc7 	bl	8007884 <_sbrk_r>
 80058f6:	1c43      	adds	r3, r0, #1
 80058f8:	d00a      	beq.n	8005910 <sbrk_aligned+0x34>
 80058fa:	1cc4      	adds	r4, r0, #3
 80058fc:	f024 0403 	bic.w	r4, r4, #3
 8005900:	42a0      	cmp	r0, r4
 8005902:	d007      	beq.n	8005914 <sbrk_aligned+0x38>
 8005904:	1a21      	subs	r1, r4, r0
 8005906:	4628      	mov	r0, r5
 8005908:	f001 ffbc 	bl	8007884 <_sbrk_r>
 800590c:	3001      	adds	r0, #1
 800590e:	d101      	bne.n	8005914 <sbrk_aligned+0x38>
 8005910:	f04f 34ff 	mov.w	r4, #4294967295
 8005914:	4620      	mov	r0, r4
 8005916:	bd70      	pop	{r4, r5, r6, pc}
 8005918:	200003d4 	.word	0x200003d4

0800591c <_malloc_r>:
 800591c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005920:	1ccd      	adds	r5, r1, #3
 8005922:	f025 0503 	bic.w	r5, r5, #3
 8005926:	3508      	adds	r5, #8
 8005928:	2d0c      	cmp	r5, #12
 800592a:	bf38      	it	cc
 800592c:	250c      	movcc	r5, #12
 800592e:	2d00      	cmp	r5, #0
 8005930:	4607      	mov	r7, r0
 8005932:	db01      	blt.n	8005938 <_malloc_r+0x1c>
 8005934:	42a9      	cmp	r1, r5
 8005936:	d905      	bls.n	8005944 <_malloc_r+0x28>
 8005938:	230c      	movs	r3, #12
 800593a:	603b      	str	r3, [r7, #0]
 800593c:	2600      	movs	r6, #0
 800593e:	4630      	mov	r0, r6
 8005940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005944:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005a18 <_malloc_r+0xfc>
 8005948:	f000 f868 	bl	8005a1c <__malloc_lock>
 800594c:	f8d8 3000 	ldr.w	r3, [r8]
 8005950:	461c      	mov	r4, r3
 8005952:	bb5c      	cbnz	r4, 80059ac <_malloc_r+0x90>
 8005954:	4629      	mov	r1, r5
 8005956:	4638      	mov	r0, r7
 8005958:	f7ff ffc0 	bl	80058dc <sbrk_aligned>
 800595c:	1c43      	adds	r3, r0, #1
 800595e:	4604      	mov	r4, r0
 8005960:	d155      	bne.n	8005a0e <_malloc_r+0xf2>
 8005962:	f8d8 4000 	ldr.w	r4, [r8]
 8005966:	4626      	mov	r6, r4
 8005968:	2e00      	cmp	r6, #0
 800596a:	d145      	bne.n	80059f8 <_malloc_r+0xdc>
 800596c:	2c00      	cmp	r4, #0
 800596e:	d048      	beq.n	8005a02 <_malloc_r+0xe6>
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	4631      	mov	r1, r6
 8005974:	4638      	mov	r0, r7
 8005976:	eb04 0903 	add.w	r9, r4, r3
 800597a:	f001 ff83 	bl	8007884 <_sbrk_r>
 800597e:	4581      	cmp	r9, r0
 8005980:	d13f      	bne.n	8005a02 <_malloc_r+0xe6>
 8005982:	6821      	ldr	r1, [r4, #0]
 8005984:	1a6d      	subs	r5, r5, r1
 8005986:	4629      	mov	r1, r5
 8005988:	4638      	mov	r0, r7
 800598a:	f7ff ffa7 	bl	80058dc <sbrk_aligned>
 800598e:	3001      	adds	r0, #1
 8005990:	d037      	beq.n	8005a02 <_malloc_r+0xe6>
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	442b      	add	r3, r5
 8005996:	6023      	str	r3, [r4, #0]
 8005998:	f8d8 3000 	ldr.w	r3, [r8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d038      	beq.n	8005a12 <_malloc_r+0xf6>
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	42a2      	cmp	r2, r4
 80059a4:	d12b      	bne.n	80059fe <_malloc_r+0xe2>
 80059a6:	2200      	movs	r2, #0
 80059a8:	605a      	str	r2, [r3, #4]
 80059aa:	e00f      	b.n	80059cc <_malloc_r+0xb0>
 80059ac:	6822      	ldr	r2, [r4, #0]
 80059ae:	1b52      	subs	r2, r2, r5
 80059b0:	d41f      	bmi.n	80059f2 <_malloc_r+0xd6>
 80059b2:	2a0b      	cmp	r2, #11
 80059b4:	d917      	bls.n	80059e6 <_malloc_r+0xca>
 80059b6:	1961      	adds	r1, r4, r5
 80059b8:	42a3      	cmp	r3, r4
 80059ba:	6025      	str	r5, [r4, #0]
 80059bc:	bf18      	it	ne
 80059be:	6059      	strne	r1, [r3, #4]
 80059c0:	6863      	ldr	r3, [r4, #4]
 80059c2:	bf08      	it	eq
 80059c4:	f8c8 1000 	streq.w	r1, [r8]
 80059c8:	5162      	str	r2, [r4, r5]
 80059ca:	604b      	str	r3, [r1, #4]
 80059cc:	4638      	mov	r0, r7
 80059ce:	f104 060b 	add.w	r6, r4, #11
 80059d2:	f000 f829 	bl	8005a28 <__malloc_unlock>
 80059d6:	f026 0607 	bic.w	r6, r6, #7
 80059da:	1d23      	adds	r3, r4, #4
 80059dc:	1af2      	subs	r2, r6, r3
 80059de:	d0ae      	beq.n	800593e <_malloc_r+0x22>
 80059e0:	1b9b      	subs	r3, r3, r6
 80059e2:	50a3      	str	r3, [r4, r2]
 80059e4:	e7ab      	b.n	800593e <_malloc_r+0x22>
 80059e6:	42a3      	cmp	r3, r4
 80059e8:	6862      	ldr	r2, [r4, #4]
 80059ea:	d1dd      	bne.n	80059a8 <_malloc_r+0x8c>
 80059ec:	f8c8 2000 	str.w	r2, [r8]
 80059f0:	e7ec      	b.n	80059cc <_malloc_r+0xb0>
 80059f2:	4623      	mov	r3, r4
 80059f4:	6864      	ldr	r4, [r4, #4]
 80059f6:	e7ac      	b.n	8005952 <_malloc_r+0x36>
 80059f8:	4634      	mov	r4, r6
 80059fa:	6876      	ldr	r6, [r6, #4]
 80059fc:	e7b4      	b.n	8005968 <_malloc_r+0x4c>
 80059fe:	4613      	mov	r3, r2
 8005a00:	e7cc      	b.n	800599c <_malloc_r+0x80>
 8005a02:	230c      	movs	r3, #12
 8005a04:	603b      	str	r3, [r7, #0]
 8005a06:	4638      	mov	r0, r7
 8005a08:	f000 f80e 	bl	8005a28 <__malloc_unlock>
 8005a0c:	e797      	b.n	800593e <_malloc_r+0x22>
 8005a0e:	6025      	str	r5, [r4, #0]
 8005a10:	e7dc      	b.n	80059cc <_malloc_r+0xb0>
 8005a12:	605b      	str	r3, [r3, #4]
 8005a14:	deff      	udf	#255	; 0xff
 8005a16:	bf00      	nop
 8005a18:	200003d0 	.word	0x200003d0

08005a1c <__malloc_lock>:
 8005a1c:	4801      	ldr	r0, [pc, #4]	; (8005a24 <__malloc_lock+0x8>)
 8005a1e:	f7ff b89e 	b.w	8004b5e <__retarget_lock_acquire_recursive>
 8005a22:	bf00      	nop
 8005a24:	200003cc 	.word	0x200003cc

08005a28 <__malloc_unlock>:
 8005a28:	4801      	ldr	r0, [pc, #4]	; (8005a30 <__malloc_unlock+0x8>)
 8005a2a:	f7ff b899 	b.w	8004b60 <__retarget_lock_release_recursive>
 8005a2e:	bf00      	nop
 8005a30:	200003cc 	.word	0x200003cc

08005a34 <_Balloc>:
 8005a34:	b570      	push	{r4, r5, r6, lr}
 8005a36:	69c6      	ldr	r6, [r0, #28]
 8005a38:	4604      	mov	r4, r0
 8005a3a:	460d      	mov	r5, r1
 8005a3c:	b976      	cbnz	r6, 8005a5c <_Balloc+0x28>
 8005a3e:	2010      	movs	r0, #16
 8005a40:	f7ff ff44 	bl	80058cc <malloc>
 8005a44:	4602      	mov	r2, r0
 8005a46:	61e0      	str	r0, [r4, #28]
 8005a48:	b920      	cbnz	r0, 8005a54 <_Balloc+0x20>
 8005a4a:	4b18      	ldr	r3, [pc, #96]	; (8005aac <_Balloc+0x78>)
 8005a4c:	4818      	ldr	r0, [pc, #96]	; (8005ab0 <_Balloc+0x7c>)
 8005a4e:	216b      	movs	r1, #107	; 0x6b
 8005a50:	f001 ff3c 	bl	80078cc <__assert_func>
 8005a54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a58:	6006      	str	r6, [r0, #0]
 8005a5a:	60c6      	str	r6, [r0, #12]
 8005a5c:	69e6      	ldr	r6, [r4, #28]
 8005a5e:	68f3      	ldr	r3, [r6, #12]
 8005a60:	b183      	cbz	r3, 8005a84 <_Balloc+0x50>
 8005a62:	69e3      	ldr	r3, [r4, #28]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a6a:	b9b8      	cbnz	r0, 8005a9c <_Balloc+0x68>
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	fa01 f605 	lsl.w	r6, r1, r5
 8005a72:	1d72      	adds	r2, r6, #5
 8005a74:	0092      	lsls	r2, r2, #2
 8005a76:	4620      	mov	r0, r4
 8005a78:	f001 ff46 	bl	8007908 <_calloc_r>
 8005a7c:	b160      	cbz	r0, 8005a98 <_Balloc+0x64>
 8005a7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a82:	e00e      	b.n	8005aa2 <_Balloc+0x6e>
 8005a84:	2221      	movs	r2, #33	; 0x21
 8005a86:	2104      	movs	r1, #4
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f001 ff3d 	bl	8007908 <_calloc_r>
 8005a8e:	69e3      	ldr	r3, [r4, #28]
 8005a90:	60f0      	str	r0, [r6, #12]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1e4      	bne.n	8005a62 <_Balloc+0x2e>
 8005a98:	2000      	movs	r0, #0
 8005a9a:	bd70      	pop	{r4, r5, r6, pc}
 8005a9c:	6802      	ldr	r2, [r0, #0]
 8005a9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005aa8:	e7f7      	b.n	8005a9a <_Balloc+0x66>
 8005aaa:	bf00      	nop
 8005aac:	080081fe 	.word	0x080081fe
 8005ab0:	0800827e 	.word	0x0800827e

08005ab4 <_Bfree>:
 8005ab4:	b570      	push	{r4, r5, r6, lr}
 8005ab6:	69c6      	ldr	r6, [r0, #28]
 8005ab8:	4605      	mov	r5, r0
 8005aba:	460c      	mov	r4, r1
 8005abc:	b976      	cbnz	r6, 8005adc <_Bfree+0x28>
 8005abe:	2010      	movs	r0, #16
 8005ac0:	f7ff ff04 	bl	80058cc <malloc>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	61e8      	str	r0, [r5, #28]
 8005ac8:	b920      	cbnz	r0, 8005ad4 <_Bfree+0x20>
 8005aca:	4b09      	ldr	r3, [pc, #36]	; (8005af0 <_Bfree+0x3c>)
 8005acc:	4809      	ldr	r0, [pc, #36]	; (8005af4 <_Bfree+0x40>)
 8005ace:	218f      	movs	r1, #143	; 0x8f
 8005ad0:	f001 fefc 	bl	80078cc <__assert_func>
 8005ad4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ad8:	6006      	str	r6, [r0, #0]
 8005ada:	60c6      	str	r6, [r0, #12]
 8005adc:	b13c      	cbz	r4, 8005aee <_Bfree+0x3a>
 8005ade:	69eb      	ldr	r3, [r5, #28]
 8005ae0:	6862      	ldr	r2, [r4, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ae8:	6021      	str	r1, [r4, #0]
 8005aea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005aee:	bd70      	pop	{r4, r5, r6, pc}
 8005af0:	080081fe 	.word	0x080081fe
 8005af4:	0800827e 	.word	0x0800827e

08005af8 <__multadd>:
 8005af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005afc:	690d      	ldr	r5, [r1, #16]
 8005afe:	4607      	mov	r7, r0
 8005b00:	460c      	mov	r4, r1
 8005b02:	461e      	mov	r6, r3
 8005b04:	f101 0c14 	add.w	ip, r1, #20
 8005b08:	2000      	movs	r0, #0
 8005b0a:	f8dc 3000 	ldr.w	r3, [ip]
 8005b0e:	b299      	uxth	r1, r3
 8005b10:	fb02 6101 	mla	r1, r2, r1, r6
 8005b14:	0c1e      	lsrs	r6, r3, #16
 8005b16:	0c0b      	lsrs	r3, r1, #16
 8005b18:	fb02 3306 	mla	r3, r2, r6, r3
 8005b1c:	b289      	uxth	r1, r1
 8005b1e:	3001      	adds	r0, #1
 8005b20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b24:	4285      	cmp	r5, r0
 8005b26:	f84c 1b04 	str.w	r1, [ip], #4
 8005b2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b2e:	dcec      	bgt.n	8005b0a <__multadd+0x12>
 8005b30:	b30e      	cbz	r6, 8005b76 <__multadd+0x7e>
 8005b32:	68a3      	ldr	r3, [r4, #8]
 8005b34:	42ab      	cmp	r3, r5
 8005b36:	dc19      	bgt.n	8005b6c <__multadd+0x74>
 8005b38:	6861      	ldr	r1, [r4, #4]
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	3101      	adds	r1, #1
 8005b3e:	f7ff ff79 	bl	8005a34 <_Balloc>
 8005b42:	4680      	mov	r8, r0
 8005b44:	b928      	cbnz	r0, 8005b52 <__multadd+0x5a>
 8005b46:	4602      	mov	r2, r0
 8005b48:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <__multadd+0x84>)
 8005b4a:	480d      	ldr	r0, [pc, #52]	; (8005b80 <__multadd+0x88>)
 8005b4c:	21ba      	movs	r1, #186	; 0xba
 8005b4e:	f001 febd 	bl	80078cc <__assert_func>
 8005b52:	6922      	ldr	r2, [r4, #16]
 8005b54:	3202      	adds	r2, #2
 8005b56:	f104 010c 	add.w	r1, r4, #12
 8005b5a:	0092      	lsls	r2, r2, #2
 8005b5c:	300c      	adds	r0, #12
 8005b5e:	f001 fea1 	bl	80078a4 <memcpy>
 8005b62:	4621      	mov	r1, r4
 8005b64:	4638      	mov	r0, r7
 8005b66:	f7ff ffa5 	bl	8005ab4 <_Bfree>
 8005b6a:	4644      	mov	r4, r8
 8005b6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b70:	3501      	adds	r5, #1
 8005b72:	615e      	str	r6, [r3, #20]
 8005b74:	6125      	str	r5, [r4, #16]
 8005b76:	4620      	mov	r0, r4
 8005b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b7c:	0800826d 	.word	0x0800826d
 8005b80:	0800827e 	.word	0x0800827e

08005b84 <__s2b>:
 8005b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b88:	460c      	mov	r4, r1
 8005b8a:	4615      	mov	r5, r2
 8005b8c:	461f      	mov	r7, r3
 8005b8e:	2209      	movs	r2, #9
 8005b90:	3308      	adds	r3, #8
 8005b92:	4606      	mov	r6, r0
 8005b94:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b98:	2100      	movs	r1, #0
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	db09      	blt.n	8005bb4 <__s2b+0x30>
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	f7ff ff47 	bl	8005a34 <_Balloc>
 8005ba6:	b940      	cbnz	r0, 8005bba <__s2b+0x36>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	4b19      	ldr	r3, [pc, #100]	; (8005c10 <__s2b+0x8c>)
 8005bac:	4819      	ldr	r0, [pc, #100]	; (8005c14 <__s2b+0x90>)
 8005bae:	21d3      	movs	r1, #211	; 0xd3
 8005bb0:	f001 fe8c 	bl	80078cc <__assert_func>
 8005bb4:	0052      	lsls	r2, r2, #1
 8005bb6:	3101      	adds	r1, #1
 8005bb8:	e7f0      	b.n	8005b9c <__s2b+0x18>
 8005bba:	9b08      	ldr	r3, [sp, #32]
 8005bbc:	6143      	str	r3, [r0, #20]
 8005bbe:	2d09      	cmp	r5, #9
 8005bc0:	f04f 0301 	mov.w	r3, #1
 8005bc4:	6103      	str	r3, [r0, #16]
 8005bc6:	dd16      	ble.n	8005bf6 <__s2b+0x72>
 8005bc8:	f104 0909 	add.w	r9, r4, #9
 8005bcc:	46c8      	mov	r8, r9
 8005bce:	442c      	add	r4, r5
 8005bd0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005bd4:	4601      	mov	r1, r0
 8005bd6:	3b30      	subs	r3, #48	; 0x30
 8005bd8:	220a      	movs	r2, #10
 8005bda:	4630      	mov	r0, r6
 8005bdc:	f7ff ff8c 	bl	8005af8 <__multadd>
 8005be0:	45a0      	cmp	r8, r4
 8005be2:	d1f5      	bne.n	8005bd0 <__s2b+0x4c>
 8005be4:	f1a5 0408 	sub.w	r4, r5, #8
 8005be8:	444c      	add	r4, r9
 8005bea:	1b2d      	subs	r5, r5, r4
 8005bec:	1963      	adds	r3, r4, r5
 8005bee:	42bb      	cmp	r3, r7
 8005bf0:	db04      	blt.n	8005bfc <__s2b+0x78>
 8005bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bf6:	340a      	adds	r4, #10
 8005bf8:	2509      	movs	r5, #9
 8005bfa:	e7f6      	b.n	8005bea <__s2b+0x66>
 8005bfc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005c00:	4601      	mov	r1, r0
 8005c02:	3b30      	subs	r3, #48	; 0x30
 8005c04:	220a      	movs	r2, #10
 8005c06:	4630      	mov	r0, r6
 8005c08:	f7ff ff76 	bl	8005af8 <__multadd>
 8005c0c:	e7ee      	b.n	8005bec <__s2b+0x68>
 8005c0e:	bf00      	nop
 8005c10:	0800826d 	.word	0x0800826d
 8005c14:	0800827e 	.word	0x0800827e

08005c18 <__hi0bits>:
 8005c18:	0c02      	lsrs	r2, r0, #16
 8005c1a:	0412      	lsls	r2, r2, #16
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	b9ca      	cbnz	r2, 8005c54 <__hi0bits+0x3c>
 8005c20:	0403      	lsls	r3, r0, #16
 8005c22:	2010      	movs	r0, #16
 8005c24:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005c28:	bf04      	itt	eq
 8005c2a:	021b      	lsleq	r3, r3, #8
 8005c2c:	3008      	addeq	r0, #8
 8005c2e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005c32:	bf04      	itt	eq
 8005c34:	011b      	lsleq	r3, r3, #4
 8005c36:	3004      	addeq	r0, #4
 8005c38:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005c3c:	bf04      	itt	eq
 8005c3e:	009b      	lsleq	r3, r3, #2
 8005c40:	3002      	addeq	r0, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	db05      	blt.n	8005c52 <__hi0bits+0x3a>
 8005c46:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005c4a:	f100 0001 	add.w	r0, r0, #1
 8005c4e:	bf08      	it	eq
 8005c50:	2020      	moveq	r0, #32
 8005c52:	4770      	bx	lr
 8005c54:	2000      	movs	r0, #0
 8005c56:	e7e5      	b.n	8005c24 <__hi0bits+0xc>

08005c58 <__lo0bits>:
 8005c58:	6803      	ldr	r3, [r0, #0]
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	f013 0007 	ands.w	r0, r3, #7
 8005c60:	d00b      	beq.n	8005c7a <__lo0bits+0x22>
 8005c62:	07d9      	lsls	r1, r3, #31
 8005c64:	d421      	bmi.n	8005caa <__lo0bits+0x52>
 8005c66:	0798      	lsls	r0, r3, #30
 8005c68:	bf49      	itett	mi
 8005c6a:	085b      	lsrmi	r3, r3, #1
 8005c6c:	089b      	lsrpl	r3, r3, #2
 8005c6e:	2001      	movmi	r0, #1
 8005c70:	6013      	strmi	r3, [r2, #0]
 8005c72:	bf5c      	itt	pl
 8005c74:	6013      	strpl	r3, [r2, #0]
 8005c76:	2002      	movpl	r0, #2
 8005c78:	4770      	bx	lr
 8005c7a:	b299      	uxth	r1, r3
 8005c7c:	b909      	cbnz	r1, 8005c82 <__lo0bits+0x2a>
 8005c7e:	0c1b      	lsrs	r3, r3, #16
 8005c80:	2010      	movs	r0, #16
 8005c82:	b2d9      	uxtb	r1, r3
 8005c84:	b909      	cbnz	r1, 8005c8a <__lo0bits+0x32>
 8005c86:	3008      	adds	r0, #8
 8005c88:	0a1b      	lsrs	r3, r3, #8
 8005c8a:	0719      	lsls	r1, r3, #28
 8005c8c:	bf04      	itt	eq
 8005c8e:	091b      	lsreq	r3, r3, #4
 8005c90:	3004      	addeq	r0, #4
 8005c92:	0799      	lsls	r1, r3, #30
 8005c94:	bf04      	itt	eq
 8005c96:	089b      	lsreq	r3, r3, #2
 8005c98:	3002      	addeq	r0, #2
 8005c9a:	07d9      	lsls	r1, r3, #31
 8005c9c:	d403      	bmi.n	8005ca6 <__lo0bits+0x4e>
 8005c9e:	085b      	lsrs	r3, r3, #1
 8005ca0:	f100 0001 	add.w	r0, r0, #1
 8005ca4:	d003      	beq.n	8005cae <__lo0bits+0x56>
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	4770      	bx	lr
 8005caa:	2000      	movs	r0, #0
 8005cac:	4770      	bx	lr
 8005cae:	2020      	movs	r0, #32
 8005cb0:	4770      	bx	lr
	...

08005cb4 <__i2b>:
 8005cb4:	b510      	push	{r4, lr}
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	2101      	movs	r1, #1
 8005cba:	f7ff febb 	bl	8005a34 <_Balloc>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	b928      	cbnz	r0, 8005cce <__i2b+0x1a>
 8005cc2:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <__i2b+0x24>)
 8005cc4:	4805      	ldr	r0, [pc, #20]	; (8005cdc <__i2b+0x28>)
 8005cc6:	f240 1145 	movw	r1, #325	; 0x145
 8005cca:	f001 fdff 	bl	80078cc <__assert_func>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	6144      	str	r4, [r0, #20]
 8005cd2:	6103      	str	r3, [r0, #16]
 8005cd4:	bd10      	pop	{r4, pc}
 8005cd6:	bf00      	nop
 8005cd8:	0800826d 	.word	0x0800826d
 8005cdc:	0800827e 	.word	0x0800827e

08005ce0 <__multiply>:
 8005ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce4:	4691      	mov	r9, r2
 8005ce6:	690a      	ldr	r2, [r1, #16]
 8005ce8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	bfb8      	it	lt
 8005cf0:	460b      	movlt	r3, r1
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	bfbc      	itt	lt
 8005cf6:	464c      	movlt	r4, r9
 8005cf8:	4699      	movlt	r9, r3
 8005cfa:	6927      	ldr	r7, [r4, #16]
 8005cfc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005d00:	68a3      	ldr	r3, [r4, #8]
 8005d02:	6861      	ldr	r1, [r4, #4]
 8005d04:	eb07 060a 	add.w	r6, r7, sl
 8005d08:	42b3      	cmp	r3, r6
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	bfb8      	it	lt
 8005d0e:	3101      	addlt	r1, #1
 8005d10:	f7ff fe90 	bl	8005a34 <_Balloc>
 8005d14:	b930      	cbnz	r0, 8005d24 <__multiply+0x44>
 8005d16:	4602      	mov	r2, r0
 8005d18:	4b44      	ldr	r3, [pc, #272]	; (8005e2c <__multiply+0x14c>)
 8005d1a:	4845      	ldr	r0, [pc, #276]	; (8005e30 <__multiply+0x150>)
 8005d1c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005d20:	f001 fdd4 	bl	80078cc <__assert_func>
 8005d24:	f100 0514 	add.w	r5, r0, #20
 8005d28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005d2c:	462b      	mov	r3, r5
 8005d2e:	2200      	movs	r2, #0
 8005d30:	4543      	cmp	r3, r8
 8005d32:	d321      	bcc.n	8005d78 <__multiply+0x98>
 8005d34:	f104 0314 	add.w	r3, r4, #20
 8005d38:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005d3c:	f109 0314 	add.w	r3, r9, #20
 8005d40:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005d44:	9202      	str	r2, [sp, #8]
 8005d46:	1b3a      	subs	r2, r7, r4
 8005d48:	3a15      	subs	r2, #21
 8005d4a:	f022 0203 	bic.w	r2, r2, #3
 8005d4e:	3204      	adds	r2, #4
 8005d50:	f104 0115 	add.w	r1, r4, #21
 8005d54:	428f      	cmp	r7, r1
 8005d56:	bf38      	it	cc
 8005d58:	2204      	movcc	r2, #4
 8005d5a:	9201      	str	r2, [sp, #4]
 8005d5c:	9a02      	ldr	r2, [sp, #8]
 8005d5e:	9303      	str	r3, [sp, #12]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d80c      	bhi.n	8005d7e <__multiply+0x9e>
 8005d64:	2e00      	cmp	r6, #0
 8005d66:	dd03      	ble.n	8005d70 <__multiply+0x90>
 8005d68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d05a      	beq.n	8005e26 <__multiply+0x146>
 8005d70:	6106      	str	r6, [r0, #16]
 8005d72:	b005      	add	sp, #20
 8005d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d78:	f843 2b04 	str.w	r2, [r3], #4
 8005d7c:	e7d8      	b.n	8005d30 <__multiply+0x50>
 8005d7e:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d82:	f1ba 0f00 	cmp.w	sl, #0
 8005d86:	d023      	beq.n	8005dd0 <__multiply+0xf0>
 8005d88:	f104 0e14 	add.w	lr, r4, #20
 8005d8c:	46a9      	mov	r9, r5
 8005d8e:	f04f 0c00 	mov.w	ip, #0
 8005d92:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005d96:	f8d9 1000 	ldr.w	r1, [r9]
 8005d9a:	fa1f fb82 	uxth.w	fp, r2
 8005d9e:	b289      	uxth	r1, r1
 8005da0:	fb0a 110b 	mla	r1, sl, fp, r1
 8005da4:	4461      	add	r1, ip
 8005da6:	f8d9 c000 	ldr.w	ip, [r9]
 8005daa:	0c12      	lsrs	r2, r2, #16
 8005dac:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005db0:	fb0a c202 	mla	r2, sl, r2, ip
 8005db4:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005db8:	b289      	uxth	r1, r1
 8005dba:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005dbe:	4577      	cmp	r7, lr
 8005dc0:	f849 1b04 	str.w	r1, [r9], #4
 8005dc4:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005dc8:	d8e3      	bhi.n	8005d92 <__multiply+0xb2>
 8005dca:	9a01      	ldr	r2, [sp, #4]
 8005dcc:	f845 c002 	str.w	ip, [r5, r2]
 8005dd0:	9a03      	ldr	r2, [sp, #12]
 8005dd2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	f1b9 0f00 	cmp.w	r9, #0
 8005ddc:	d021      	beq.n	8005e22 <__multiply+0x142>
 8005dde:	6829      	ldr	r1, [r5, #0]
 8005de0:	f104 0c14 	add.w	ip, r4, #20
 8005de4:	46ae      	mov	lr, r5
 8005de6:	f04f 0a00 	mov.w	sl, #0
 8005dea:	f8bc b000 	ldrh.w	fp, [ip]
 8005dee:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005df2:	fb09 220b 	mla	r2, r9, fp, r2
 8005df6:	4452      	add	r2, sl
 8005df8:	b289      	uxth	r1, r1
 8005dfa:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005dfe:	f84e 1b04 	str.w	r1, [lr], #4
 8005e02:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005e06:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005e0a:	f8be 1000 	ldrh.w	r1, [lr]
 8005e0e:	fb09 110a 	mla	r1, r9, sl, r1
 8005e12:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005e16:	4567      	cmp	r7, ip
 8005e18:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005e1c:	d8e5      	bhi.n	8005dea <__multiply+0x10a>
 8005e1e:	9a01      	ldr	r2, [sp, #4]
 8005e20:	50a9      	str	r1, [r5, r2]
 8005e22:	3504      	adds	r5, #4
 8005e24:	e79a      	b.n	8005d5c <__multiply+0x7c>
 8005e26:	3e01      	subs	r6, #1
 8005e28:	e79c      	b.n	8005d64 <__multiply+0x84>
 8005e2a:	bf00      	nop
 8005e2c:	0800826d 	.word	0x0800826d
 8005e30:	0800827e 	.word	0x0800827e

08005e34 <__pow5mult>:
 8005e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e38:	4615      	mov	r5, r2
 8005e3a:	f012 0203 	ands.w	r2, r2, #3
 8005e3e:	4606      	mov	r6, r0
 8005e40:	460f      	mov	r7, r1
 8005e42:	d007      	beq.n	8005e54 <__pow5mult+0x20>
 8005e44:	4c25      	ldr	r4, [pc, #148]	; (8005edc <__pow5mult+0xa8>)
 8005e46:	3a01      	subs	r2, #1
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e4e:	f7ff fe53 	bl	8005af8 <__multadd>
 8005e52:	4607      	mov	r7, r0
 8005e54:	10ad      	asrs	r5, r5, #2
 8005e56:	d03d      	beq.n	8005ed4 <__pow5mult+0xa0>
 8005e58:	69f4      	ldr	r4, [r6, #28]
 8005e5a:	b97c      	cbnz	r4, 8005e7c <__pow5mult+0x48>
 8005e5c:	2010      	movs	r0, #16
 8005e5e:	f7ff fd35 	bl	80058cc <malloc>
 8005e62:	4602      	mov	r2, r0
 8005e64:	61f0      	str	r0, [r6, #28]
 8005e66:	b928      	cbnz	r0, 8005e74 <__pow5mult+0x40>
 8005e68:	4b1d      	ldr	r3, [pc, #116]	; (8005ee0 <__pow5mult+0xac>)
 8005e6a:	481e      	ldr	r0, [pc, #120]	; (8005ee4 <__pow5mult+0xb0>)
 8005e6c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005e70:	f001 fd2c 	bl	80078cc <__assert_func>
 8005e74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e78:	6004      	str	r4, [r0, #0]
 8005e7a:	60c4      	str	r4, [r0, #12]
 8005e7c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005e80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e84:	b94c      	cbnz	r4, 8005e9a <__pow5mult+0x66>
 8005e86:	f240 2171 	movw	r1, #625	; 0x271
 8005e8a:	4630      	mov	r0, r6
 8005e8c:	f7ff ff12 	bl	8005cb4 <__i2b>
 8005e90:	2300      	movs	r3, #0
 8005e92:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e96:	4604      	mov	r4, r0
 8005e98:	6003      	str	r3, [r0, #0]
 8005e9a:	f04f 0900 	mov.w	r9, #0
 8005e9e:	07eb      	lsls	r3, r5, #31
 8005ea0:	d50a      	bpl.n	8005eb8 <__pow5mult+0x84>
 8005ea2:	4639      	mov	r1, r7
 8005ea4:	4622      	mov	r2, r4
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	f7ff ff1a 	bl	8005ce0 <__multiply>
 8005eac:	4639      	mov	r1, r7
 8005eae:	4680      	mov	r8, r0
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	f7ff fdff 	bl	8005ab4 <_Bfree>
 8005eb6:	4647      	mov	r7, r8
 8005eb8:	106d      	asrs	r5, r5, #1
 8005eba:	d00b      	beq.n	8005ed4 <__pow5mult+0xa0>
 8005ebc:	6820      	ldr	r0, [r4, #0]
 8005ebe:	b938      	cbnz	r0, 8005ed0 <__pow5mult+0x9c>
 8005ec0:	4622      	mov	r2, r4
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	f7ff ff0b 	bl	8005ce0 <__multiply>
 8005eca:	6020      	str	r0, [r4, #0]
 8005ecc:	f8c0 9000 	str.w	r9, [r0]
 8005ed0:	4604      	mov	r4, r0
 8005ed2:	e7e4      	b.n	8005e9e <__pow5mult+0x6a>
 8005ed4:	4638      	mov	r0, r7
 8005ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eda:	bf00      	nop
 8005edc:	080083c8 	.word	0x080083c8
 8005ee0:	080081fe 	.word	0x080081fe
 8005ee4:	0800827e 	.word	0x0800827e

08005ee8 <__lshift>:
 8005ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eec:	460c      	mov	r4, r1
 8005eee:	6849      	ldr	r1, [r1, #4]
 8005ef0:	6923      	ldr	r3, [r4, #16]
 8005ef2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ef6:	68a3      	ldr	r3, [r4, #8]
 8005ef8:	4607      	mov	r7, r0
 8005efa:	4691      	mov	r9, r2
 8005efc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f00:	f108 0601 	add.w	r6, r8, #1
 8005f04:	42b3      	cmp	r3, r6
 8005f06:	db0b      	blt.n	8005f20 <__lshift+0x38>
 8005f08:	4638      	mov	r0, r7
 8005f0a:	f7ff fd93 	bl	8005a34 <_Balloc>
 8005f0e:	4605      	mov	r5, r0
 8005f10:	b948      	cbnz	r0, 8005f26 <__lshift+0x3e>
 8005f12:	4602      	mov	r2, r0
 8005f14:	4b28      	ldr	r3, [pc, #160]	; (8005fb8 <__lshift+0xd0>)
 8005f16:	4829      	ldr	r0, [pc, #164]	; (8005fbc <__lshift+0xd4>)
 8005f18:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005f1c:	f001 fcd6 	bl	80078cc <__assert_func>
 8005f20:	3101      	adds	r1, #1
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	e7ee      	b.n	8005f04 <__lshift+0x1c>
 8005f26:	2300      	movs	r3, #0
 8005f28:	f100 0114 	add.w	r1, r0, #20
 8005f2c:	f100 0210 	add.w	r2, r0, #16
 8005f30:	4618      	mov	r0, r3
 8005f32:	4553      	cmp	r3, sl
 8005f34:	db33      	blt.n	8005f9e <__lshift+0xb6>
 8005f36:	6920      	ldr	r0, [r4, #16]
 8005f38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f3c:	f104 0314 	add.w	r3, r4, #20
 8005f40:	f019 091f 	ands.w	r9, r9, #31
 8005f44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f4c:	d02b      	beq.n	8005fa6 <__lshift+0xbe>
 8005f4e:	f1c9 0e20 	rsb	lr, r9, #32
 8005f52:	468a      	mov	sl, r1
 8005f54:	2200      	movs	r2, #0
 8005f56:	6818      	ldr	r0, [r3, #0]
 8005f58:	fa00 f009 	lsl.w	r0, r0, r9
 8005f5c:	4310      	orrs	r0, r2
 8005f5e:	f84a 0b04 	str.w	r0, [sl], #4
 8005f62:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f66:	459c      	cmp	ip, r3
 8005f68:	fa22 f20e 	lsr.w	r2, r2, lr
 8005f6c:	d8f3      	bhi.n	8005f56 <__lshift+0x6e>
 8005f6e:	ebac 0304 	sub.w	r3, ip, r4
 8005f72:	3b15      	subs	r3, #21
 8005f74:	f023 0303 	bic.w	r3, r3, #3
 8005f78:	3304      	adds	r3, #4
 8005f7a:	f104 0015 	add.w	r0, r4, #21
 8005f7e:	4584      	cmp	ip, r0
 8005f80:	bf38      	it	cc
 8005f82:	2304      	movcc	r3, #4
 8005f84:	50ca      	str	r2, [r1, r3]
 8005f86:	b10a      	cbz	r2, 8005f8c <__lshift+0xa4>
 8005f88:	f108 0602 	add.w	r6, r8, #2
 8005f8c:	3e01      	subs	r6, #1
 8005f8e:	4638      	mov	r0, r7
 8005f90:	612e      	str	r6, [r5, #16]
 8005f92:	4621      	mov	r1, r4
 8005f94:	f7ff fd8e 	bl	8005ab4 <_Bfree>
 8005f98:	4628      	mov	r0, r5
 8005f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	e7c5      	b.n	8005f32 <__lshift+0x4a>
 8005fa6:	3904      	subs	r1, #4
 8005fa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fac:	f841 2f04 	str.w	r2, [r1, #4]!
 8005fb0:	459c      	cmp	ip, r3
 8005fb2:	d8f9      	bhi.n	8005fa8 <__lshift+0xc0>
 8005fb4:	e7ea      	b.n	8005f8c <__lshift+0xa4>
 8005fb6:	bf00      	nop
 8005fb8:	0800826d 	.word	0x0800826d
 8005fbc:	0800827e 	.word	0x0800827e

08005fc0 <__mcmp>:
 8005fc0:	690a      	ldr	r2, [r1, #16]
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	6900      	ldr	r0, [r0, #16]
 8005fc6:	1a80      	subs	r0, r0, r2
 8005fc8:	b530      	push	{r4, r5, lr}
 8005fca:	d10d      	bne.n	8005fe8 <__mcmp+0x28>
 8005fcc:	3314      	adds	r3, #20
 8005fce:	3114      	adds	r1, #20
 8005fd0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005fd4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005fd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005fdc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005fe0:	4295      	cmp	r5, r2
 8005fe2:	d002      	beq.n	8005fea <__mcmp+0x2a>
 8005fe4:	d304      	bcc.n	8005ff0 <__mcmp+0x30>
 8005fe6:	2001      	movs	r0, #1
 8005fe8:	bd30      	pop	{r4, r5, pc}
 8005fea:	42a3      	cmp	r3, r4
 8005fec:	d3f4      	bcc.n	8005fd8 <__mcmp+0x18>
 8005fee:	e7fb      	b.n	8005fe8 <__mcmp+0x28>
 8005ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff4:	e7f8      	b.n	8005fe8 <__mcmp+0x28>
	...

08005ff8 <__mdiff>:
 8005ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ffc:	460d      	mov	r5, r1
 8005ffe:	4607      	mov	r7, r0
 8006000:	4611      	mov	r1, r2
 8006002:	4628      	mov	r0, r5
 8006004:	4614      	mov	r4, r2
 8006006:	f7ff ffdb 	bl	8005fc0 <__mcmp>
 800600a:	1e06      	subs	r6, r0, #0
 800600c:	d111      	bne.n	8006032 <__mdiff+0x3a>
 800600e:	4631      	mov	r1, r6
 8006010:	4638      	mov	r0, r7
 8006012:	f7ff fd0f 	bl	8005a34 <_Balloc>
 8006016:	4602      	mov	r2, r0
 8006018:	b928      	cbnz	r0, 8006026 <__mdiff+0x2e>
 800601a:	4b39      	ldr	r3, [pc, #228]	; (8006100 <__mdiff+0x108>)
 800601c:	f240 2137 	movw	r1, #567	; 0x237
 8006020:	4838      	ldr	r0, [pc, #224]	; (8006104 <__mdiff+0x10c>)
 8006022:	f001 fc53 	bl	80078cc <__assert_func>
 8006026:	2301      	movs	r3, #1
 8006028:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800602c:	4610      	mov	r0, r2
 800602e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006032:	bfa4      	itt	ge
 8006034:	4623      	movge	r3, r4
 8006036:	462c      	movge	r4, r5
 8006038:	4638      	mov	r0, r7
 800603a:	6861      	ldr	r1, [r4, #4]
 800603c:	bfa6      	itte	ge
 800603e:	461d      	movge	r5, r3
 8006040:	2600      	movge	r6, #0
 8006042:	2601      	movlt	r6, #1
 8006044:	f7ff fcf6 	bl	8005a34 <_Balloc>
 8006048:	4602      	mov	r2, r0
 800604a:	b918      	cbnz	r0, 8006054 <__mdiff+0x5c>
 800604c:	4b2c      	ldr	r3, [pc, #176]	; (8006100 <__mdiff+0x108>)
 800604e:	f240 2145 	movw	r1, #581	; 0x245
 8006052:	e7e5      	b.n	8006020 <__mdiff+0x28>
 8006054:	6927      	ldr	r7, [r4, #16]
 8006056:	60c6      	str	r6, [r0, #12]
 8006058:	692e      	ldr	r6, [r5, #16]
 800605a:	f104 0014 	add.w	r0, r4, #20
 800605e:	f105 0914 	add.w	r9, r5, #20
 8006062:	f102 0e14 	add.w	lr, r2, #20
 8006066:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800606a:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800606e:	3410      	adds	r4, #16
 8006070:	46f2      	mov	sl, lr
 8006072:	2100      	movs	r1, #0
 8006074:	f859 3b04 	ldr.w	r3, [r9], #4
 8006078:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800607c:	fa11 f88b 	uxtah	r8, r1, fp
 8006080:	b299      	uxth	r1, r3
 8006082:	0c1b      	lsrs	r3, r3, #16
 8006084:	eba8 0801 	sub.w	r8, r8, r1
 8006088:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800608c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006090:	fa1f f888 	uxth.w	r8, r8
 8006094:	1419      	asrs	r1, r3, #16
 8006096:	454e      	cmp	r6, r9
 8006098:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800609c:	f84a 3b04 	str.w	r3, [sl], #4
 80060a0:	d8e8      	bhi.n	8006074 <__mdiff+0x7c>
 80060a2:	1b73      	subs	r3, r6, r5
 80060a4:	3b15      	subs	r3, #21
 80060a6:	f023 0303 	bic.w	r3, r3, #3
 80060aa:	3304      	adds	r3, #4
 80060ac:	3515      	adds	r5, #21
 80060ae:	42ae      	cmp	r6, r5
 80060b0:	bf38      	it	cc
 80060b2:	2304      	movcc	r3, #4
 80060b4:	4418      	add	r0, r3
 80060b6:	4473      	add	r3, lr
 80060b8:	469e      	mov	lr, r3
 80060ba:	4606      	mov	r6, r0
 80060bc:	4566      	cmp	r6, ip
 80060be:	d30e      	bcc.n	80060de <__mdiff+0xe6>
 80060c0:	f10c 0103 	add.w	r1, ip, #3
 80060c4:	1a09      	subs	r1, r1, r0
 80060c6:	f021 0103 	bic.w	r1, r1, #3
 80060ca:	3803      	subs	r0, #3
 80060cc:	4584      	cmp	ip, r0
 80060ce:	bf38      	it	cc
 80060d0:	2100      	movcc	r1, #0
 80060d2:	440b      	add	r3, r1
 80060d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80060d8:	b179      	cbz	r1, 80060fa <__mdiff+0x102>
 80060da:	6117      	str	r7, [r2, #16]
 80060dc:	e7a6      	b.n	800602c <__mdiff+0x34>
 80060de:	f856 8b04 	ldr.w	r8, [r6], #4
 80060e2:	fa11 f488 	uxtah	r4, r1, r8
 80060e6:	1425      	asrs	r5, r4, #16
 80060e8:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 80060ec:	b2a4      	uxth	r4, r4
 80060ee:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80060f2:	f84e 4b04 	str.w	r4, [lr], #4
 80060f6:	1429      	asrs	r1, r5, #16
 80060f8:	e7e0      	b.n	80060bc <__mdiff+0xc4>
 80060fa:	3f01      	subs	r7, #1
 80060fc:	e7ea      	b.n	80060d4 <__mdiff+0xdc>
 80060fe:	bf00      	nop
 8006100:	0800826d 	.word	0x0800826d
 8006104:	0800827e 	.word	0x0800827e

08006108 <__ulp>:
 8006108:	4b0e      	ldr	r3, [pc, #56]	; (8006144 <__ulp+0x3c>)
 800610a:	400b      	ands	r3, r1
 800610c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006110:	2b00      	cmp	r3, #0
 8006112:	dc08      	bgt.n	8006126 <__ulp+0x1e>
 8006114:	425b      	negs	r3, r3
 8006116:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800611a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800611e:	da04      	bge.n	800612a <__ulp+0x22>
 8006120:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006124:	4113      	asrs	r3, r2
 8006126:	2200      	movs	r2, #0
 8006128:	e008      	b.n	800613c <__ulp+0x34>
 800612a:	f1a2 0314 	sub.w	r3, r2, #20
 800612e:	2b1e      	cmp	r3, #30
 8006130:	bfda      	itte	le
 8006132:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006136:	40da      	lsrle	r2, r3
 8006138:	2201      	movgt	r2, #1
 800613a:	2300      	movs	r3, #0
 800613c:	4619      	mov	r1, r3
 800613e:	4610      	mov	r0, r2
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	7ff00000 	.word	0x7ff00000

08006148 <__b2d>:
 8006148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614a:	6905      	ldr	r5, [r0, #16]
 800614c:	f100 0714 	add.w	r7, r0, #20
 8006150:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006154:	1f2e      	subs	r6, r5, #4
 8006156:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800615a:	4620      	mov	r0, r4
 800615c:	f7ff fd5c 	bl	8005c18 <__hi0bits>
 8006160:	f1c0 0220 	rsb	r2, r0, #32
 8006164:	280a      	cmp	r0, #10
 8006166:	f8df c06c 	ldr.w	ip, [pc, #108]	; 80061d4 <__b2d+0x8c>
 800616a:	600a      	str	r2, [r1, #0]
 800616c:	4603      	mov	r3, r0
 800616e:	dc12      	bgt.n	8006196 <__b2d+0x4e>
 8006170:	f1c0 0e0b 	rsb	lr, r0, #11
 8006174:	fa24 f20e 	lsr.w	r2, r4, lr
 8006178:	42b7      	cmp	r7, r6
 800617a:	ea42 010c 	orr.w	r1, r2, ip
 800617e:	bf34      	ite	cc
 8006180:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006184:	2200      	movcs	r2, #0
 8006186:	3315      	adds	r3, #21
 8006188:	fa04 f303 	lsl.w	r3, r4, r3
 800618c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006190:	431a      	orrs	r2, r3
 8006192:	4610      	mov	r0, r2
 8006194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006196:	42b7      	cmp	r7, r6
 8006198:	bf3a      	itte	cc
 800619a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800619e:	f1a5 0608 	subcc.w	r6, r5, #8
 80061a2:	2200      	movcs	r2, #0
 80061a4:	3b0b      	subs	r3, #11
 80061a6:	d012      	beq.n	80061ce <__b2d+0x86>
 80061a8:	f1c3 0520 	rsb	r5, r3, #32
 80061ac:	fa22 f105 	lsr.w	r1, r2, r5
 80061b0:	409c      	lsls	r4, r3
 80061b2:	430c      	orrs	r4, r1
 80061b4:	42be      	cmp	r6, r7
 80061b6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80061ba:	bf8c      	ite	hi
 80061bc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80061c0:	2400      	movls	r4, #0
 80061c2:	409a      	lsls	r2, r3
 80061c4:	40ec      	lsrs	r4, r5
 80061c6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80061ca:	4322      	orrs	r2, r4
 80061cc:	e7e1      	b.n	8006192 <__b2d+0x4a>
 80061ce:	ea44 010c 	orr.w	r1, r4, ip
 80061d2:	e7de      	b.n	8006192 <__b2d+0x4a>
 80061d4:	3ff00000 	.word	0x3ff00000

080061d8 <__d2b>:
 80061d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061da:	2101      	movs	r1, #1
 80061dc:	9e08      	ldr	r6, [sp, #32]
 80061de:	4617      	mov	r7, r2
 80061e0:	461c      	mov	r4, r3
 80061e2:	f7ff fc27 	bl	8005a34 <_Balloc>
 80061e6:	4605      	mov	r5, r0
 80061e8:	b930      	cbnz	r0, 80061f8 <__d2b+0x20>
 80061ea:	4602      	mov	r2, r0
 80061ec:	4b23      	ldr	r3, [pc, #140]	; (800627c <__d2b+0xa4>)
 80061ee:	4824      	ldr	r0, [pc, #144]	; (8006280 <__d2b+0xa8>)
 80061f0:	f240 310f 	movw	r1, #783	; 0x30f
 80061f4:	f001 fb6a 	bl	80078cc <__assert_func>
 80061f8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80061fc:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006200:	bb24      	cbnz	r4, 800624c <__d2b+0x74>
 8006202:	2f00      	cmp	r7, #0
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	d026      	beq.n	8006256 <__d2b+0x7e>
 8006208:	4668      	mov	r0, sp
 800620a:	9700      	str	r7, [sp, #0]
 800620c:	f7ff fd24 	bl	8005c58 <__lo0bits>
 8006210:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006214:	b1e8      	cbz	r0, 8006252 <__d2b+0x7a>
 8006216:	f1c0 0320 	rsb	r3, r0, #32
 800621a:	fa02 f303 	lsl.w	r3, r2, r3
 800621e:	430b      	orrs	r3, r1
 8006220:	40c2      	lsrs	r2, r0
 8006222:	616b      	str	r3, [r5, #20]
 8006224:	9201      	str	r2, [sp, #4]
 8006226:	9b01      	ldr	r3, [sp, #4]
 8006228:	61ab      	str	r3, [r5, #24]
 800622a:	2b00      	cmp	r3, #0
 800622c:	bf14      	ite	ne
 800622e:	2102      	movne	r1, #2
 8006230:	2101      	moveq	r1, #1
 8006232:	6129      	str	r1, [r5, #16]
 8006234:	b1bc      	cbz	r4, 8006266 <__d2b+0x8e>
 8006236:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800623a:	4404      	add	r4, r0
 800623c:	6034      	str	r4, [r6, #0]
 800623e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006244:	6018      	str	r0, [r3, #0]
 8006246:	4628      	mov	r0, r5
 8006248:	b003      	add	sp, #12
 800624a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800624c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006250:	e7d7      	b.n	8006202 <__d2b+0x2a>
 8006252:	6169      	str	r1, [r5, #20]
 8006254:	e7e7      	b.n	8006226 <__d2b+0x4e>
 8006256:	a801      	add	r0, sp, #4
 8006258:	f7ff fcfe 	bl	8005c58 <__lo0bits>
 800625c:	9b01      	ldr	r3, [sp, #4]
 800625e:	616b      	str	r3, [r5, #20]
 8006260:	3020      	adds	r0, #32
 8006262:	2101      	movs	r1, #1
 8006264:	e7e5      	b.n	8006232 <__d2b+0x5a>
 8006266:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800626a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800626e:	6030      	str	r0, [r6, #0]
 8006270:	6918      	ldr	r0, [r3, #16]
 8006272:	f7ff fcd1 	bl	8005c18 <__hi0bits>
 8006276:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800627a:	e7e2      	b.n	8006242 <__d2b+0x6a>
 800627c:	0800826d 	.word	0x0800826d
 8006280:	0800827e 	.word	0x0800827e

08006284 <__ratio>:
 8006284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006288:	4688      	mov	r8, r1
 800628a:	4669      	mov	r1, sp
 800628c:	4681      	mov	r9, r0
 800628e:	f7ff ff5b 	bl	8006148 <__b2d>
 8006292:	460f      	mov	r7, r1
 8006294:	4604      	mov	r4, r0
 8006296:	460d      	mov	r5, r1
 8006298:	4640      	mov	r0, r8
 800629a:	a901      	add	r1, sp, #4
 800629c:	f7ff ff54 	bl	8006148 <__b2d>
 80062a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80062a4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80062a8:	eba3 0c02 	sub.w	ip, r3, r2
 80062ac:	e9dd 3200 	ldrd	r3, r2, [sp]
 80062b0:	1a9b      	subs	r3, r3, r2
 80062b2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	bfd5      	itete	le
 80062ba:	460a      	movle	r2, r1
 80062bc:	462a      	movgt	r2, r5
 80062be:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80062c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80062c6:	468b      	mov	fp, r1
 80062c8:	bfd8      	it	le
 80062ca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80062ce:	465b      	mov	r3, fp
 80062d0:	4602      	mov	r2, r0
 80062d2:	4639      	mov	r1, r7
 80062d4:	4620      	mov	r0, r4
 80062d6:	f7fa fab9 	bl	800084c <__aeabi_ddiv>
 80062da:	b003      	add	sp, #12
 80062dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080062e0 <__copybits>:
 80062e0:	3901      	subs	r1, #1
 80062e2:	b570      	push	{r4, r5, r6, lr}
 80062e4:	1149      	asrs	r1, r1, #5
 80062e6:	6914      	ldr	r4, [r2, #16]
 80062e8:	3101      	adds	r1, #1
 80062ea:	f102 0314 	add.w	r3, r2, #20
 80062ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80062f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80062f6:	1f05      	subs	r5, r0, #4
 80062f8:	42a3      	cmp	r3, r4
 80062fa:	d30c      	bcc.n	8006316 <__copybits+0x36>
 80062fc:	1aa3      	subs	r3, r4, r2
 80062fe:	3b11      	subs	r3, #17
 8006300:	f023 0303 	bic.w	r3, r3, #3
 8006304:	3211      	adds	r2, #17
 8006306:	42a2      	cmp	r2, r4
 8006308:	bf88      	it	hi
 800630a:	2300      	movhi	r3, #0
 800630c:	4418      	add	r0, r3
 800630e:	2300      	movs	r3, #0
 8006310:	4288      	cmp	r0, r1
 8006312:	d305      	bcc.n	8006320 <__copybits+0x40>
 8006314:	bd70      	pop	{r4, r5, r6, pc}
 8006316:	f853 6b04 	ldr.w	r6, [r3], #4
 800631a:	f845 6f04 	str.w	r6, [r5, #4]!
 800631e:	e7eb      	b.n	80062f8 <__copybits+0x18>
 8006320:	f840 3b04 	str.w	r3, [r0], #4
 8006324:	e7f4      	b.n	8006310 <__copybits+0x30>

08006326 <__any_on>:
 8006326:	f100 0214 	add.w	r2, r0, #20
 800632a:	6900      	ldr	r0, [r0, #16]
 800632c:	114b      	asrs	r3, r1, #5
 800632e:	4298      	cmp	r0, r3
 8006330:	b510      	push	{r4, lr}
 8006332:	db11      	blt.n	8006358 <__any_on+0x32>
 8006334:	dd0a      	ble.n	800634c <__any_on+0x26>
 8006336:	f011 011f 	ands.w	r1, r1, #31
 800633a:	d007      	beq.n	800634c <__any_on+0x26>
 800633c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006340:	fa24 f001 	lsr.w	r0, r4, r1
 8006344:	fa00 f101 	lsl.w	r1, r0, r1
 8006348:	428c      	cmp	r4, r1
 800634a:	d10b      	bne.n	8006364 <__any_on+0x3e>
 800634c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006350:	4293      	cmp	r3, r2
 8006352:	d803      	bhi.n	800635c <__any_on+0x36>
 8006354:	2000      	movs	r0, #0
 8006356:	bd10      	pop	{r4, pc}
 8006358:	4603      	mov	r3, r0
 800635a:	e7f7      	b.n	800634c <__any_on+0x26>
 800635c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006360:	2900      	cmp	r1, #0
 8006362:	d0f5      	beq.n	8006350 <__any_on+0x2a>
 8006364:	2001      	movs	r0, #1
 8006366:	e7f6      	b.n	8006356 <__any_on+0x30>

08006368 <sulp>:
 8006368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800636c:	460f      	mov	r7, r1
 800636e:	4690      	mov	r8, r2
 8006370:	f7ff feca 	bl	8006108 <__ulp>
 8006374:	4604      	mov	r4, r0
 8006376:	460d      	mov	r5, r1
 8006378:	f1b8 0f00 	cmp.w	r8, #0
 800637c:	d011      	beq.n	80063a2 <sulp+0x3a>
 800637e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006382:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006386:	2b00      	cmp	r3, #0
 8006388:	dd0b      	ble.n	80063a2 <sulp+0x3a>
 800638a:	051b      	lsls	r3, r3, #20
 800638c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006390:	2400      	movs	r4, #0
 8006392:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006396:	4622      	mov	r2, r4
 8006398:	462b      	mov	r3, r5
 800639a:	f7fa f92d 	bl	80005f8 <__aeabi_dmul>
 800639e:	4604      	mov	r4, r0
 80063a0:	460d      	mov	r5, r1
 80063a2:	4620      	mov	r0, r4
 80063a4:	4629      	mov	r1, r5
 80063a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063aa:	0000      	movs	r0, r0
 80063ac:	0000      	movs	r0, r0
	...

080063b0 <_strtod_l>:
 80063b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b4:	b09f      	sub	sp, #124	; 0x7c
 80063b6:	4604      	mov	r4, r0
 80063b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80063ba:	2200      	movs	r2, #0
 80063bc:	921a      	str	r2, [sp, #104]	; 0x68
 80063be:	460d      	mov	r5, r1
 80063c0:	f04f 0800 	mov.w	r8, #0
 80063c4:	f04f 0900 	mov.w	r9, #0
 80063c8:	460a      	mov	r2, r1
 80063ca:	9219      	str	r2, [sp, #100]	; 0x64
 80063cc:	7811      	ldrb	r1, [r2, #0]
 80063ce:	292b      	cmp	r1, #43	; 0x2b
 80063d0:	d04a      	beq.n	8006468 <_strtod_l+0xb8>
 80063d2:	d838      	bhi.n	8006446 <_strtod_l+0x96>
 80063d4:	290d      	cmp	r1, #13
 80063d6:	d832      	bhi.n	800643e <_strtod_l+0x8e>
 80063d8:	2908      	cmp	r1, #8
 80063da:	d832      	bhi.n	8006442 <_strtod_l+0x92>
 80063dc:	2900      	cmp	r1, #0
 80063de:	d03b      	beq.n	8006458 <_strtod_l+0xa8>
 80063e0:	2200      	movs	r2, #0
 80063e2:	920e      	str	r2, [sp, #56]	; 0x38
 80063e4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80063e6:	7832      	ldrb	r2, [r6, #0]
 80063e8:	2a30      	cmp	r2, #48	; 0x30
 80063ea:	f040 80b2 	bne.w	8006552 <_strtod_l+0x1a2>
 80063ee:	7872      	ldrb	r2, [r6, #1]
 80063f0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80063f4:	2a58      	cmp	r2, #88	; 0x58
 80063f6:	d16e      	bne.n	80064d6 <_strtod_l+0x126>
 80063f8:	9302      	str	r3, [sp, #8]
 80063fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063fc:	9301      	str	r3, [sp, #4]
 80063fe:	ab1a      	add	r3, sp, #104	; 0x68
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	4a8d      	ldr	r2, [pc, #564]	; (8006638 <_strtod_l+0x288>)
 8006404:	ab1b      	add	r3, sp, #108	; 0x6c
 8006406:	a919      	add	r1, sp, #100	; 0x64
 8006408:	4620      	mov	r0, r4
 800640a:	f001 faf9 	bl	8007a00 <__gethex>
 800640e:	f010 070f 	ands.w	r7, r0, #15
 8006412:	4605      	mov	r5, r0
 8006414:	d005      	beq.n	8006422 <_strtod_l+0x72>
 8006416:	2f06      	cmp	r7, #6
 8006418:	d128      	bne.n	800646c <_strtod_l+0xbc>
 800641a:	3601      	adds	r6, #1
 800641c:	2300      	movs	r3, #0
 800641e:	9619      	str	r6, [sp, #100]	; 0x64
 8006420:	930e      	str	r3, [sp, #56]	; 0x38
 8006422:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006424:	2b00      	cmp	r3, #0
 8006426:	f040 859c 	bne.w	8006f62 <_strtod_l+0xbb2>
 800642a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800642c:	b1cb      	cbz	r3, 8006462 <_strtod_l+0xb2>
 800642e:	4642      	mov	r2, r8
 8006430:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006434:	4610      	mov	r0, r2
 8006436:	4619      	mov	r1, r3
 8006438:	b01f      	add	sp, #124	; 0x7c
 800643a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800643e:	2920      	cmp	r1, #32
 8006440:	d1ce      	bne.n	80063e0 <_strtod_l+0x30>
 8006442:	3201      	adds	r2, #1
 8006444:	e7c1      	b.n	80063ca <_strtod_l+0x1a>
 8006446:	292d      	cmp	r1, #45	; 0x2d
 8006448:	d1ca      	bne.n	80063e0 <_strtod_l+0x30>
 800644a:	2101      	movs	r1, #1
 800644c:	910e      	str	r1, [sp, #56]	; 0x38
 800644e:	1c51      	adds	r1, r2, #1
 8006450:	9119      	str	r1, [sp, #100]	; 0x64
 8006452:	7852      	ldrb	r2, [r2, #1]
 8006454:	2a00      	cmp	r2, #0
 8006456:	d1c5      	bne.n	80063e4 <_strtod_l+0x34>
 8006458:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800645a:	9519      	str	r5, [sp, #100]	; 0x64
 800645c:	2b00      	cmp	r3, #0
 800645e:	f040 857e 	bne.w	8006f5e <_strtod_l+0xbae>
 8006462:	4642      	mov	r2, r8
 8006464:	464b      	mov	r3, r9
 8006466:	e7e5      	b.n	8006434 <_strtod_l+0x84>
 8006468:	2100      	movs	r1, #0
 800646a:	e7ef      	b.n	800644c <_strtod_l+0x9c>
 800646c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800646e:	b13a      	cbz	r2, 8006480 <_strtod_l+0xd0>
 8006470:	2135      	movs	r1, #53	; 0x35
 8006472:	a81c      	add	r0, sp, #112	; 0x70
 8006474:	f7ff ff34 	bl	80062e0 <__copybits>
 8006478:	991a      	ldr	r1, [sp, #104]	; 0x68
 800647a:	4620      	mov	r0, r4
 800647c:	f7ff fb1a 	bl	8005ab4 <_Bfree>
 8006480:	3f01      	subs	r7, #1
 8006482:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006484:	2f04      	cmp	r7, #4
 8006486:	d806      	bhi.n	8006496 <_strtod_l+0xe6>
 8006488:	e8df f007 	tbb	[pc, r7]
 800648c:	201d0314 	.word	0x201d0314
 8006490:	14          	.byte	0x14
 8006491:	00          	.byte	0x00
 8006492:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006496:	05e9      	lsls	r1, r5, #23
 8006498:	bf48      	it	mi
 800649a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800649e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80064a2:	0d1b      	lsrs	r3, r3, #20
 80064a4:	051b      	lsls	r3, r3, #20
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1bb      	bne.n	8006422 <_strtod_l+0x72>
 80064aa:	f7fe fb2d 	bl	8004b08 <__errno>
 80064ae:	2322      	movs	r3, #34	; 0x22
 80064b0:	6003      	str	r3, [r0, #0]
 80064b2:	e7b6      	b.n	8006422 <_strtod_l+0x72>
 80064b4:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80064b8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80064bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80064c0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80064c4:	e7e7      	b.n	8006496 <_strtod_l+0xe6>
 80064c6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800663c <_strtod_l+0x28c>
 80064ca:	e7e4      	b.n	8006496 <_strtod_l+0xe6>
 80064cc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80064d0:	f04f 38ff 	mov.w	r8, #4294967295
 80064d4:	e7df      	b.n	8006496 <_strtod_l+0xe6>
 80064d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	9219      	str	r2, [sp, #100]	; 0x64
 80064dc:	785b      	ldrb	r3, [r3, #1]
 80064de:	2b30      	cmp	r3, #48	; 0x30
 80064e0:	d0f9      	beq.n	80064d6 <_strtod_l+0x126>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d09d      	beq.n	8006422 <_strtod_l+0x72>
 80064e6:	2301      	movs	r3, #1
 80064e8:	f04f 0a00 	mov.w	sl, #0
 80064ec:	9305      	str	r3, [sp, #20]
 80064ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80064f2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80064f6:	46d3      	mov	fp, sl
 80064f8:	220a      	movs	r2, #10
 80064fa:	9819      	ldr	r0, [sp, #100]	; 0x64
 80064fc:	7806      	ldrb	r6, [r0, #0]
 80064fe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006502:	b2d9      	uxtb	r1, r3
 8006504:	2909      	cmp	r1, #9
 8006506:	d926      	bls.n	8006556 <_strtod_l+0x1a6>
 8006508:	494d      	ldr	r1, [pc, #308]	; (8006640 <_strtod_l+0x290>)
 800650a:	2201      	movs	r2, #1
 800650c:	f001 f986 	bl	800781c <strncmp>
 8006510:	2800      	cmp	r0, #0
 8006512:	d030      	beq.n	8006576 <_strtod_l+0x1c6>
 8006514:	2000      	movs	r0, #0
 8006516:	4632      	mov	r2, r6
 8006518:	9008      	str	r0, [sp, #32]
 800651a:	465e      	mov	r6, fp
 800651c:	4603      	mov	r3, r0
 800651e:	2a65      	cmp	r2, #101	; 0x65
 8006520:	d001      	beq.n	8006526 <_strtod_l+0x176>
 8006522:	2a45      	cmp	r2, #69	; 0x45
 8006524:	d113      	bne.n	800654e <_strtod_l+0x19e>
 8006526:	b91e      	cbnz	r6, 8006530 <_strtod_l+0x180>
 8006528:	9a05      	ldr	r2, [sp, #20]
 800652a:	4302      	orrs	r2, r0
 800652c:	d094      	beq.n	8006458 <_strtod_l+0xa8>
 800652e:	2600      	movs	r6, #0
 8006530:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006532:	1c6a      	adds	r2, r5, #1
 8006534:	9219      	str	r2, [sp, #100]	; 0x64
 8006536:	786a      	ldrb	r2, [r5, #1]
 8006538:	2a2b      	cmp	r2, #43	; 0x2b
 800653a:	d074      	beq.n	8006626 <_strtod_l+0x276>
 800653c:	2a2d      	cmp	r2, #45	; 0x2d
 800653e:	d078      	beq.n	8006632 <_strtod_l+0x282>
 8006540:	f04f 0c00 	mov.w	ip, #0
 8006544:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006548:	2909      	cmp	r1, #9
 800654a:	d97f      	bls.n	800664c <_strtod_l+0x29c>
 800654c:	9519      	str	r5, [sp, #100]	; 0x64
 800654e:	2700      	movs	r7, #0
 8006550:	e09e      	b.n	8006690 <_strtod_l+0x2e0>
 8006552:	2300      	movs	r3, #0
 8006554:	e7c8      	b.n	80064e8 <_strtod_l+0x138>
 8006556:	f1bb 0f08 	cmp.w	fp, #8
 800655a:	bfd8      	it	le
 800655c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800655e:	f100 0001 	add.w	r0, r0, #1
 8006562:	bfda      	itte	le
 8006564:	fb02 3301 	mlale	r3, r2, r1, r3
 8006568:	930a      	strle	r3, [sp, #40]	; 0x28
 800656a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800656e:	f10b 0b01 	add.w	fp, fp, #1
 8006572:	9019      	str	r0, [sp, #100]	; 0x64
 8006574:	e7c1      	b.n	80064fa <_strtod_l+0x14a>
 8006576:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	9219      	str	r2, [sp, #100]	; 0x64
 800657c:	785a      	ldrb	r2, [r3, #1]
 800657e:	f1bb 0f00 	cmp.w	fp, #0
 8006582:	d037      	beq.n	80065f4 <_strtod_l+0x244>
 8006584:	9008      	str	r0, [sp, #32]
 8006586:	465e      	mov	r6, fp
 8006588:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800658c:	2b09      	cmp	r3, #9
 800658e:	d912      	bls.n	80065b6 <_strtod_l+0x206>
 8006590:	2301      	movs	r3, #1
 8006592:	e7c4      	b.n	800651e <_strtod_l+0x16e>
 8006594:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006596:	1c5a      	adds	r2, r3, #1
 8006598:	9219      	str	r2, [sp, #100]	; 0x64
 800659a:	785a      	ldrb	r2, [r3, #1]
 800659c:	3001      	adds	r0, #1
 800659e:	2a30      	cmp	r2, #48	; 0x30
 80065a0:	d0f8      	beq.n	8006594 <_strtod_l+0x1e4>
 80065a2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80065a6:	2b08      	cmp	r3, #8
 80065a8:	f200 84e0 	bhi.w	8006f6c <_strtod_l+0xbbc>
 80065ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80065ae:	9008      	str	r0, [sp, #32]
 80065b0:	2000      	movs	r0, #0
 80065b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80065b4:	4606      	mov	r6, r0
 80065b6:	3a30      	subs	r2, #48	; 0x30
 80065b8:	f100 0301 	add.w	r3, r0, #1
 80065bc:	d014      	beq.n	80065e8 <_strtod_l+0x238>
 80065be:	9908      	ldr	r1, [sp, #32]
 80065c0:	4419      	add	r1, r3
 80065c2:	9108      	str	r1, [sp, #32]
 80065c4:	4633      	mov	r3, r6
 80065c6:	eb00 0c06 	add.w	ip, r0, r6
 80065ca:	210a      	movs	r1, #10
 80065cc:	4563      	cmp	r3, ip
 80065ce:	d113      	bne.n	80065f8 <_strtod_l+0x248>
 80065d0:	1833      	adds	r3, r6, r0
 80065d2:	2b08      	cmp	r3, #8
 80065d4:	f106 0601 	add.w	r6, r6, #1
 80065d8:	4406      	add	r6, r0
 80065da:	dc1a      	bgt.n	8006612 <_strtod_l+0x262>
 80065dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80065de:	230a      	movs	r3, #10
 80065e0:	fb03 2301 	mla	r3, r3, r1, r2
 80065e4:	930a      	str	r3, [sp, #40]	; 0x28
 80065e6:	2300      	movs	r3, #0
 80065e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80065ea:	1c51      	adds	r1, r2, #1
 80065ec:	9119      	str	r1, [sp, #100]	; 0x64
 80065ee:	7852      	ldrb	r2, [r2, #1]
 80065f0:	4618      	mov	r0, r3
 80065f2:	e7c9      	b.n	8006588 <_strtod_l+0x1d8>
 80065f4:	4658      	mov	r0, fp
 80065f6:	e7d2      	b.n	800659e <_strtod_l+0x1ee>
 80065f8:	2b08      	cmp	r3, #8
 80065fa:	f103 0301 	add.w	r3, r3, #1
 80065fe:	dc03      	bgt.n	8006608 <_strtod_l+0x258>
 8006600:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006602:	434f      	muls	r7, r1
 8006604:	970a      	str	r7, [sp, #40]	; 0x28
 8006606:	e7e1      	b.n	80065cc <_strtod_l+0x21c>
 8006608:	2b10      	cmp	r3, #16
 800660a:	bfd8      	it	le
 800660c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006610:	e7dc      	b.n	80065cc <_strtod_l+0x21c>
 8006612:	2e10      	cmp	r6, #16
 8006614:	bfdc      	itt	le
 8006616:	230a      	movle	r3, #10
 8006618:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800661c:	e7e3      	b.n	80065e6 <_strtod_l+0x236>
 800661e:	2300      	movs	r3, #0
 8006620:	9308      	str	r3, [sp, #32]
 8006622:	2301      	movs	r3, #1
 8006624:	e780      	b.n	8006528 <_strtod_l+0x178>
 8006626:	f04f 0c00 	mov.w	ip, #0
 800662a:	1caa      	adds	r2, r5, #2
 800662c:	9219      	str	r2, [sp, #100]	; 0x64
 800662e:	78aa      	ldrb	r2, [r5, #2]
 8006630:	e788      	b.n	8006544 <_strtod_l+0x194>
 8006632:	f04f 0c01 	mov.w	ip, #1
 8006636:	e7f8      	b.n	800662a <_strtod_l+0x27a>
 8006638:	080083d8 	.word	0x080083d8
 800663c:	7ff00000 	.word	0x7ff00000
 8006640:	080083d4 	.word	0x080083d4
 8006644:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006646:	1c51      	adds	r1, r2, #1
 8006648:	9119      	str	r1, [sp, #100]	; 0x64
 800664a:	7852      	ldrb	r2, [r2, #1]
 800664c:	2a30      	cmp	r2, #48	; 0x30
 800664e:	d0f9      	beq.n	8006644 <_strtod_l+0x294>
 8006650:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006654:	2908      	cmp	r1, #8
 8006656:	f63f af7a 	bhi.w	800654e <_strtod_l+0x19e>
 800665a:	3a30      	subs	r2, #48	; 0x30
 800665c:	9209      	str	r2, [sp, #36]	; 0x24
 800665e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006660:	920c      	str	r2, [sp, #48]	; 0x30
 8006662:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006664:	1c57      	adds	r7, r2, #1
 8006666:	9719      	str	r7, [sp, #100]	; 0x64
 8006668:	7852      	ldrb	r2, [r2, #1]
 800666a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800666e:	f1be 0f09 	cmp.w	lr, #9
 8006672:	d938      	bls.n	80066e6 <_strtod_l+0x336>
 8006674:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006676:	1a7f      	subs	r7, r7, r1
 8006678:	2f08      	cmp	r7, #8
 800667a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800667e:	dc03      	bgt.n	8006688 <_strtod_l+0x2d8>
 8006680:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006682:	428f      	cmp	r7, r1
 8006684:	bfa8      	it	ge
 8006686:	460f      	movge	r7, r1
 8006688:	f1bc 0f00 	cmp.w	ip, #0
 800668c:	d000      	beq.n	8006690 <_strtod_l+0x2e0>
 800668e:	427f      	negs	r7, r7
 8006690:	2e00      	cmp	r6, #0
 8006692:	d14f      	bne.n	8006734 <_strtod_l+0x384>
 8006694:	9905      	ldr	r1, [sp, #20]
 8006696:	4301      	orrs	r1, r0
 8006698:	f47f aec3 	bne.w	8006422 <_strtod_l+0x72>
 800669c:	2b00      	cmp	r3, #0
 800669e:	f47f aedb 	bne.w	8006458 <_strtod_l+0xa8>
 80066a2:	2a69      	cmp	r2, #105	; 0x69
 80066a4:	d029      	beq.n	80066fa <_strtod_l+0x34a>
 80066a6:	dc26      	bgt.n	80066f6 <_strtod_l+0x346>
 80066a8:	2a49      	cmp	r2, #73	; 0x49
 80066aa:	d026      	beq.n	80066fa <_strtod_l+0x34a>
 80066ac:	2a4e      	cmp	r2, #78	; 0x4e
 80066ae:	f47f aed3 	bne.w	8006458 <_strtod_l+0xa8>
 80066b2:	499a      	ldr	r1, [pc, #616]	; (800691c <_strtod_l+0x56c>)
 80066b4:	a819      	add	r0, sp, #100	; 0x64
 80066b6:	f001 fbe5 	bl	8007e84 <__match>
 80066ba:	2800      	cmp	r0, #0
 80066bc:	f43f aecc 	beq.w	8006458 <_strtod_l+0xa8>
 80066c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b28      	cmp	r3, #40	; 0x28
 80066c6:	d12f      	bne.n	8006728 <_strtod_l+0x378>
 80066c8:	4995      	ldr	r1, [pc, #596]	; (8006920 <_strtod_l+0x570>)
 80066ca:	aa1c      	add	r2, sp, #112	; 0x70
 80066cc:	a819      	add	r0, sp, #100	; 0x64
 80066ce:	f001 fbed 	bl	8007eac <__hexnan>
 80066d2:	2805      	cmp	r0, #5
 80066d4:	d128      	bne.n	8006728 <_strtod_l+0x378>
 80066d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80066d8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80066dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80066e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80066e4:	e69d      	b.n	8006422 <_strtod_l+0x72>
 80066e6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80066e8:	210a      	movs	r1, #10
 80066ea:	fb01 2107 	mla	r1, r1, r7, r2
 80066ee:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80066f2:	9209      	str	r2, [sp, #36]	; 0x24
 80066f4:	e7b5      	b.n	8006662 <_strtod_l+0x2b2>
 80066f6:	2a6e      	cmp	r2, #110	; 0x6e
 80066f8:	e7d9      	b.n	80066ae <_strtod_l+0x2fe>
 80066fa:	498a      	ldr	r1, [pc, #552]	; (8006924 <_strtod_l+0x574>)
 80066fc:	a819      	add	r0, sp, #100	; 0x64
 80066fe:	f001 fbc1 	bl	8007e84 <__match>
 8006702:	2800      	cmp	r0, #0
 8006704:	f43f aea8 	beq.w	8006458 <_strtod_l+0xa8>
 8006708:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800670a:	4987      	ldr	r1, [pc, #540]	; (8006928 <_strtod_l+0x578>)
 800670c:	3b01      	subs	r3, #1
 800670e:	a819      	add	r0, sp, #100	; 0x64
 8006710:	9319      	str	r3, [sp, #100]	; 0x64
 8006712:	f001 fbb7 	bl	8007e84 <__match>
 8006716:	b910      	cbnz	r0, 800671e <_strtod_l+0x36e>
 8006718:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800671a:	3301      	adds	r3, #1
 800671c:	9319      	str	r3, [sp, #100]	; 0x64
 800671e:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800692c <_strtod_l+0x57c>
 8006722:	f04f 0800 	mov.w	r8, #0
 8006726:	e67c      	b.n	8006422 <_strtod_l+0x72>
 8006728:	4881      	ldr	r0, [pc, #516]	; (8006930 <_strtod_l+0x580>)
 800672a:	f001 f8c9 	bl	80078c0 <nan>
 800672e:	4680      	mov	r8, r0
 8006730:	4689      	mov	r9, r1
 8006732:	e676      	b.n	8006422 <_strtod_l+0x72>
 8006734:	9b08      	ldr	r3, [sp, #32]
 8006736:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006738:	1afb      	subs	r3, r7, r3
 800673a:	f1bb 0f00 	cmp.w	fp, #0
 800673e:	bf08      	it	eq
 8006740:	46b3      	moveq	fp, r6
 8006742:	2e10      	cmp	r6, #16
 8006744:	9309      	str	r3, [sp, #36]	; 0x24
 8006746:	4635      	mov	r5, r6
 8006748:	bfa8      	it	ge
 800674a:	2510      	movge	r5, #16
 800674c:	f7f9 feda 	bl	8000504 <__aeabi_ui2d>
 8006750:	2e09      	cmp	r6, #9
 8006752:	4680      	mov	r8, r0
 8006754:	4689      	mov	r9, r1
 8006756:	dd13      	ble.n	8006780 <_strtod_l+0x3d0>
 8006758:	4b76      	ldr	r3, [pc, #472]	; (8006934 <_strtod_l+0x584>)
 800675a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800675e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006762:	f7f9 ff49 	bl	80005f8 <__aeabi_dmul>
 8006766:	4680      	mov	r8, r0
 8006768:	4650      	mov	r0, sl
 800676a:	4689      	mov	r9, r1
 800676c:	f7f9 feca 	bl	8000504 <__aeabi_ui2d>
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	4640      	mov	r0, r8
 8006776:	4649      	mov	r1, r9
 8006778:	f7f9 fd88 	bl	800028c <__adddf3>
 800677c:	4680      	mov	r8, r0
 800677e:	4689      	mov	r9, r1
 8006780:	2e0f      	cmp	r6, #15
 8006782:	dc36      	bgt.n	80067f2 <_strtod_l+0x442>
 8006784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006786:	2b00      	cmp	r3, #0
 8006788:	f43f ae4b 	beq.w	8006422 <_strtod_l+0x72>
 800678c:	dd22      	ble.n	80067d4 <_strtod_l+0x424>
 800678e:	2b16      	cmp	r3, #22
 8006790:	dc09      	bgt.n	80067a6 <_strtod_l+0x3f6>
 8006792:	4968      	ldr	r1, [pc, #416]	; (8006934 <_strtod_l+0x584>)
 8006794:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006798:	e9d1 0100 	ldrd	r0, r1, [r1]
 800679c:	4642      	mov	r2, r8
 800679e:	464b      	mov	r3, r9
 80067a0:	f7f9 ff2a 	bl	80005f8 <__aeabi_dmul>
 80067a4:	e7c3      	b.n	800672e <_strtod_l+0x37e>
 80067a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067a8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80067ac:	4293      	cmp	r3, r2
 80067ae:	db20      	blt.n	80067f2 <_strtod_l+0x442>
 80067b0:	4c60      	ldr	r4, [pc, #384]	; (8006934 <_strtod_l+0x584>)
 80067b2:	f1c6 060f 	rsb	r6, r6, #15
 80067b6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80067ba:	4642      	mov	r2, r8
 80067bc:	464b      	mov	r3, r9
 80067be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067c2:	f7f9 ff19 	bl	80005f8 <__aeabi_dmul>
 80067c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c8:	1b9e      	subs	r6, r3, r6
 80067ca:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80067ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80067d2:	e7e5      	b.n	80067a0 <_strtod_l+0x3f0>
 80067d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d6:	3316      	adds	r3, #22
 80067d8:	db0b      	blt.n	80067f2 <_strtod_l+0x442>
 80067da:	9b08      	ldr	r3, [sp, #32]
 80067dc:	1bdf      	subs	r7, r3, r7
 80067de:	4b55      	ldr	r3, [pc, #340]	; (8006934 <_strtod_l+0x584>)
 80067e0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80067e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067e8:	4640      	mov	r0, r8
 80067ea:	4649      	mov	r1, r9
 80067ec:	f7fa f82e 	bl	800084c <__aeabi_ddiv>
 80067f0:	e79d      	b.n	800672e <_strtod_l+0x37e>
 80067f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f4:	1b75      	subs	r5, r6, r5
 80067f6:	441d      	add	r5, r3
 80067f8:	2d00      	cmp	r5, #0
 80067fa:	dd70      	ble.n	80068de <_strtod_l+0x52e>
 80067fc:	f015 030f 	ands.w	r3, r5, #15
 8006800:	d00a      	beq.n	8006818 <_strtod_l+0x468>
 8006802:	494c      	ldr	r1, [pc, #304]	; (8006934 <_strtod_l+0x584>)
 8006804:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006808:	4642      	mov	r2, r8
 800680a:	464b      	mov	r3, r9
 800680c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006810:	f7f9 fef2 	bl	80005f8 <__aeabi_dmul>
 8006814:	4680      	mov	r8, r0
 8006816:	4689      	mov	r9, r1
 8006818:	f035 050f 	bics.w	r5, r5, #15
 800681c:	d04d      	beq.n	80068ba <_strtod_l+0x50a>
 800681e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006822:	dd22      	ble.n	800686a <_strtod_l+0x4ba>
 8006824:	2600      	movs	r6, #0
 8006826:	46b3      	mov	fp, r6
 8006828:	960b      	str	r6, [sp, #44]	; 0x2c
 800682a:	9608      	str	r6, [sp, #32]
 800682c:	2322      	movs	r3, #34	; 0x22
 800682e:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800692c <_strtod_l+0x57c>
 8006832:	6023      	str	r3, [r4, #0]
 8006834:	f04f 0800 	mov.w	r8, #0
 8006838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800683a:	2b00      	cmp	r3, #0
 800683c:	f43f adf1 	beq.w	8006422 <_strtod_l+0x72>
 8006840:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006842:	4620      	mov	r0, r4
 8006844:	f7ff f936 	bl	8005ab4 <_Bfree>
 8006848:	9908      	ldr	r1, [sp, #32]
 800684a:	4620      	mov	r0, r4
 800684c:	f7ff f932 	bl	8005ab4 <_Bfree>
 8006850:	4659      	mov	r1, fp
 8006852:	4620      	mov	r0, r4
 8006854:	f7ff f92e 	bl	8005ab4 <_Bfree>
 8006858:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800685a:	4620      	mov	r0, r4
 800685c:	f7ff f92a 	bl	8005ab4 <_Bfree>
 8006860:	4631      	mov	r1, r6
 8006862:	4620      	mov	r0, r4
 8006864:	f7ff f926 	bl	8005ab4 <_Bfree>
 8006868:	e5db      	b.n	8006422 <_strtod_l+0x72>
 800686a:	4b33      	ldr	r3, [pc, #204]	; (8006938 <_strtod_l+0x588>)
 800686c:	9305      	str	r3, [sp, #20]
 800686e:	2300      	movs	r3, #0
 8006870:	112d      	asrs	r5, r5, #4
 8006872:	4640      	mov	r0, r8
 8006874:	4649      	mov	r1, r9
 8006876:	469a      	mov	sl, r3
 8006878:	2d01      	cmp	r5, #1
 800687a:	dc21      	bgt.n	80068c0 <_strtod_l+0x510>
 800687c:	b10b      	cbz	r3, 8006882 <_strtod_l+0x4d2>
 800687e:	4680      	mov	r8, r0
 8006880:	4689      	mov	r9, r1
 8006882:	492d      	ldr	r1, [pc, #180]	; (8006938 <_strtod_l+0x588>)
 8006884:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006888:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800688c:	4642      	mov	r2, r8
 800688e:	464b      	mov	r3, r9
 8006890:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006894:	f7f9 feb0 	bl	80005f8 <__aeabi_dmul>
 8006898:	4b24      	ldr	r3, [pc, #144]	; (800692c <_strtod_l+0x57c>)
 800689a:	460a      	mov	r2, r1
 800689c:	400b      	ands	r3, r1
 800689e:	4927      	ldr	r1, [pc, #156]	; (800693c <_strtod_l+0x58c>)
 80068a0:	428b      	cmp	r3, r1
 80068a2:	4680      	mov	r8, r0
 80068a4:	d8be      	bhi.n	8006824 <_strtod_l+0x474>
 80068a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80068aa:	428b      	cmp	r3, r1
 80068ac:	bf86      	itte	hi
 80068ae:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8006940 <_strtod_l+0x590>
 80068b2:	f04f 38ff 	movhi.w	r8, #4294967295
 80068b6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80068ba:	2300      	movs	r3, #0
 80068bc:	9305      	str	r3, [sp, #20]
 80068be:	e07b      	b.n	80069b8 <_strtod_l+0x608>
 80068c0:	07ea      	lsls	r2, r5, #31
 80068c2:	d505      	bpl.n	80068d0 <_strtod_l+0x520>
 80068c4:	9b05      	ldr	r3, [sp, #20]
 80068c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ca:	f7f9 fe95 	bl	80005f8 <__aeabi_dmul>
 80068ce:	2301      	movs	r3, #1
 80068d0:	9a05      	ldr	r2, [sp, #20]
 80068d2:	3208      	adds	r2, #8
 80068d4:	f10a 0a01 	add.w	sl, sl, #1
 80068d8:	106d      	asrs	r5, r5, #1
 80068da:	9205      	str	r2, [sp, #20]
 80068dc:	e7cc      	b.n	8006878 <_strtod_l+0x4c8>
 80068de:	d0ec      	beq.n	80068ba <_strtod_l+0x50a>
 80068e0:	426d      	negs	r5, r5
 80068e2:	f015 020f 	ands.w	r2, r5, #15
 80068e6:	d00a      	beq.n	80068fe <_strtod_l+0x54e>
 80068e8:	4b12      	ldr	r3, [pc, #72]	; (8006934 <_strtod_l+0x584>)
 80068ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068ee:	4640      	mov	r0, r8
 80068f0:	4649      	mov	r1, r9
 80068f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f6:	f7f9 ffa9 	bl	800084c <__aeabi_ddiv>
 80068fa:	4680      	mov	r8, r0
 80068fc:	4689      	mov	r9, r1
 80068fe:	112d      	asrs	r5, r5, #4
 8006900:	d0db      	beq.n	80068ba <_strtod_l+0x50a>
 8006902:	2d1f      	cmp	r5, #31
 8006904:	dd1e      	ble.n	8006944 <_strtod_l+0x594>
 8006906:	2600      	movs	r6, #0
 8006908:	46b3      	mov	fp, r6
 800690a:	960b      	str	r6, [sp, #44]	; 0x2c
 800690c:	9608      	str	r6, [sp, #32]
 800690e:	2322      	movs	r3, #34	; 0x22
 8006910:	f04f 0800 	mov.w	r8, #0
 8006914:	f04f 0900 	mov.w	r9, #0
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	e78d      	b.n	8006838 <_strtod_l+0x488>
 800691c:	080081c5 	.word	0x080081c5
 8006920:	080083ec 	.word	0x080083ec
 8006924:	080081bd 	.word	0x080081bd
 8006928:	080081f4 	.word	0x080081f4
 800692c:	7ff00000 	.word	0x7ff00000
 8006930:	0800857d 	.word	0x0800857d
 8006934:	08008300 	.word	0x08008300
 8006938:	080082d8 	.word	0x080082d8
 800693c:	7ca00000 	.word	0x7ca00000
 8006940:	7fefffff 	.word	0x7fefffff
 8006944:	f015 0310 	ands.w	r3, r5, #16
 8006948:	bf18      	it	ne
 800694a:	236a      	movne	r3, #106	; 0x6a
 800694c:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 8006c1c <_strtod_l+0x86c>
 8006950:	9305      	str	r3, [sp, #20]
 8006952:	4640      	mov	r0, r8
 8006954:	4649      	mov	r1, r9
 8006956:	2300      	movs	r3, #0
 8006958:	07ea      	lsls	r2, r5, #31
 800695a:	d504      	bpl.n	8006966 <_strtod_l+0x5b6>
 800695c:	e9da 2300 	ldrd	r2, r3, [sl]
 8006960:	f7f9 fe4a 	bl	80005f8 <__aeabi_dmul>
 8006964:	2301      	movs	r3, #1
 8006966:	106d      	asrs	r5, r5, #1
 8006968:	f10a 0a08 	add.w	sl, sl, #8
 800696c:	d1f4      	bne.n	8006958 <_strtod_l+0x5a8>
 800696e:	b10b      	cbz	r3, 8006974 <_strtod_l+0x5c4>
 8006970:	4680      	mov	r8, r0
 8006972:	4689      	mov	r9, r1
 8006974:	9b05      	ldr	r3, [sp, #20]
 8006976:	b1bb      	cbz	r3, 80069a8 <_strtod_l+0x5f8>
 8006978:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800697c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006980:	2b00      	cmp	r3, #0
 8006982:	4649      	mov	r1, r9
 8006984:	dd10      	ble.n	80069a8 <_strtod_l+0x5f8>
 8006986:	2b1f      	cmp	r3, #31
 8006988:	f340 8125 	ble.w	8006bd6 <_strtod_l+0x826>
 800698c:	2b34      	cmp	r3, #52	; 0x34
 800698e:	bfde      	ittt	le
 8006990:	f04f 33ff 	movle.w	r3, #4294967295
 8006994:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006998:	4093      	lslle	r3, r2
 800699a:	f04f 0800 	mov.w	r8, #0
 800699e:	bfcc      	ite	gt
 80069a0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80069a4:	ea03 0901 	andle.w	r9, r3, r1
 80069a8:	2200      	movs	r2, #0
 80069aa:	2300      	movs	r3, #0
 80069ac:	4640      	mov	r0, r8
 80069ae:	4649      	mov	r1, r9
 80069b0:	f7fa f88a 	bl	8000ac8 <__aeabi_dcmpeq>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	d1a6      	bne.n	8006906 <_strtod_l+0x556>
 80069b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069ba:	9300      	str	r3, [sp, #0]
 80069bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069be:	4633      	mov	r3, r6
 80069c0:	465a      	mov	r2, fp
 80069c2:	4620      	mov	r0, r4
 80069c4:	f7ff f8de 	bl	8005b84 <__s2b>
 80069c8:	900b      	str	r0, [sp, #44]	; 0x2c
 80069ca:	2800      	cmp	r0, #0
 80069cc:	f43f af2a 	beq.w	8006824 <_strtod_l+0x474>
 80069d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069d2:	9b08      	ldr	r3, [sp, #32]
 80069d4:	2a00      	cmp	r2, #0
 80069d6:	eba3 0307 	sub.w	r3, r3, r7
 80069da:	bfa8      	it	ge
 80069dc:	2300      	movge	r3, #0
 80069de:	9312      	str	r3, [sp, #72]	; 0x48
 80069e0:	2600      	movs	r6, #0
 80069e2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80069e6:	9316      	str	r3, [sp, #88]	; 0x58
 80069e8:	46b3      	mov	fp, r6
 80069ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069ec:	4620      	mov	r0, r4
 80069ee:	6859      	ldr	r1, [r3, #4]
 80069f0:	f7ff f820 	bl	8005a34 <_Balloc>
 80069f4:	9008      	str	r0, [sp, #32]
 80069f6:	2800      	cmp	r0, #0
 80069f8:	f43f af18 	beq.w	800682c <_strtod_l+0x47c>
 80069fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069fe:	691a      	ldr	r2, [r3, #16]
 8006a00:	3202      	adds	r2, #2
 8006a02:	f103 010c 	add.w	r1, r3, #12
 8006a06:	0092      	lsls	r2, r2, #2
 8006a08:	300c      	adds	r0, #12
 8006a0a:	f000 ff4b 	bl	80078a4 <memcpy>
 8006a0e:	ab1c      	add	r3, sp, #112	; 0x70
 8006a10:	9301      	str	r3, [sp, #4]
 8006a12:	ab1b      	add	r3, sp, #108	; 0x6c
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	4642      	mov	r2, r8
 8006a18:	464b      	mov	r3, r9
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006a20:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8006a24:	f7ff fbd8 	bl	80061d8 <__d2b>
 8006a28:	901a      	str	r0, [sp, #104]	; 0x68
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	f43f aefe 	beq.w	800682c <_strtod_l+0x47c>
 8006a30:	2101      	movs	r1, #1
 8006a32:	4620      	mov	r0, r4
 8006a34:	f7ff f93e 	bl	8005cb4 <__i2b>
 8006a38:	4683      	mov	fp, r0
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	f43f aef6 	beq.w	800682c <_strtod_l+0x47c>
 8006a40:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006a42:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006a44:	2f00      	cmp	r7, #0
 8006a46:	bfab      	itete	ge
 8006a48:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8006a4a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006a4c:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006a4e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8006a52:	bfac      	ite	ge
 8006a54:	eb07 0a03 	addge.w	sl, r7, r3
 8006a58:	1bdd      	sublt	r5, r3, r7
 8006a5a:	9b05      	ldr	r3, [sp, #20]
 8006a5c:	1aff      	subs	r7, r7, r3
 8006a5e:	4417      	add	r7, r2
 8006a60:	4b6f      	ldr	r3, [pc, #444]	; (8006c20 <_strtod_l+0x870>)
 8006a62:	3f01      	subs	r7, #1
 8006a64:	429f      	cmp	r7, r3
 8006a66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006a6a:	f280 80c7 	bge.w	8006bfc <_strtod_l+0x84c>
 8006a6e:	1bdb      	subs	r3, r3, r7
 8006a70:	2b1f      	cmp	r3, #31
 8006a72:	eba2 0203 	sub.w	r2, r2, r3
 8006a76:	f04f 0101 	mov.w	r1, #1
 8006a7a:	f300 80b3 	bgt.w	8006be4 <_strtod_l+0x834>
 8006a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a82:	9313      	str	r3, [sp, #76]	; 0x4c
 8006a84:	2300      	movs	r3, #0
 8006a86:	9310      	str	r3, [sp, #64]	; 0x40
 8006a88:	eb0a 0702 	add.w	r7, sl, r2
 8006a8c:	9b05      	ldr	r3, [sp, #20]
 8006a8e:	45ba      	cmp	sl, r7
 8006a90:	4415      	add	r5, r2
 8006a92:	441d      	add	r5, r3
 8006a94:	4653      	mov	r3, sl
 8006a96:	bfa8      	it	ge
 8006a98:	463b      	movge	r3, r7
 8006a9a:	42ab      	cmp	r3, r5
 8006a9c:	bfa8      	it	ge
 8006a9e:	462b      	movge	r3, r5
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	bfc2      	ittt	gt
 8006aa4:	1aff      	subgt	r7, r7, r3
 8006aa6:	1aed      	subgt	r5, r5, r3
 8006aa8:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006aac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	dd17      	ble.n	8006ae2 <_strtod_l+0x732>
 8006ab2:	4659      	mov	r1, fp
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f7ff f9bc 	bl	8005e34 <__pow5mult>
 8006abc:	4683      	mov	fp, r0
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	f43f aeb4 	beq.w	800682c <_strtod_l+0x47c>
 8006ac4:	4601      	mov	r1, r0
 8006ac6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f7ff f909 	bl	8005ce0 <__multiply>
 8006ace:	900a      	str	r0, [sp, #40]	; 0x28
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	f43f aeab 	beq.w	800682c <_strtod_l+0x47c>
 8006ad6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f7fe ffeb 	bl	8005ab4 <_Bfree>
 8006ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ae0:	931a      	str	r3, [sp, #104]	; 0x68
 8006ae2:	2f00      	cmp	r7, #0
 8006ae4:	f300 808f 	bgt.w	8006c06 <_strtod_l+0x856>
 8006ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	dd08      	ble.n	8006b00 <_strtod_l+0x750>
 8006aee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006af0:	9908      	ldr	r1, [sp, #32]
 8006af2:	4620      	mov	r0, r4
 8006af4:	f7ff f99e 	bl	8005e34 <__pow5mult>
 8006af8:	9008      	str	r0, [sp, #32]
 8006afa:	2800      	cmp	r0, #0
 8006afc:	f43f ae96 	beq.w	800682c <_strtod_l+0x47c>
 8006b00:	2d00      	cmp	r5, #0
 8006b02:	dd08      	ble.n	8006b16 <_strtod_l+0x766>
 8006b04:	9908      	ldr	r1, [sp, #32]
 8006b06:	462a      	mov	r2, r5
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f7ff f9ed 	bl	8005ee8 <__lshift>
 8006b0e:	9008      	str	r0, [sp, #32]
 8006b10:	2800      	cmp	r0, #0
 8006b12:	f43f ae8b 	beq.w	800682c <_strtod_l+0x47c>
 8006b16:	f1ba 0f00 	cmp.w	sl, #0
 8006b1a:	dd08      	ble.n	8006b2e <_strtod_l+0x77e>
 8006b1c:	4659      	mov	r1, fp
 8006b1e:	4652      	mov	r2, sl
 8006b20:	4620      	mov	r0, r4
 8006b22:	f7ff f9e1 	bl	8005ee8 <__lshift>
 8006b26:	4683      	mov	fp, r0
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	f43f ae7f 	beq.w	800682c <_strtod_l+0x47c>
 8006b2e:	9a08      	ldr	r2, [sp, #32]
 8006b30:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006b32:	4620      	mov	r0, r4
 8006b34:	f7ff fa60 	bl	8005ff8 <__mdiff>
 8006b38:	4606      	mov	r6, r0
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	f43f ae76 	beq.w	800682c <_strtod_l+0x47c>
 8006b40:	2500      	movs	r5, #0
 8006b42:	68c3      	ldr	r3, [r0, #12]
 8006b44:	60c5      	str	r5, [r0, #12]
 8006b46:	4659      	mov	r1, fp
 8006b48:	930a      	str	r3, [sp, #40]	; 0x28
 8006b4a:	f7ff fa39 	bl	8005fc0 <__mcmp>
 8006b4e:	42a8      	cmp	r0, r5
 8006b50:	da6c      	bge.n	8006c2c <_strtod_l+0x87c>
 8006b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b54:	ea53 0308 	orrs.w	r3, r3, r8
 8006b58:	f040 8090 	bne.w	8006c7c <_strtod_l+0x8cc>
 8006b5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f040 808b 	bne.w	8006c7c <_strtod_l+0x8cc>
 8006b66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b6a:	0d1b      	lsrs	r3, r3, #20
 8006b6c:	051b      	lsls	r3, r3, #20
 8006b6e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006b72:	f240 8083 	bls.w	8006c7c <_strtod_l+0x8cc>
 8006b76:	6973      	ldr	r3, [r6, #20]
 8006b78:	b913      	cbnz	r3, 8006b80 <_strtod_l+0x7d0>
 8006b7a:	6933      	ldr	r3, [r6, #16]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	dd7d      	ble.n	8006c7c <_strtod_l+0x8cc>
 8006b80:	4631      	mov	r1, r6
 8006b82:	2201      	movs	r2, #1
 8006b84:	4620      	mov	r0, r4
 8006b86:	f7ff f9af 	bl	8005ee8 <__lshift>
 8006b8a:	4659      	mov	r1, fp
 8006b8c:	4606      	mov	r6, r0
 8006b8e:	f7ff fa17 	bl	8005fc0 <__mcmp>
 8006b92:	2800      	cmp	r0, #0
 8006b94:	dd72      	ble.n	8006c7c <_strtod_l+0x8cc>
 8006b96:	9905      	ldr	r1, [sp, #20]
 8006b98:	4a22      	ldr	r2, [pc, #136]	; (8006c24 <_strtod_l+0x874>)
 8006b9a:	464b      	mov	r3, r9
 8006b9c:	2900      	cmp	r1, #0
 8006b9e:	f000 808e 	beq.w	8006cbe <_strtod_l+0x90e>
 8006ba2:	ea02 0109 	and.w	r1, r2, r9
 8006ba6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006baa:	f300 8088 	bgt.w	8006cbe <_strtod_l+0x90e>
 8006bae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006bb2:	f77f aeac 	ble.w	800690e <_strtod_l+0x55e>
 8006bb6:	4b1c      	ldr	r3, [pc, #112]	; (8006c28 <_strtod_l+0x878>)
 8006bb8:	4640      	mov	r0, r8
 8006bba:	4649      	mov	r1, r9
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f7f9 fd1b 	bl	80005f8 <__aeabi_dmul>
 8006bc2:	4b18      	ldr	r3, [pc, #96]	; (8006c24 <_strtod_l+0x874>)
 8006bc4:	400b      	ands	r3, r1
 8006bc6:	4680      	mov	r8, r0
 8006bc8:	4689      	mov	r9, r1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f47f ae38 	bne.w	8006840 <_strtod_l+0x490>
 8006bd0:	2322      	movs	r3, #34	; 0x22
 8006bd2:	6023      	str	r3, [r4, #0]
 8006bd4:	e634      	b.n	8006840 <_strtod_l+0x490>
 8006bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bda:	fa02 f303 	lsl.w	r3, r2, r3
 8006bde:	ea03 0808 	and.w	r8, r3, r8
 8006be2:	e6e1      	b.n	80069a8 <_strtod_l+0x5f8>
 8006be4:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8006be8:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8006bec:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8006bf0:	37e2      	adds	r7, #226	; 0xe2
 8006bf2:	fa01 f307 	lsl.w	r3, r1, r7
 8006bf6:	9310      	str	r3, [sp, #64]	; 0x40
 8006bf8:	9113      	str	r1, [sp, #76]	; 0x4c
 8006bfa:	e745      	b.n	8006a88 <_strtod_l+0x6d8>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	9310      	str	r3, [sp, #64]	; 0x40
 8006c00:	2301      	movs	r3, #1
 8006c02:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c04:	e740      	b.n	8006a88 <_strtod_l+0x6d8>
 8006c06:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006c08:	463a      	mov	r2, r7
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	f7ff f96c 	bl	8005ee8 <__lshift>
 8006c10:	901a      	str	r0, [sp, #104]	; 0x68
 8006c12:	2800      	cmp	r0, #0
 8006c14:	f47f af68 	bne.w	8006ae8 <_strtod_l+0x738>
 8006c18:	e608      	b.n	800682c <_strtod_l+0x47c>
 8006c1a:	bf00      	nop
 8006c1c:	08008400 	.word	0x08008400
 8006c20:	fffffc02 	.word	0xfffffc02
 8006c24:	7ff00000 	.word	0x7ff00000
 8006c28:	39500000 	.word	0x39500000
 8006c2c:	46ca      	mov	sl, r9
 8006c2e:	d165      	bne.n	8006cfc <_strtod_l+0x94c>
 8006c30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c32:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c36:	b352      	cbz	r2, 8006c8e <_strtod_l+0x8de>
 8006c38:	4a9d      	ldr	r2, [pc, #628]	; (8006eb0 <_strtod_l+0xb00>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d12a      	bne.n	8006c94 <_strtod_l+0x8e4>
 8006c3e:	9b05      	ldr	r3, [sp, #20]
 8006c40:	4641      	mov	r1, r8
 8006c42:	b1fb      	cbz	r3, 8006c84 <_strtod_l+0x8d4>
 8006c44:	4b9b      	ldr	r3, [pc, #620]	; (8006eb4 <_strtod_l+0xb04>)
 8006c46:	ea09 0303 	and.w	r3, r9, r3
 8006c4a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c52:	d81a      	bhi.n	8006c8a <_strtod_l+0x8da>
 8006c54:	0d1b      	lsrs	r3, r3, #20
 8006c56:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5e:	4299      	cmp	r1, r3
 8006c60:	d118      	bne.n	8006c94 <_strtod_l+0x8e4>
 8006c62:	4b95      	ldr	r3, [pc, #596]	; (8006eb8 <_strtod_l+0xb08>)
 8006c64:	459a      	cmp	sl, r3
 8006c66:	d102      	bne.n	8006c6e <_strtod_l+0x8be>
 8006c68:	3101      	adds	r1, #1
 8006c6a:	f43f addf 	beq.w	800682c <_strtod_l+0x47c>
 8006c6e:	4b91      	ldr	r3, [pc, #580]	; (8006eb4 <_strtod_l+0xb04>)
 8006c70:	ea0a 0303 	and.w	r3, sl, r3
 8006c74:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006c78:	f04f 0800 	mov.w	r8, #0
 8006c7c:	9b05      	ldr	r3, [sp, #20]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d199      	bne.n	8006bb6 <_strtod_l+0x806>
 8006c82:	e5dd      	b.n	8006840 <_strtod_l+0x490>
 8006c84:	f04f 33ff 	mov.w	r3, #4294967295
 8006c88:	e7e9      	b.n	8006c5e <_strtod_l+0x8ae>
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	e7e7      	b.n	8006c5e <_strtod_l+0x8ae>
 8006c8e:	ea53 0308 	orrs.w	r3, r3, r8
 8006c92:	d080      	beq.n	8006b96 <_strtod_l+0x7e6>
 8006c94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c96:	b1e3      	cbz	r3, 8006cd2 <_strtod_l+0x922>
 8006c98:	ea13 0f0a 	tst.w	r3, sl
 8006c9c:	d0ee      	beq.n	8006c7c <_strtod_l+0x8cc>
 8006c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca0:	9a05      	ldr	r2, [sp, #20]
 8006ca2:	4640      	mov	r0, r8
 8006ca4:	4649      	mov	r1, r9
 8006ca6:	b1c3      	cbz	r3, 8006cda <_strtod_l+0x92a>
 8006ca8:	f7ff fb5e 	bl	8006368 <sulp>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006cb2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006cb4:	f7f9 faea 	bl	800028c <__adddf3>
 8006cb8:	4680      	mov	r8, r0
 8006cba:	4689      	mov	r9, r1
 8006cbc:	e7de      	b.n	8006c7c <_strtod_l+0x8cc>
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006cc4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006cc8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006ccc:	f04f 38ff 	mov.w	r8, #4294967295
 8006cd0:	e7d4      	b.n	8006c7c <_strtod_l+0x8cc>
 8006cd2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006cd4:	ea13 0f08 	tst.w	r3, r8
 8006cd8:	e7e0      	b.n	8006c9c <_strtod_l+0x8ec>
 8006cda:	f7ff fb45 	bl	8006368 <sulp>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006ce4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006ce6:	f7f9 facf 	bl	8000288 <__aeabi_dsub>
 8006cea:	2200      	movs	r2, #0
 8006cec:	2300      	movs	r3, #0
 8006cee:	4680      	mov	r8, r0
 8006cf0:	4689      	mov	r9, r1
 8006cf2:	f7f9 fee9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	d0c0      	beq.n	8006c7c <_strtod_l+0x8cc>
 8006cfa:	e608      	b.n	800690e <_strtod_l+0x55e>
 8006cfc:	4659      	mov	r1, fp
 8006cfe:	4630      	mov	r0, r6
 8006d00:	f7ff fac0 	bl	8006284 <__ratio>
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d12:	f7f9 feed 	bl	8000af0 <__aeabi_dcmple>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	d06f      	beq.n	8006dfa <_strtod_l+0xa4a>
 8006d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d17c      	bne.n	8006e1a <_strtod_l+0xa6a>
 8006d20:	f1b8 0f00 	cmp.w	r8, #0
 8006d24:	d159      	bne.n	8006dda <_strtod_l+0xa2a>
 8006d26:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d17b      	bne.n	8006e26 <_strtod_l+0xa76>
 8006d2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d32:	4b62      	ldr	r3, [pc, #392]	; (8006ebc <_strtod_l+0xb0c>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	f7f9 fed1 	bl	8000adc <__aeabi_dcmplt>
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d15a      	bne.n	8006df4 <_strtod_l+0xa44>
 8006d3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d42:	4b5f      	ldr	r3, [pc, #380]	; (8006ec0 <_strtod_l+0xb10>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	f7f9 fc57 	bl	80005f8 <__aeabi_dmul>
 8006d4a:	4605      	mov	r5, r0
 8006d4c:	460f      	mov	r7, r1
 8006d4e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006d52:	9506      	str	r5, [sp, #24]
 8006d54:	9307      	str	r3, [sp, #28]
 8006d56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d5a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006d5e:	4b55      	ldr	r3, [pc, #340]	; (8006eb4 <_strtod_l+0xb04>)
 8006d60:	4a54      	ldr	r2, [pc, #336]	; (8006eb4 <_strtod_l+0xb04>)
 8006d62:	ea0a 0303 	and.w	r3, sl, r3
 8006d66:	9313      	str	r3, [sp, #76]	; 0x4c
 8006d68:	4b56      	ldr	r3, [pc, #344]	; (8006ec4 <_strtod_l+0xb14>)
 8006d6a:	ea0a 0202 	and.w	r2, sl, r2
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	f040 80ae 	bne.w	8006ed0 <_strtod_l+0xb20>
 8006d74:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006d78:	4640      	mov	r0, r8
 8006d7a:	4649      	mov	r1, r9
 8006d7c:	f7ff f9c4 	bl	8006108 <__ulp>
 8006d80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d84:	f7f9 fc38 	bl	80005f8 <__aeabi_dmul>
 8006d88:	4642      	mov	r2, r8
 8006d8a:	464b      	mov	r3, r9
 8006d8c:	f7f9 fa7e 	bl	800028c <__adddf3>
 8006d90:	f8df a120 	ldr.w	sl, [pc, #288]	; 8006eb4 <_strtod_l+0xb04>
 8006d94:	4a4c      	ldr	r2, [pc, #304]	; (8006ec8 <_strtod_l+0xb18>)
 8006d96:	ea01 0a0a 	and.w	sl, r1, sl
 8006d9a:	4592      	cmp	sl, r2
 8006d9c:	4680      	mov	r8, r0
 8006d9e:	d948      	bls.n	8006e32 <_strtod_l+0xa82>
 8006da0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006da2:	4b45      	ldr	r3, [pc, #276]	; (8006eb8 <_strtod_l+0xb08>)
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d103      	bne.n	8006db0 <_strtod_l+0xa00>
 8006da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006daa:	3301      	adds	r3, #1
 8006dac:	f43f ad3e 	beq.w	800682c <_strtod_l+0x47c>
 8006db0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8006eb8 <_strtod_l+0xb08>
 8006db4:	f04f 38ff 	mov.w	r8, #4294967295
 8006db8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f7fe fe7a 	bl	8005ab4 <_Bfree>
 8006dc0:	9908      	ldr	r1, [sp, #32]
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f7fe fe76 	bl	8005ab4 <_Bfree>
 8006dc8:	4659      	mov	r1, fp
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f7fe fe72 	bl	8005ab4 <_Bfree>
 8006dd0:	4631      	mov	r1, r6
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f7fe fe6e 	bl	8005ab4 <_Bfree>
 8006dd8:	e607      	b.n	80069ea <_strtod_l+0x63a>
 8006dda:	f1b8 0f01 	cmp.w	r8, #1
 8006dde:	d103      	bne.n	8006de8 <_strtod_l+0xa38>
 8006de0:	f1b9 0f00 	cmp.w	r9, #0
 8006de4:	f43f ad93 	beq.w	800690e <_strtod_l+0x55e>
 8006de8:	4b38      	ldr	r3, [pc, #224]	; (8006ecc <_strtod_l+0xb1c>)
 8006dea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006dec:	2200      	movs	r2, #0
 8006dee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006df2:	e016      	b.n	8006e22 <_strtod_l+0xa72>
 8006df4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006df6:	4f32      	ldr	r7, [pc, #200]	; (8006ec0 <_strtod_l+0xb10>)
 8006df8:	e7a9      	b.n	8006d4e <_strtod_l+0x99e>
 8006dfa:	4b31      	ldr	r3, [pc, #196]	; (8006ec0 <_strtod_l+0xb10>)
 8006dfc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e00:	2200      	movs	r2, #0
 8006e02:	f7f9 fbf9 	bl	80005f8 <__aeabi_dmul>
 8006e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e08:	4605      	mov	r5, r0
 8006e0a:	460f      	mov	r7, r1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d09e      	beq.n	8006d4e <_strtod_l+0x99e>
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006e18:	e79d      	b.n	8006d56 <_strtod_l+0x9a6>
 8006e1a:	4b28      	ldr	r3, [pc, #160]	; (8006ebc <_strtod_l+0xb0c>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006e22:	4f26      	ldr	r7, [pc, #152]	; (8006ebc <_strtod_l+0xb0c>)
 8006e24:	e797      	b.n	8006d56 <_strtod_l+0x9a6>
 8006e26:	4b29      	ldr	r3, [pc, #164]	; (8006ecc <_strtod_l+0xb1c>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006e2e:	4645      	mov	r5, r8
 8006e30:	e7f7      	b.n	8006e22 <_strtod_l+0xa72>
 8006e32:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8006e36:	9b05      	ldr	r3, [sp, #20]
 8006e38:	46ca      	mov	sl, r9
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1bc      	bne.n	8006db8 <_strtod_l+0xa08>
 8006e3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e44:	0d1b      	lsrs	r3, r3, #20
 8006e46:	051b      	lsls	r3, r3, #20
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d1b5      	bne.n	8006db8 <_strtod_l+0xa08>
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	4639      	mov	r1, r7
 8006e50:	f7f9 ff32 	bl	8000cb8 <__aeabi_d2lz>
 8006e54:	f7f9 fba2 	bl	800059c <__aeabi_l2d>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	4639      	mov	r1, r7
 8006e60:	f7f9 fa12 	bl	8000288 <__aeabi_dsub>
 8006e64:	460b      	mov	r3, r1
 8006e66:	4602      	mov	r2, r0
 8006e68:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006e6c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8006e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e72:	ea4a 0a08 	orr.w	sl, sl, r8
 8006e76:	ea5a 0a03 	orrs.w	sl, sl, r3
 8006e7a:	d06a      	beq.n	8006f52 <_strtod_l+0xba2>
 8006e7c:	a308      	add	r3, pc, #32	; (adr r3, 8006ea0 <_strtod_l+0xaf0>)
 8006e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e82:	f7f9 fe2b 	bl	8000adc <__aeabi_dcmplt>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	f47f acda 	bne.w	8006840 <_strtod_l+0x490>
 8006e8c:	a306      	add	r3, pc, #24	; (adr r3, 8006ea8 <_strtod_l+0xaf8>)
 8006e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e96:	f7f9 fe3f 	bl	8000b18 <__aeabi_dcmpgt>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	d08c      	beq.n	8006db8 <_strtod_l+0xa08>
 8006e9e:	e4cf      	b.n	8006840 <_strtod_l+0x490>
 8006ea0:	94a03595 	.word	0x94a03595
 8006ea4:	3fdfffff 	.word	0x3fdfffff
 8006ea8:	35afe535 	.word	0x35afe535
 8006eac:	3fe00000 	.word	0x3fe00000
 8006eb0:	000fffff 	.word	0x000fffff
 8006eb4:	7ff00000 	.word	0x7ff00000
 8006eb8:	7fefffff 	.word	0x7fefffff
 8006ebc:	3ff00000 	.word	0x3ff00000
 8006ec0:	3fe00000 	.word	0x3fe00000
 8006ec4:	7fe00000 	.word	0x7fe00000
 8006ec8:	7c9fffff 	.word	0x7c9fffff
 8006ecc:	bff00000 	.word	0xbff00000
 8006ed0:	9b05      	ldr	r3, [sp, #20]
 8006ed2:	b333      	cbz	r3, 8006f22 <_strtod_l+0xb72>
 8006ed4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ed6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006eda:	d822      	bhi.n	8006f22 <_strtod_l+0xb72>
 8006edc:	a328      	add	r3, pc, #160	; (adr r3, 8006f80 <_strtod_l+0xbd0>)
 8006ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	4639      	mov	r1, r7
 8006ee6:	f7f9 fe03 	bl	8000af0 <__aeabi_dcmple>
 8006eea:	b1a0      	cbz	r0, 8006f16 <_strtod_l+0xb66>
 8006eec:	4639      	mov	r1, r7
 8006eee:	4628      	mov	r0, r5
 8006ef0:	f7f9 fe5a 	bl	8000ba8 <__aeabi_d2uiz>
 8006ef4:	2801      	cmp	r0, #1
 8006ef6:	bf38      	it	cc
 8006ef8:	2001      	movcc	r0, #1
 8006efa:	f7f9 fb03 	bl	8000504 <__aeabi_ui2d>
 8006efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f00:	4605      	mov	r5, r0
 8006f02:	460f      	mov	r7, r1
 8006f04:	bb03      	cbnz	r3, 8006f48 <_strtod_l+0xb98>
 8006f06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f0a:	9014      	str	r0, [sp, #80]	; 0x50
 8006f0c:	9315      	str	r3, [sp, #84]	; 0x54
 8006f0e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006f12:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006f16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006f1a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006f1e:	1a9b      	subs	r3, r3, r2
 8006f20:	9311      	str	r3, [sp, #68]	; 0x44
 8006f22:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006f24:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006f26:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8006f2a:	f7ff f8ed 	bl	8006108 <__ulp>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	4640      	mov	r0, r8
 8006f34:	4649      	mov	r1, r9
 8006f36:	f7f9 fb5f 	bl	80005f8 <__aeabi_dmul>
 8006f3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f3e:	f7f9 f9a5 	bl	800028c <__adddf3>
 8006f42:	4680      	mov	r8, r0
 8006f44:	4689      	mov	r9, r1
 8006f46:	e776      	b.n	8006e36 <_strtod_l+0xa86>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006f50:	e7dd      	b.n	8006f0e <_strtod_l+0xb5e>
 8006f52:	a30d      	add	r3, pc, #52	; (adr r3, 8006f88 <_strtod_l+0xbd8>)
 8006f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f58:	f7f9 fdc0 	bl	8000adc <__aeabi_dcmplt>
 8006f5c:	e79d      	b.n	8006e9a <_strtod_l+0xaea>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	930e      	str	r3, [sp, #56]	; 0x38
 8006f62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	f7ff ba5f 	b.w	800642a <_strtod_l+0x7a>
 8006f6c:	2a65      	cmp	r2, #101	; 0x65
 8006f6e:	f43f ab56 	beq.w	800661e <_strtod_l+0x26e>
 8006f72:	2a45      	cmp	r2, #69	; 0x45
 8006f74:	f43f ab53 	beq.w	800661e <_strtod_l+0x26e>
 8006f78:	2301      	movs	r3, #1
 8006f7a:	f7ff bb8b 	b.w	8006694 <_strtod_l+0x2e4>
 8006f7e:	bf00      	nop
 8006f80:	ffc00000 	.word	0xffc00000
 8006f84:	41dfffff 	.word	0x41dfffff
 8006f88:	94a03595 	.word	0x94a03595
 8006f8c:	3fcfffff 	.word	0x3fcfffff

08006f90 <_strtod_r>:
 8006f90:	4b01      	ldr	r3, [pc, #4]	; (8006f98 <_strtod_r+0x8>)
 8006f92:	f7ff ba0d 	b.w	80063b0 <_strtod_l>
 8006f96:	bf00      	nop
 8006f98:	20000068 	.word	0x20000068

08006f9c <_strtol_l.constprop.0>:
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa2:	4686      	mov	lr, r0
 8006fa4:	4690      	mov	r8, r2
 8006fa6:	d001      	beq.n	8006fac <_strtol_l.constprop.0+0x10>
 8006fa8:	2b24      	cmp	r3, #36	; 0x24
 8006faa:	d906      	bls.n	8006fba <_strtol_l.constprop.0+0x1e>
 8006fac:	f7fd fdac 	bl	8004b08 <__errno>
 8006fb0:	2316      	movs	r3, #22
 8006fb2:	6003      	str	r3, [r0, #0]
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fba:	4836      	ldr	r0, [pc, #216]	; (8007094 <_strtol_l.constprop.0+0xf8>)
 8006fbc:	460d      	mov	r5, r1
 8006fbe:	462a      	mov	r2, r5
 8006fc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006fc4:	5d06      	ldrb	r6, [r0, r4]
 8006fc6:	f016 0608 	ands.w	r6, r6, #8
 8006fca:	d1f8      	bne.n	8006fbe <_strtol_l.constprop.0+0x22>
 8006fcc:	2c2d      	cmp	r4, #45	; 0x2d
 8006fce:	d12e      	bne.n	800702e <_strtol_l.constprop.0+0x92>
 8006fd0:	782c      	ldrb	r4, [r5, #0]
 8006fd2:	2601      	movs	r6, #1
 8006fd4:	1c95      	adds	r5, r2, #2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d057      	beq.n	800708a <_strtol_l.constprop.0+0xee>
 8006fda:	2b10      	cmp	r3, #16
 8006fdc:	d109      	bne.n	8006ff2 <_strtol_l.constprop.0+0x56>
 8006fde:	2c30      	cmp	r4, #48	; 0x30
 8006fe0:	d107      	bne.n	8006ff2 <_strtol_l.constprop.0+0x56>
 8006fe2:	782a      	ldrb	r2, [r5, #0]
 8006fe4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006fe8:	2a58      	cmp	r2, #88	; 0x58
 8006fea:	d149      	bne.n	8007080 <_strtol_l.constprop.0+0xe4>
 8006fec:	786c      	ldrb	r4, [r5, #1]
 8006fee:	2310      	movs	r3, #16
 8006ff0:	3502      	adds	r5, #2
 8006ff2:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8006ff6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	fbbc f9f3 	udiv	r9, ip, r3
 8007000:	4610      	mov	r0, r2
 8007002:	fb03 ca19 	mls	sl, r3, r9, ip
 8007006:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800700a:	2f09      	cmp	r7, #9
 800700c:	d814      	bhi.n	8007038 <_strtol_l.constprop.0+0x9c>
 800700e:	463c      	mov	r4, r7
 8007010:	42a3      	cmp	r3, r4
 8007012:	dd20      	ble.n	8007056 <_strtol_l.constprop.0+0xba>
 8007014:	1c57      	adds	r7, r2, #1
 8007016:	d007      	beq.n	8007028 <_strtol_l.constprop.0+0x8c>
 8007018:	4581      	cmp	r9, r0
 800701a:	d319      	bcc.n	8007050 <_strtol_l.constprop.0+0xb4>
 800701c:	d101      	bne.n	8007022 <_strtol_l.constprop.0+0x86>
 800701e:	45a2      	cmp	sl, r4
 8007020:	db16      	blt.n	8007050 <_strtol_l.constprop.0+0xb4>
 8007022:	fb00 4003 	mla	r0, r0, r3, r4
 8007026:	2201      	movs	r2, #1
 8007028:	f815 4b01 	ldrb.w	r4, [r5], #1
 800702c:	e7eb      	b.n	8007006 <_strtol_l.constprop.0+0x6a>
 800702e:	2c2b      	cmp	r4, #43	; 0x2b
 8007030:	bf04      	itt	eq
 8007032:	782c      	ldrbeq	r4, [r5, #0]
 8007034:	1c95      	addeq	r5, r2, #2
 8007036:	e7ce      	b.n	8006fd6 <_strtol_l.constprop.0+0x3a>
 8007038:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800703c:	2f19      	cmp	r7, #25
 800703e:	d801      	bhi.n	8007044 <_strtol_l.constprop.0+0xa8>
 8007040:	3c37      	subs	r4, #55	; 0x37
 8007042:	e7e5      	b.n	8007010 <_strtol_l.constprop.0+0x74>
 8007044:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007048:	2f19      	cmp	r7, #25
 800704a:	d804      	bhi.n	8007056 <_strtol_l.constprop.0+0xba>
 800704c:	3c57      	subs	r4, #87	; 0x57
 800704e:	e7df      	b.n	8007010 <_strtol_l.constprop.0+0x74>
 8007050:	f04f 32ff 	mov.w	r2, #4294967295
 8007054:	e7e8      	b.n	8007028 <_strtol_l.constprop.0+0x8c>
 8007056:	1c53      	adds	r3, r2, #1
 8007058:	d108      	bne.n	800706c <_strtol_l.constprop.0+0xd0>
 800705a:	2322      	movs	r3, #34	; 0x22
 800705c:	f8ce 3000 	str.w	r3, [lr]
 8007060:	4660      	mov	r0, ip
 8007062:	f1b8 0f00 	cmp.w	r8, #0
 8007066:	d0a6      	beq.n	8006fb6 <_strtol_l.constprop.0+0x1a>
 8007068:	1e69      	subs	r1, r5, #1
 800706a:	e006      	b.n	800707a <_strtol_l.constprop.0+0xde>
 800706c:	b106      	cbz	r6, 8007070 <_strtol_l.constprop.0+0xd4>
 800706e:	4240      	negs	r0, r0
 8007070:	f1b8 0f00 	cmp.w	r8, #0
 8007074:	d09f      	beq.n	8006fb6 <_strtol_l.constprop.0+0x1a>
 8007076:	2a00      	cmp	r2, #0
 8007078:	d1f6      	bne.n	8007068 <_strtol_l.constprop.0+0xcc>
 800707a:	f8c8 1000 	str.w	r1, [r8]
 800707e:	e79a      	b.n	8006fb6 <_strtol_l.constprop.0+0x1a>
 8007080:	2430      	movs	r4, #48	; 0x30
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1b5      	bne.n	8006ff2 <_strtol_l.constprop.0+0x56>
 8007086:	2308      	movs	r3, #8
 8007088:	e7b3      	b.n	8006ff2 <_strtol_l.constprop.0+0x56>
 800708a:	2c30      	cmp	r4, #48	; 0x30
 800708c:	d0a9      	beq.n	8006fe2 <_strtol_l.constprop.0+0x46>
 800708e:	230a      	movs	r3, #10
 8007090:	e7af      	b.n	8006ff2 <_strtol_l.constprop.0+0x56>
 8007092:	bf00      	nop
 8007094:	08008429 	.word	0x08008429

08007098 <_strtol_r>:
 8007098:	f7ff bf80 	b.w	8006f9c <_strtol_l.constprop.0>

0800709c <__ssputs_r>:
 800709c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070a0:	688e      	ldr	r6, [r1, #8]
 80070a2:	461f      	mov	r7, r3
 80070a4:	42be      	cmp	r6, r7
 80070a6:	680b      	ldr	r3, [r1, #0]
 80070a8:	4682      	mov	sl, r0
 80070aa:	460c      	mov	r4, r1
 80070ac:	4690      	mov	r8, r2
 80070ae:	d82c      	bhi.n	800710a <__ssputs_r+0x6e>
 80070b0:	898a      	ldrh	r2, [r1, #12]
 80070b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070b6:	d026      	beq.n	8007106 <__ssputs_r+0x6a>
 80070b8:	6965      	ldr	r5, [r4, #20]
 80070ba:	6909      	ldr	r1, [r1, #16]
 80070bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070c0:	eba3 0901 	sub.w	r9, r3, r1
 80070c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070c8:	1c7b      	adds	r3, r7, #1
 80070ca:	444b      	add	r3, r9
 80070cc:	106d      	asrs	r5, r5, #1
 80070ce:	429d      	cmp	r5, r3
 80070d0:	bf38      	it	cc
 80070d2:	461d      	movcc	r5, r3
 80070d4:	0553      	lsls	r3, r2, #21
 80070d6:	d527      	bpl.n	8007128 <__ssputs_r+0x8c>
 80070d8:	4629      	mov	r1, r5
 80070da:	f7fe fc1f 	bl	800591c <_malloc_r>
 80070de:	4606      	mov	r6, r0
 80070e0:	b360      	cbz	r0, 800713c <__ssputs_r+0xa0>
 80070e2:	6921      	ldr	r1, [r4, #16]
 80070e4:	464a      	mov	r2, r9
 80070e6:	f000 fbdd 	bl	80078a4 <memcpy>
 80070ea:	89a3      	ldrh	r3, [r4, #12]
 80070ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f4:	81a3      	strh	r3, [r4, #12]
 80070f6:	6126      	str	r6, [r4, #16]
 80070f8:	6165      	str	r5, [r4, #20]
 80070fa:	444e      	add	r6, r9
 80070fc:	eba5 0509 	sub.w	r5, r5, r9
 8007100:	6026      	str	r6, [r4, #0]
 8007102:	60a5      	str	r5, [r4, #8]
 8007104:	463e      	mov	r6, r7
 8007106:	42be      	cmp	r6, r7
 8007108:	d900      	bls.n	800710c <__ssputs_r+0x70>
 800710a:	463e      	mov	r6, r7
 800710c:	6820      	ldr	r0, [r4, #0]
 800710e:	4632      	mov	r2, r6
 8007110:	4641      	mov	r1, r8
 8007112:	f000 fb69 	bl	80077e8 <memmove>
 8007116:	68a3      	ldr	r3, [r4, #8]
 8007118:	1b9b      	subs	r3, r3, r6
 800711a:	60a3      	str	r3, [r4, #8]
 800711c:	6823      	ldr	r3, [r4, #0]
 800711e:	4433      	add	r3, r6
 8007120:	6023      	str	r3, [r4, #0]
 8007122:	2000      	movs	r0, #0
 8007124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007128:	462a      	mov	r2, r5
 800712a:	f000 ff6c 	bl	8008006 <_realloc_r>
 800712e:	4606      	mov	r6, r0
 8007130:	2800      	cmp	r0, #0
 8007132:	d1e0      	bne.n	80070f6 <__ssputs_r+0x5a>
 8007134:	6921      	ldr	r1, [r4, #16]
 8007136:	4650      	mov	r0, sl
 8007138:	f7fe fb7e 	bl	8005838 <_free_r>
 800713c:	230c      	movs	r3, #12
 800713e:	f8ca 3000 	str.w	r3, [sl]
 8007142:	89a3      	ldrh	r3, [r4, #12]
 8007144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007148:	81a3      	strh	r3, [r4, #12]
 800714a:	f04f 30ff 	mov.w	r0, #4294967295
 800714e:	e7e9      	b.n	8007124 <__ssputs_r+0x88>

08007150 <_svfiprintf_r>:
 8007150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007154:	4698      	mov	r8, r3
 8007156:	898b      	ldrh	r3, [r1, #12]
 8007158:	061b      	lsls	r3, r3, #24
 800715a:	b09d      	sub	sp, #116	; 0x74
 800715c:	4607      	mov	r7, r0
 800715e:	460d      	mov	r5, r1
 8007160:	4614      	mov	r4, r2
 8007162:	d50e      	bpl.n	8007182 <_svfiprintf_r+0x32>
 8007164:	690b      	ldr	r3, [r1, #16]
 8007166:	b963      	cbnz	r3, 8007182 <_svfiprintf_r+0x32>
 8007168:	2140      	movs	r1, #64	; 0x40
 800716a:	f7fe fbd7 	bl	800591c <_malloc_r>
 800716e:	6028      	str	r0, [r5, #0]
 8007170:	6128      	str	r0, [r5, #16]
 8007172:	b920      	cbnz	r0, 800717e <_svfiprintf_r+0x2e>
 8007174:	230c      	movs	r3, #12
 8007176:	603b      	str	r3, [r7, #0]
 8007178:	f04f 30ff 	mov.w	r0, #4294967295
 800717c:	e0d0      	b.n	8007320 <_svfiprintf_r+0x1d0>
 800717e:	2340      	movs	r3, #64	; 0x40
 8007180:	616b      	str	r3, [r5, #20]
 8007182:	2300      	movs	r3, #0
 8007184:	9309      	str	r3, [sp, #36]	; 0x24
 8007186:	2320      	movs	r3, #32
 8007188:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800718c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007190:	2330      	movs	r3, #48	; 0x30
 8007192:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007338 <_svfiprintf_r+0x1e8>
 8007196:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800719a:	f04f 0901 	mov.w	r9, #1
 800719e:	4623      	mov	r3, r4
 80071a0:	469a      	mov	sl, r3
 80071a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071a6:	b10a      	cbz	r2, 80071ac <_svfiprintf_r+0x5c>
 80071a8:	2a25      	cmp	r2, #37	; 0x25
 80071aa:	d1f9      	bne.n	80071a0 <_svfiprintf_r+0x50>
 80071ac:	ebba 0b04 	subs.w	fp, sl, r4
 80071b0:	d00b      	beq.n	80071ca <_svfiprintf_r+0x7a>
 80071b2:	465b      	mov	r3, fp
 80071b4:	4622      	mov	r2, r4
 80071b6:	4629      	mov	r1, r5
 80071b8:	4638      	mov	r0, r7
 80071ba:	f7ff ff6f 	bl	800709c <__ssputs_r>
 80071be:	3001      	adds	r0, #1
 80071c0:	f000 80a9 	beq.w	8007316 <_svfiprintf_r+0x1c6>
 80071c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071c6:	445a      	add	r2, fp
 80071c8:	9209      	str	r2, [sp, #36]	; 0x24
 80071ca:	f89a 3000 	ldrb.w	r3, [sl]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f000 80a1 	beq.w	8007316 <_svfiprintf_r+0x1c6>
 80071d4:	2300      	movs	r3, #0
 80071d6:	f04f 32ff 	mov.w	r2, #4294967295
 80071da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071de:	f10a 0a01 	add.w	sl, sl, #1
 80071e2:	9304      	str	r3, [sp, #16]
 80071e4:	9307      	str	r3, [sp, #28]
 80071e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071ea:	931a      	str	r3, [sp, #104]	; 0x68
 80071ec:	4654      	mov	r4, sl
 80071ee:	2205      	movs	r2, #5
 80071f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f4:	4850      	ldr	r0, [pc, #320]	; (8007338 <_svfiprintf_r+0x1e8>)
 80071f6:	f7f8 ffeb 	bl	80001d0 <memchr>
 80071fa:	9a04      	ldr	r2, [sp, #16]
 80071fc:	b9d8      	cbnz	r0, 8007236 <_svfiprintf_r+0xe6>
 80071fe:	06d0      	lsls	r0, r2, #27
 8007200:	bf44      	itt	mi
 8007202:	2320      	movmi	r3, #32
 8007204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007208:	0711      	lsls	r1, r2, #28
 800720a:	bf44      	itt	mi
 800720c:	232b      	movmi	r3, #43	; 0x2b
 800720e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007212:	f89a 3000 	ldrb.w	r3, [sl]
 8007216:	2b2a      	cmp	r3, #42	; 0x2a
 8007218:	d015      	beq.n	8007246 <_svfiprintf_r+0xf6>
 800721a:	9a07      	ldr	r2, [sp, #28]
 800721c:	4654      	mov	r4, sl
 800721e:	2000      	movs	r0, #0
 8007220:	f04f 0c0a 	mov.w	ip, #10
 8007224:	4621      	mov	r1, r4
 8007226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800722a:	3b30      	subs	r3, #48	; 0x30
 800722c:	2b09      	cmp	r3, #9
 800722e:	d94d      	bls.n	80072cc <_svfiprintf_r+0x17c>
 8007230:	b1b0      	cbz	r0, 8007260 <_svfiprintf_r+0x110>
 8007232:	9207      	str	r2, [sp, #28]
 8007234:	e014      	b.n	8007260 <_svfiprintf_r+0x110>
 8007236:	eba0 0308 	sub.w	r3, r0, r8
 800723a:	fa09 f303 	lsl.w	r3, r9, r3
 800723e:	4313      	orrs	r3, r2
 8007240:	9304      	str	r3, [sp, #16]
 8007242:	46a2      	mov	sl, r4
 8007244:	e7d2      	b.n	80071ec <_svfiprintf_r+0x9c>
 8007246:	9b03      	ldr	r3, [sp, #12]
 8007248:	1d19      	adds	r1, r3, #4
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	9103      	str	r1, [sp, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	bfbb      	ittet	lt
 8007252:	425b      	neglt	r3, r3
 8007254:	f042 0202 	orrlt.w	r2, r2, #2
 8007258:	9307      	strge	r3, [sp, #28]
 800725a:	9307      	strlt	r3, [sp, #28]
 800725c:	bfb8      	it	lt
 800725e:	9204      	strlt	r2, [sp, #16]
 8007260:	7823      	ldrb	r3, [r4, #0]
 8007262:	2b2e      	cmp	r3, #46	; 0x2e
 8007264:	d10c      	bne.n	8007280 <_svfiprintf_r+0x130>
 8007266:	7863      	ldrb	r3, [r4, #1]
 8007268:	2b2a      	cmp	r3, #42	; 0x2a
 800726a:	d134      	bne.n	80072d6 <_svfiprintf_r+0x186>
 800726c:	9b03      	ldr	r3, [sp, #12]
 800726e:	1d1a      	adds	r2, r3, #4
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	9203      	str	r2, [sp, #12]
 8007274:	2b00      	cmp	r3, #0
 8007276:	bfb8      	it	lt
 8007278:	f04f 33ff 	movlt.w	r3, #4294967295
 800727c:	3402      	adds	r4, #2
 800727e:	9305      	str	r3, [sp, #20]
 8007280:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800733c <_svfiprintf_r+0x1ec>
 8007284:	7821      	ldrb	r1, [r4, #0]
 8007286:	2203      	movs	r2, #3
 8007288:	4650      	mov	r0, sl
 800728a:	f7f8 ffa1 	bl	80001d0 <memchr>
 800728e:	b138      	cbz	r0, 80072a0 <_svfiprintf_r+0x150>
 8007290:	9b04      	ldr	r3, [sp, #16]
 8007292:	eba0 000a 	sub.w	r0, r0, sl
 8007296:	2240      	movs	r2, #64	; 0x40
 8007298:	4082      	lsls	r2, r0
 800729a:	4313      	orrs	r3, r2
 800729c:	3401      	adds	r4, #1
 800729e:	9304      	str	r3, [sp, #16]
 80072a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a4:	4826      	ldr	r0, [pc, #152]	; (8007340 <_svfiprintf_r+0x1f0>)
 80072a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072aa:	2206      	movs	r2, #6
 80072ac:	f7f8 ff90 	bl	80001d0 <memchr>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d038      	beq.n	8007326 <_svfiprintf_r+0x1d6>
 80072b4:	4b23      	ldr	r3, [pc, #140]	; (8007344 <_svfiprintf_r+0x1f4>)
 80072b6:	bb1b      	cbnz	r3, 8007300 <_svfiprintf_r+0x1b0>
 80072b8:	9b03      	ldr	r3, [sp, #12]
 80072ba:	3307      	adds	r3, #7
 80072bc:	f023 0307 	bic.w	r3, r3, #7
 80072c0:	3308      	adds	r3, #8
 80072c2:	9303      	str	r3, [sp, #12]
 80072c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c6:	4433      	add	r3, r6
 80072c8:	9309      	str	r3, [sp, #36]	; 0x24
 80072ca:	e768      	b.n	800719e <_svfiprintf_r+0x4e>
 80072cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80072d0:	460c      	mov	r4, r1
 80072d2:	2001      	movs	r0, #1
 80072d4:	e7a6      	b.n	8007224 <_svfiprintf_r+0xd4>
 80072d6:	2300      	movs	r3, #0
 80072d8:	3401      	adds	r4, #1
 80072da:	9305      	str	r3, [sp, #20]
 80072dc:	4619      	mov	r1, r3
 80072de:	f04f 0c0a 	mov.w	ip, #10
 80072e2:	4620      	mov	r0, r4
 80072e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072e8:	3a30      	subs	r2, #48	; 0x30
 80072ea:	2a09      	cmp	r2, #9
 80072ec:	d903      	bls.n	80072f6 <_svfiprintf_r+0x1a6>
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0c6      	beq.n	8007280 <_svfiprintf_r+0x130>
 80072f2:	9105      	str	r1, [sp, #20]
 80072f4:	e7c4      	b.n	8007280 <_svfiprintf_r+0x130>
 80072f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80072fa:	4604      	mov	r4, r0
 80072fc:	2301      	movs	r3, #1
 80072fe:	e7f0      	b.n	80072e2 <_svfiprintf_r+0x192>
 8007300:	ab03      	add	r3, sp, #12
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	462a      	mov	r2, r5
 8007306:	4b10      	ldr	r3, [pc, #64]	; (8007348 <_svfiprintf_r+0x1f8>)
 8007308:	a904      	add	r1, sp, #16
 800730a:	4638      	mov	r0, r7
 800730c:	f7fc fbba 	bl	8003a84 <_printf_float>
 8007310:	1c42      	adds	r2, r0, #1
 8007312:	4606      	mov	r6, r0
 8007314:	d1d6      	bne.n	80072c4 <_svfiprintf_r+0x174>
 8007316:	89ab      	ldrh	r3, [r5, #12]
 8007318:	065b      	lsls	r3, r3, #25
 800731a:	f53f af2d 	bmi.w	8007178 <_svfiprintf_r+0x28>
 800731e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007320:	b01d      	add	sp, #116	; 0x74
 8007322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007326:	ab03      	add	r3, sp, #12
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	462a      	mov	r2, r5
 800732c:	4b06      	ldr	r3, [pc, #24]	; (8007348 <_svfiprintf_r+0x1f8>)
 800732e:	a904      	add	r1, sp, #16
 8007330:	4638      	mov	r0, r7
 8007332:	f7fc fe41 	bl	8003fb8 <_printf_i>
 8007336:	e7eb      	b.n	8007310 <_svfiprintf_r+0x1c0>
 8007338:	08008529 	.word	0x08008529
 800733c:	0800852f 	.word	0x0800852f
 8007340:	08008533 	.word	0x08008533
 8007344:	08003a85 	.word	0x08003a85
 8007348:	0800709d 	.word	0x0800709d

0800734c <__sfputc_r>:
 800734c:	6893      	ldr	r3, [r2, #8]
 800734e:	3b01      	subs	r3, #1
 8007350:	2b00      	cmp	r3, #0
 8007352:	b410      	push	{r4}
 8007354:	6093      	str	r3, [r2, #8]
 8007356:	da07      	bge.n	8007368 <__sfputc_r+0x1c>
 8007358:	6994      	ldr	r4, [r2, #24]
 800735a:	42a3      	cmp	r3, r4
 800735c:	db01      	blt.n	8007362 <__sfputc_r+0x16>
 800735e:	290a      	cmp	r1, #10
 8007360:	d102      	bne.n	8007368 <__sfputc_r+0x1c>
 8007362:	bc10      	pop	{r4}
 8007364:	f7fd bae9 	b.w	800493a <__swbuf_r>
 8007368:	6813      	ldr	r3, [r2, #0]
 800736a:	1c58      	adds	r0, r3, #1
 800736c:	6010      	str	r0, [r2, #0]
 800736e:	7019      	strb	r1, [r3, #0]
 8007370:	4608      	mov	r0, r1
 8007372:	bc10      	pop	{r4}
 8007374:	4770      	bx	lr

08007376 <__sfputs_r>:
 8007376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007378:	4606      	mov	r6, r0
 800737a:	460f      	mov	r7, r1
 800737c:	4614      	mov	r4, r2
 800737e:	18d5      	adds	r5, r2, r3
 8007380:	42ac      	cmp	r4, r5
 8007382:	d101      	bne.n	8007388 <__sfputs_r+0x12>
 8007384:	2000      	movs	r0, #0
 8007386:	e007      	b.n	8007398 <__sfputs_r+0x22>
 8007388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800738c:	463a      	mov	r2, r7
 800738e:	4630      	mov	r0, r6
 8007390:	f7ff ffdc 	bl	800734c <__sfputc_r>
 8007394:	1c43      	adds	r3, r0, #1
 8007396:	d1f3      	bne.n	8007380 <__sfputs_r+0xa>
 8007398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800739c <_vfiprintf_r>:
 800739c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a0:	460d      	mov	r5, r1
 80073a2:	b09d      	sub	sp, #116	; 0x74
 80073a4:	4614      	mov	r4, r2
 80073a6:	4698      	mov	r8, r3
 80073a8:	4606      	mov	r6, r0
 80073aa:	b118      	cbz	r0, 80073b4 <_vfiprintf_r+0x18>
 80073ac:	6a03      	ldr	r3, [r0, #32]
 80073ae:	b90b      	cbnz	r3, 80073b4 <_vfiprintf_r+0x18>
 80073b0:	f7fd f9bc 	bl	800472c <__sinit>
 80073b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073b6:	07d9      	lsls	r1, r3, #31
 80073b8:	d405      	bmi.n	80073c6 <_vfiprintf_r+0x2a>
 80073ba:	89ab      	ldrh	r3, [r5, #12]
 80073bc:	059a      	lsls	r2, r3, #22
 80073be:	d402      	bmi.n	80073c6 <_vfiprintf_r+0x2a>
 80073c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073c2:	f7fd fbcc 	bl	8004b5e <__retarget_lock_acquire_recursive>
 80073c6:	89ab      	ldrh	r3, [r5, #12]
 80073c8:	071b      	lsls	r3, r3, #28
 80073ca:	d501      	bpl.n	80073d0 <_vfiprintf_r+0x34>
 80073cc:	692b      	ldr	r3, [r5, #16]
 80073ce:	b99b      	cbnz	r3, 80073f8 <_vfiprintf_r+0x5c>
 80073d0:	4629      	mov	r1, r5
 80073d2:	4630      	mov	r0, r6
 80073d4:	f7fd faee 	bl	80049b4 <__swsetup_r>
 80073d8:	b170      	cbz	r0, 80073f8 <_vfiprintf_r+0x5c>
 80073da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073dc:	07dc      	lsls	r4, r3, #31
 80073de:	d504      	bpl.n	80073ea <_vfiprintf_r+0x4e>
 80073e0:	f04f 30ff 	mov.w	r0, #4294967295
 80073e4:	b01d      	add	sp, #116	; 0x74
 80073e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ea:	89ab      	ldrh	r3, [r5, #12]
 80073ec:	0598      	lsls	r0, r3, #22
 80073ee:	d4f7      	bmi.n	80073e0 <_vfiprintf_r+0x44>
 80073f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073f2:	f7fd fbb5 	bl	8004b60 <__retarget_lock_release_recursive>
 80073f6:	e7f3      	b.n	80073e0 <_vfiprintf_r+0x44>
 80073f8:	2300      	movs	r3, #0
 80073fa:	9309      	str	r3, [sp, #36]	; 0x24
 80073fc:	2320      	movs	r3, #32
 80073fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007402:	f8cd 800c 	str.w	r8, [sp, #12]
 8007406:	2330      	movs	r3, #48	; 0x30
 8007408:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80075bc <_vfiprintf_r+0x220>
 800740c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007410:	f04f 0901 	mov.w	r9, #1
 8007414:	4623      	mov	r3, r4
 8007416:	469a      	mov	sl, r3
 8007418:	f813 2b01 	ldrb.w	r2, [r3], #1
 800741c:	b10a      	cbz	r2, 8007422 <_vfiprintf_r+0x86>
 800741e:	2a25      	cmp	r2, #37	; 0x25
 8007420:	d1f9      	bne.n	8007416 <_vfiprintf_r+0x7a>
 8007422:	ebba 0b04 	subs.w	fp, sl, r4
 8007426:	d00b      	beq.n	8007440 <_vfiprintf_r+0xa4>
 8007428:	465b      	mov	r3, fp
 800742a:	4622      	mov	r2, r4
 800742c:	4629      	mov	r1, r5
 800742e:	4630      	mov	r0, r6
 8007430:	f7ff ffa1 	bl	8007376 <__sfputs_r>
 8007434:	3001      	adds	r0, #1
 8007436:	f000 80a9 	beq.w	800758c <_vfiprintf_r+0x1f0>
 800743a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800743c:	445a      	add	r2, fp
 800743e:	9209      	str	r2, [sp, #36]	; 0x24
 8007440:	f89a 3000 	ldrb.w	r3, [sl]
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 80a1 	beq.w	800758c <_vfiprintf_r+0x1f0>
 800744a:	2300      	movs	r3, #0
 800744c:	f04f 32ff 	mov.w	r2, #4294967295
 8007450:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007454:	f10a 0a01 	add.w	sl, sl, #1
 8007458:	9304      	str	r3, [sp, #16]
 800745a:	9307      	str	r3, [sp, #28]
 800745c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007460:	931a      	str	r3, [sp, #104]	; 0x68
 8007462:	4654      	mov	r4, sl
 8007464:	2205      	movs	r2, #5
 8007466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800746a:	4854      	ldr	r0, [pc, #336]	; (80075bc <_vfiprintf_r+0x220>)
 800746c:	f7f8 feb0 	bl	80001d0 <memchr>
 8007470:	9a04      	ldr	r2, [sp, #16]
 8007472:	b9d8      	cbnz	r0, 80074ac <_vfiprintf_r+0x110>
 8007474:	06d1      	lsls	r1, r2, #27
 8007476:	bf44      	itt	mi
 8007478:	2320      	movmi	r3, #32
 800747a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800747e:	0713      	lsls	r3, r2, #28
 8007480:	bf44      	itt	mi
 8007482:	232b      	movmi	r3, #43	; 0x2b
 8007484:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007488:	f89a 3000 	ldrb.w	r3, [sl]
 800748c:	2b2a      	cmp	r3, #42	; 0x2a
 800748e:	d015      	beq.n	80074bc <_vfiprintf_r+0x120>
 8007490:	9a07      	ldr	r2, [sp, #28]
 8007492:	4654      	mov	r4, sl
 8007494:	2000      	movs	r0, #0
 8007496:	f04f 0c0a 	mov.w	ip, #10
 800749a:	4621      	mov	r1, r4
 800749c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074a0:	3b30      	subs	r3, #48	; 0x30
 80074a2:	2b09      	cmp	r3, #9
 80074a4:	d94d      	bls.n	8007542 <_vfiprintf_r+0x1a6>
 80074a6:	b1b0      	cbz	r0, 80074d6 <_vfiprintf_r+0x13a>
 80074a8:	9207      	str	r2, [sp, #28]
 80074aa:	e014      	b.n	80074d6 <_vfiprintf_r+0x13a>
 80074ac:	eba0 0308 	sub.w	r3, r0, r8
 80074b0:	fa09 f303 	lsl.w	r3, r9, r3
 80074b4:	4313      	orrs	r3, r2
 80074b6:	9304      	str	r3, [sp, #16]
 80074b8:	46a2      	mov	sl, r4
 80074ba:	e7d2      	b.n	8007462 <_vfiprintf_r+0xc6>
 80074bc:	9b03      	ldr	r3, [sp, #12]
 80074be:	1d19      	adds	r1, r3, #4
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	9103      	str	r1, [sp, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	bfbb      	ittet	lt
 80074c8:	425b      	neglt	r3, r3
 80074ca:	f042 0202 	orrlt.w	r2, r2, #2
 80074ce:	9307      	strge	r3, [sp, #28]
 80074d0:	9307      	strlt	r3, [sp, #28]
 80074d2:	bfb8      	it	lt
 80074d4:	9204      	strlt	r2, [sp, #16]
 80074d6:	7823      	ldrb	r3, [r4, #0]
 80074d8:	2b2e      	cmp	r3, #46	; 0x2e
 80074da:	d10c      	bne.n	80074f6 <_vfiprintf_r+0x15a>
 80074dc:	7863      	ldrb	r3, [r4, #1]
 80074de:	2b2a      	cmp	r3, #42	; 0x2a
 80074e0:	d134      	bne.n	800754c <_vfiprintf_r+0x1b0>
 80074e2:	9b03      	ldr	r3, [sp, #12]
 80074e4:	1d1a      	adds	r2, r3, #4
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	9203      	str	r2, [sp, #12]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	bfb8      	it	lt
 80074ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80074f2:	3402      	adds	r4, #2
 80074f4:	9305      	str	r3, [sp, #20]
 80074f6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80075c0 <_vfiprintf_r+0x224>
 80074fa:	7821      	ldrb	r1, [r4, #0]
 80074fc:	2203      	movs	r2, #3
 80074fe:	4650      	mov	r0, sl
 8007500:	f7f8 fe66 	bl	80001d0 <memchr>
 8007504:	b138      	cbz	r0, 8007516 <_vfiprintf_r+0x17a>
 8007506:	9b04      	ldr	r3, [sp, #16]
 8007508:	eba0 000a 	sub.w	r0, r0, sl
 800750c:	2240      	movs	r2, #64	; 0x40
 800750e:	4082      	lsls	r2, r0
 8007510:	4313      	orrs	r3, r2
 8007512:	3401      	adds	r4, #1
 8007514:	9304      	str	r3, [sp, #16]
 8007516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800751a:	482a      	ldr	r0, [pc, #168]	; (80075c4 <_vfiprintf_r+0x228>)
 800751c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007520:	2206      	movs	r2, #6
 8007522:	f7f8 fe55 	bl	80001d0 <memchr>
 8007526:	2800      	cmp	r0, #0
 8007528:	d03f      	beq.n	80075aa <_vfiprintf_r+0x20e>
 800752a:	4b27      	ldr	r3, [pc, #156]	; (80075c8 <_vfiprintf_r+0x22c>)
 800752c:	bb1b      	cbnz	r3, 8007576 <_vfiprintf_r+0x1da>
 800752e:	9b03      	ldr	r3, [sp, #12]
 8007530:	3307      	adds	r3, #7
 8007532:	f023 0307 	bic.w	r3, r3, #7
 8007536:	3308      	adds	r3, #8
 8007538:	9303      	str	r3, [sp, #12]
 800753a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800753c:	443b      	add	r3, r7
 800753e:	9309      	str	r3, [sp, #36]	; 0x24
 8007540:	e768      	b.n	8007414 <_vfiprintf_r+0x78>
 8007542:	fb0c 3202 	mla	r2, ip, r2, r3
 8007546:	460c      	mov	r4, r1
 8007548:	2001      	movs	r0, #1
 800754a:	e7a6      	b.n	800749a <_vfiprintf_r+0xfe>
 800754c:	2300      	movs	r3, #0
 800754e:	3401      	adds	r4, #1
 8007550:	9305      	str	r3, [sp, #20]
 8007552:	4619      	mov	r1, r3
 8007554:	f04f 0c0a 	mov.w	ip, #10
 8007558:	4620      	mov	r0, r4
 800755a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800755e:	3a30      	subs	r2, #48	; 0x30
 8007560:	2a09      	cmp	r2, #9
 8007562:	d903      	bls.n	800756c <_vfiprintf_r+0x1d0>
 8007564:	2b00      	cmp	r3, #0
 8007566:	d0c6      	beq.n	80074f6 <_vfiprintf_r+0x15a>
 8007568:	9105      	str	r1, [sp, #20]
 800756a:	e7c4      	b.n	80074f6 <_vfiprintf_r+0x15a>
 800756c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007570:	4604      	mov	r4, r0
 8007572:	2301      	movs	r3, #1
 8007574:	e7f0      	b.n	8007558 <_vfiprintf_r+0x1bc>
 8007576:	ab03      	add	r3, sp, #12
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	462a      	mov	r2, r5
 800757c:	4b13      	ldr	r3, [pc, #76]	; (80075cc <_vfiprintf_r+0x230>)
 800757e:	a904      	add	r1, sp, #16
 8007580:	4630      	mov	r0, r6
 8007582:	f7fc fa7f 	bl	8003a84 <_printf_float>
 8007586:	4607      	mov	r7, r0
 8007588:	1c78      	adds	r0, r7, #1
 800758a:	d1d6      	bne.n	800753a <_vfiprintf_r+0x19e>
 800758c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800758e:	07d9      	lsls	r1, r3, #31
 8007590:	d405      	bmi.n	800759e <_vfiprintf_r+0x202>
 8007592:	89ab      	ldrh	r3, [r5, #12]
 8007594:	059a      	lsls	r2, r3, #22
 8007596:	d402      	bmi.n	800759e <_vfiprintf_r+0x202>
 8007598:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800759a:	f7fd fae1 	bl	8004b60 <__retarget_lock_release_recursive>
 800759e:	89ab      	ldrh	r3, [r5, #12]
 80075a0:	065b      	lsls	r3, r3, #25
 80075a2:	f53f af1d 	bmi.w	80073e0 <_vfiprintf_r+0x44>
 80075a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075a8:	e71c      	b.n	80073e4 <_vfiprintf_r+0x48>
 80075aa:	ab03      	add	r3, sp, #12
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	462a      	mov	r2, r5
 80075b0:	4b06      	ldr	r3, [pc, #24]	; (80075cc <_vfiprintf_r+0x230>)
 80075b2:	a904      	add	r1, sp, #16
 80075b4:	4630      	mov	r0, r6
 80075b6:	f7fc fcff 	bl	8003fb8 <_printf_i>
 80075ba:	e7e4      	b.n	8007586 <_vfiprintf_r+0x1ea>
 80075bc:	08008529 	.word	0x08008529
 80075c0:	0800852f 	.word	0x0800852f
 80075c4:	08008533 	.word	0x08008533
 80075c8:	08003a85 	.word	0x08003a85
 80075cc:	08007377 	.word	0x08007377

080075d0 <__sflush_r>:
 80075d0:	898a      	ldrh	r2, [r1, #12]
 80075d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d4:	4605      	mov	r5, r0
 80075d6:	0710      	lsls	r0, r2, #28
 80075d8:	460c      	mov	r4, r1
 80075da:	d457      	bmi.n	800768c <__sflush_r+0xbc>
 80075dc:	684b      	ldr	r3, [r1, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	dc04      	bgt.n	80075ec <__sflush_r+0x1c>
 80075e2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	dc01      	bgt.n	80075ec <__sflush_r+0x1c>
 80075e8:	2000      	movs	r0, #0
 80075ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075ee:	2e00      	cmp	r6, #0
 80075f0:	d0fa      	beq.n	80075e8 <__sflush_r+0x18>
 80075f2:	2300      	movs	r3, #0
 80075f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075f8:	682f      	ldr	r7, [r5, #0]
 80075fa:	6a21      	ldr	r1, [r4, #32]
 80075fc:	602b      	str	r3, [r5, #0]
 80075fe:	d032      	beq.n	8007666 <__sflush_r+0x96>
 8007600:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007602:	89a3      	ldrh	r3, [r4, #12]
 8007604:	075a      	lsls	r2, r3, #29
 8007606:	d505      	bpl.n	8007614 <__sflush_r+0x44>
 8007608:	6863      	ldr	r3, [r4, #4]
 800760a:	1ac0      	subs	r0, r0, r3
 800760c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800760e:	b10b      	cbz	r3, 8007614 <__sflush_r+0x44>
 8007610:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007612:	1ac0      	subs	r0, r0, r3
 8007614:	2300      	movs	r3, #0
 8007616:	4602      	mov	r2, r0
 8007618:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800761a:	6a21      	ldr	r1, [r4, #32]
 800761c:	4628      	mov	r0, r5
 800761e:	47b0      	blx	r6
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	89a3      	ldrh	r3, [r4, #12]
 8007624:	d106      	bne.n	8007634 <__sflush_r+0x64>
 8007626:	6829      	ldr	r1, [r5, #0]
 8007628:	291d      	cmp	r1, #29
 800762a:	d82b      	bhi.n	8007684 <__sflush_r+0xb4>
 800762c:	4a28      	ldr	r2, [pc, #160]	; (80076d0 <__sflush_r+0x100>)
 800762e:	410a      	asrs	r2, r1
 8007630:	07d6      	lsls	r6, r2, #31
 8007632:	d427      	bmi.n	8007684 <__sflush_r+0xb4>
 8007634:	2200      	movs	r2, #0
 8007636:	6062      	str	r2, [r4, #4]
 8007638:	04d9      	lsls	r1, r3, #19
 800763a:	6922      	ldr	r2, [r4, #16]
 800763c:	6022      	str	r2, [r4, #0]
 800763e:	d504      	bpl.n	800764a <__sflush_r+0x7a>
 8007640:	1c42      	adds	r2, r0, #1
 8007642:	d101      	bne.n	8007648 <__sflush_r+0x78>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	b903      	cbnz	r3, 800764a <__sflush_r+0x7a>
 8007648:	6560      	str	r0, [r4, #84]	; 0x54
 800764a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800764c:	602f      	str	r7, [r5, #0]
 800764e:	2900      	cmp	r1, #0
 8007650:	d0ca      	beq.n	80075e8 <__sflush_r+0x18>
 8007652:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007656:	4299      	cmp	r1, r3
 8007658:	d002      	beq.n	8007660 <__sflush_r+0x90>
 800765a:	4628      	mov	r0, r5
 800765c:	f7fe f8ec 	bl	8005838 <_free_r>
 8007660:	2000      	movs	r0, #0
 8007662:	6360      	str	r0, [r4, #52]	; 0x34
 8007664:	e7c1      	b.n	80075ea <__sflush_r+0x1a>
 8007666:	2301      	movs	r3, #1
 8007668:	4628      	mov	r0, r5
 800766a:	47b0      	blx	r6
 800766c:	1c41      	adds	r1, r0, #1
 800766e:	d1c8      	bne.n	8007602 <__sflush_r+0x32>
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0c5      	beq.n	8007602 <__sflush_r+0x32>
 8007676:	2b1d      	cmp	r3, #29
 8007678:	d001      	beq.n	800767e <__sflush_r+0xae>
 800767a:	2b16      	cmp	r3, #22
 800767c:	d101      	bne.n	8007682 <__sflush_r+0xb2>
 800767e:	602f      	str	r7, [r5, #0]
 8007680:	e7b2      	b.n	80075e8 <__sflush_r+0x18>
 8007682:	89a3      	ldrh	r3, [r4, #12]
 8007684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007688:	81a3      	strh	r3, [r4, #12]
 800768a:	e7ae      	b.n	80075ea <__sflush_r+0x1a>
 800768c:	690f      	ldr	r7, [r1, #16]
 800768e:	2f00      	cmp	r7, #0
 8007690:	d0aa      	beq.n	80075e8 <__sflush_r+0x18>
 8007692:	0793      	lsls	r3, r2, #30
 8007694:	680e      	ldr	r6, [r1, #0]
 8007696:	bf08      	it	eq
 8007698:	694b      	ldreq	r3, [r1, #20]
 800769a:	600f      	str	r7, [r1, #0]
 800769c:	bf18      	it	ne
 800769e:	2300      	movne	r3, #0
 80076a0:	1bf6      	subs	r6, r6, r7
 80076a2:	608b      	str	r3, [r1, #8]
 80076a4:	2e00      	cmp	r6, #0
 80076a6:	dd9f      	ble.n	80075e8 <__sflush_r+0x18>
 80076a8:	6a21      	ldr	r1, [r4, #32]
 80076aa:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80076ae:	4633      	mov	r3, r6
 80076b0:	463a      	mov	r2, r7
 80076b2:	4628      	mov	r0, r5
 80076b4:	47e0      	blx	ip
 80076b6:	2800      	cmp	r0, #0
 80076b8:	dc06      	bgt.n	80076c8 <__sflush_r+0xf8>
 80076ba:	89a3      	ldrh	r3, [r4, #12]
 80076bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076c0:	81a3      	strh	r3, [r4, #12]
 80076c2:	f04f 30ff 	mov.w	r0, #4294967295
 80076c6:	e790      	b.n	80075ea <__sflush_r+0x1a>
 80076c8:	4407      	add	r7, r0
 80076ca:	1a36      	subs	r6, r6, r0
 80076cc:	e7ea      	b.n	80076a4 <__sflush_r+0xd4>
 80076ce:	bf00      	nop
 80076d0:	dfbffffe 	.word	0xdfbffffe

080076d4 <_fflush_r>:
 80076d4:	b538      	push	{r3, r4, r5, lr}
 80076d6:	690b      	ldr	r3, [r1, #16]
 80076d8:	4605      	mov	r5, r0
 80076da:	460c      	mov	r4, r1
 80076dc:	b913      	cbnz	r3, 80076e4 <_fflush_r+0x10>
 80076de:	2500      	movs	r5, #0
 80076e0:	4628      	mov	r0, r5
 80076e2:	bd38      	pop	{r3, r4, r5, pc}
 80076e4:	b118      	cbz	r0, 80076ee <_fflush_r+0x1a>
 80076e6:	6a03      	ldr	r3, [r0, #32]
 80076e8:	b90b      	cbnz	r3, 80076ee <_fflush_r+0x1a>
 80076ea:	f7fd f81f 	bl	800472c <__sinit>
 80076ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0f3      	beq.n	80076de <_fflush_r+0xa>
 80076f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076f8:	07d0      	lsls	r0, r2, #31
 80076fa:	d404      	bmi.n	8007706 <_fflush_r+0x32>
 80076fc:	0599      	lsls	r1, r3, #22
 80076fe:	d402      	bmi.n	8007706 <_fflush_r+0x32>
 8007700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007702:	f7fd fa2c 	bl	8004b5e <__retarget_lock_acquire_recursive>
 8007706:	4628      	mov	r0, r5
 8007708:	4621      	mov	r1, r4
 800770a:	f7ff ff61 	bl	80075d0 <__sflush_r>
 800770e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007710:	07da      	lsls	r2, r3, #31
 8007712:	4605      	mov	r5, r0
 8007714:	d4e4      	bmi.n	80076e0 <_fflush_r+0xc>
 8007716:	89a3      	ldrh	r3, [r4, #12]
 8007718:	059b      	lsls	r3, r3, #22
 800771a:	d4e1      	bmi.n	80076e0 <_fflush_r+0xc>
 800771c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800771e:	f7fd fa1f 	bl	8004b60 <__retarget_lock_release_recursive>
 8007722:	e7dd      	b.n	80076e0 <_fflush_r+0xc>

08007724 <__swhatbuf_r>:
 8007724:	b570      	push	{r4, r5, r6, lr}
 8007726:	460c      	mov	r4, r1
 8007728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800772c:	2900      	cmp	r1, #0
 800772e:	b096      	sub	sp, #88	; 0x58
 8007730:	4615      	mov	r5, r2
 8007732:	461e      	mov	r6, r3
 8007734:	da0d      	bge.n	8007752 <__swhatbuf_r+0x2e>
 8007736:	89a3      	ldrh	r3, [r4, #12]
 8007738:	f013 0f80 	tst.w	r3, #128	; 0x80
 800773c:	f04f 0100 	mov.w	r1, #0
 8007740:	bf0c      	ite	eq
 8007742:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007746:	2340      	movne	r3, #64	; 0x40
 8007748:	2000      	movs	r0, #0
 800774a:	6031      	str	r1, [r6, #0]
 800774c:	602b      	str	r3, [r5, #0]
 800774e:	b016      	add	sp, #88	; 0x58
 8007750:	bd70      	pop	{r4, r5, r6, pc}
 8007752:	466a      	mov	r2, sp
 8007754:	f000 f874 	bl	8007840 <_fstat_r>
 8007758:	2800      	cmp	r0, #0
 800775a:	dbec      	blt.n	8007736 <__swhatbuf_r+0x12>
 800775c:	9901      	ldr	r1, [sp, #4]
 800775e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007762:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007766:	4259      	negs	r1, r3
 8007768:	4159      	adcs	r1, r3
 800776a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800776e:	e7eb      	b.n	8007748 <__swhatbuf_r+0x24>

08007770 <__smakebuf_r>:
 8007770:	898b      	ldrh	r3, [r1, #12]
 8007772:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007774:	079d      	lsls	r5, r3, #30
 8007776:	4606      	mov	r6, r0
 8007778:	460c      	mov	r4, r1
 800777a:	d507      	bpl.n	800778c <__smakebuf_r+0x1c>
 800777c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007780:	6023      	str	r3, [r4, #0]
 8007782:	6123      	str	r3, [r4, #16]
 8007784:	2301      	movs	r3, #1
 8007786:	6163      	str	r3, [r4, #20]
 8007788:	b002      	add	sp, #8
 800778a:	bd70      	pop	{r4, r5, r6, pc}
 800778c:	ab01      	add	r3, sp, #4
 800778e:	466a      	mov	r2, sp
 8007790:	f7ff ffc8 	bl	8007724 <__swhatbuf_r>
 8007794:	9900      	ldr	r1, [sp, #0]
 8007796:	4605      	mov	r5, r0
 8007798:	4630      	mov	r0, r6
 800779a:	f7fe f8bf 	bl	800591c <_malloc_r>
 800779e:	b948      	cbnz	r0, 80077b4 <__smakebuf_r+0x44>
 80077a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077a4:	059a      	lsls	r2, r3, #22
 80077a6:	d4ef      	bmi.n	8007788 <__smakebuf_r+0x18>
 80077a8:	f023 0303 	bic.w	r3, r3, #3
 80077ac:	f043 0302 	orr.w	r3, r3, #2
 80077b0:	81a3      	strh	r3, [r4, #12]
 80077b2:	e7e3      	b.n	800777c <__smakebuf_r+0xc>
 80077b4:	89a3      	ldrh	r3, [r4, #12]
 80077b6:	6020      	str	r0, [r4, #0]
 80077b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077bc:	81a3      	strh	r3, [r4, #12]
 80077be:	9b00      	ldr	r3, [sp, #0]
 80077c0:	6163      	str	r3, [r4, #20]
 80077c2:	9b01      	ldr	r3, [sp, #4]
 80077c4:	6120      	str	r0, [r4, #16]
 80077c6:	b15b      	cbz	r3, 80077e0 <__smakebuf_r+0x70>
 80077c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077cc:	4630      	mov	r0, r6
 80077ce:	f000 f849 	bl	8007864 <_isatty_r>
 80077d2:	b128      	cbz	r0, 80077e0 <__smakebuf_r+0x70>
 80077d4:	89a3      	ldrh	r3, [r4, #12]
 80077d6:	f023 0303 	bic.w	r3, r3, #3
 80077da:	f043 0301 	orr.w	r3, r3, #1
 80077de:	81a3      	strh	r3, [r4, #12]
 80077e0:	89a3      	ldrh	r3, [r4, #12]
 80077e2:	431d      	orrs	r5, r3
 80077e4:	81a5      	strh	r5, [r4, #12]
 80077e6:	e7cf      	b.n	8007788 <__smakebuf_r+0x18>

080077e8 <memmove>:
 80077e8:	4288      	cmp	r0, r1
 80077ea:	b510      	push	{r4, lr}
 80077ec:	eb01 0402 	add.w	r4, r1, r2
 80077f0:	d902      	bls.n	80077f8 <memmove+0x10>
 80077f2:	4284      	cmp	r4, r0
 80077f4:	4623      	mov	r3, r4
 80077f6:	d807      	bhi.n	8007808 <memmove+0x20>
 80077f8:	1e43      	subs	r3, r0, #1
 80077fa:	42a1      	cmp	r1, r4
 80077fc:	d008      	beq.n	8007810 <memmove+0x28>
 80077fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007802:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007806:	e7f8      	b.n	80077fa <memmove+0x12>
 8007808:	4402      	add	r2, r0
 800780a:	4601      	mov	r1, r0
 800780c:	428a      	cmp	r2, r1
 800780e:	d100      	bne.n	8007812 <memmove+0x2a>
 8007810:	bd10      	pop	{r4, pc}
 8007812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800781a:	e7f7      	b.n	800780c <memmove+0x24>

0800781c <strncmp>:
 800781c:	b510      	push	{r4, lr}
 800781e:	b16a      	cbz	r2, 800783c <strncmp+0x20>
 8007820:	3901      	subs	r1, #1
 8007822:	1884      	adds	r4, r0, r2
 8007824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007828:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800782c:	429a      	cmp	r2, r3
 800782e:	d103      	bne.n	8007838 <strncmp+0x1c>
 8007830:	42a0      	cmp	r0, r4
 8007832:	d001      	beq.n	8007838 <strncmp+0x1c>
 8007834:	2a00      	cmp	r2, #0
 8007836:	d1f5      	bne.n	8007824 <strncmp+0x8>
 8007838:	1ad0      	subs	r0, r2, r3
 800783a:	bd10      	pop	{r4, pc}
 800783c:	4610      	mov	r0, r2
 800783e:	e7fc      	b.n	800783a <strncmp+0x1e>

08007840 <_fstat_r>:
 8007840:	b538      	push	{r3, r4, r5, lr}
 8007842:	4d07      	ldr	r5, [pc, #28]	; (8007860 <_fstat_r+0x20>)
 8007844:	2300      	movs	r3, #0
 8007846:	4604      	mov	r4, r0
 8007848:	4608      	mov	r0, r1
 800784a:	4611      	mov	r1, r2
 800784c:	602b      	str	r3, [r5, #0]
 800784e:	f7f9 fea8 	bl	80015a2 <_fstat>
 8007852:	1c43      	adds	r3, r0, #1
 8007854:	d102      	bne.n	800785c <_fstat_r+0x1c>
 8007856:	682b      	ldr	r3, [r5, #0]
 8007858:	b103      	cbz	r3, 800785c <_fstat_r+0x1c>
 800785a:	6023      	str	r3, [r4, #0]
 800785c:	bd38      	pop	{r3, r4, r5, pc}
 800785e:	bf00      	nop
 8007860:	200003c8 	.word	0x200003c8

08007864 <_isatty_r>:
 8007864:	b538      	push	{r3, r4, r5, lr}
 8007866:	4d06      	ldr	r5, [pc, #24]	; (8007880 <_isatty_r+0x1c>)
 8007868:	2300      	movs	r3, #0
 800786a:	4604      	mov	r4, r0
 800786c:	4608      	mov	r0, r1
 800786e:	602b      	str	r3, [r5, #0]
 8007870:	f7f9 fea6 	bl	80015c0 <_isatty>
 8007874:	1c43      	adds	r3, r0, #1
 8007876:	d102      	bne.n	800787e <_isatty_r+0x1a>
 8007878:	682b      	ldr	r3, [r5, #0]
 800787a:	b103      	cbz	r3, 800787e <_isatty_r+0x1a>
 800787c:	6023      	str	r3, [r4, #0]
 800787e:	bd38      	pop	{r3, r4, r5, pc}
 8007880:	200003c8 	.word	0x200003c8

08007884 <_sbrk_r>:
 8007884:	b538      	push	{r3, r4, r5, lr}
 8007886:	4d06      	ldr	r5, [pc, #24]	; (80078a0 <_sbrk_r+0x1c>)
 8007888:	2300      	movs	r3, #0
 800788a:	4604      	mov	r4, r0
 800788c:	4608      	mov	r0, r1
 800788e:	602b      	str	r3, [r5, #0]
 8007890:	f7f9 feac 	bl	80015ec <_sbrk>
 8007894:	1c43      	adds	r3, r0, #1
 8007896:	d102      	bne.n	800789e <_sbrk_r+0x1a>
 8007898:	682b      	ldr	r3, [r5, #0]
 800789a:	b103      	cbz	r3, 800789e <_sbrk_r+0x1a>
 800789c:	6023      	str	r3, [r4, #0]
 800789e:	bd38      	pop	{r3, r4, r5, pc}
 80078a0:	200003c8 	.word	0x200003c8

080078a4 <memcpy>:
 80078a4:	440a      	add	r2, r1
 80078a6:	4291      	cmp	r1, r2
 80078a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80078ac:	d100      	bne.n	80078b0 <memcpy+0xc>
 80078ae:	4770      	bx	lr
 80078b0:	b510      	push	{r4, lr}
 80078b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078ba:	4291      	cmp	r1, r2
 80078bc:	d1f9      	bne.n	80078b2 <memcpy+0xe>
 80078be:	bd10      	pop	{r4, pc}

080078c0 <nan>:
 80078c0:	4901      	ldr	r1, [pc, #4]	; (80078c8 <nan+0x8>)
 80078c2:	2000      	movs	r0, #0
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	7ff80000 	.word	0x7ff80000

080078cc <__assert_func>:
 80078cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078ce:	4614      	mov	r4, r2
 80078d0:	461a      	mov	r2, r3
 80078d2:	4b09      	ldr	r3, [pc, #36]	; (80078f8 <__assert_func+0x2c>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4605      	mov	r5, r0
 80078d8:	68d8      	ldr	r0, [r3, #12]
 80078da:	b14c      	cbz	r4, 80078f0 <__assert_func+0x24>
 80078dc:	4b07      	ldr	r3, [pc, #28]	; (80078fc <__assert_func+0x30>)
 80078de:	9100      	str	r1, [sp, #0]
 80078e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078e4:	4906      	ldr	r1, [pc, #24]	; (8007900 <__assert_func+0x34>)
 80078e6:	462b      	mov	r3, r5
 80078e8:	f000 fbca 	bl	8008080 <fiprintf>
 80078ec:	f000 fbda 	bl	80080a4 <abort>
 80078f0:	4b04      	ldr	r3, [pc, #16]	; (8007904 <__assert_func+0x38>)
 80078f2:	461c      	mov	r4, r3
 80078f4:	e7f3      	b.n	80078de <__assert_func+0x12>
 80078f6:	bf00      	nop
 80078f8:	20000064 	.word	0x20000064
 80078fc:	08008542 	.word	0x08008542
 8007900:	0800854f 	.word	0x0800854f
 8007904:	0800857d 	.word	0x0800857d

08007908 <_calloc_r>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	fba1 5402 	umull	r5, r4, r1, r2
 800790e:	b934      	cbnz	r4, 800791e <_calloc_r+0x16>
 8007910:	4629      	mov	r1, r5
 8007912:	f7fe f803 	bl	800591c <_malloc_r>
 8007916:	4606      	mov	r6, r0
 8007918:	b928      	cbnz	r0, 8007926 <_calloc_r+0x1e>
 800791a:	4630      	mov	r0, r6
 800791c:	bd70      	pop	{r4, r5, r6, pc}
 800791e:	220c      	movs	r2, #12
 8007920:	6002      	str	r2, [r0, #0]
 8007922:	2600      	movs	r6, #0
 8007924:	e7f9      	b.n	800791a <_calloc_r+0x12>
 8007926:	462a      	mov	r2, r5
 8007928:	4621      	mov	r1, r4
 800792a:	f7fd f89b 	bl	8004a64 <memset>
 800792e:	e7f4      	b.n	800791a <_calloc_r+0x12>

08007930 <rshift>:
 8007930:	6903      	ldr	r3, [r0, #16]
 8007932:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007936:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800793a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800793e:	f100 0414 	add.w	r4, r0, #20
 8007942:	dd45      	ble.n	80079d0 <rshift+0xa0>
 8007944:	f011 011f 	ands.w	r1, r1, #31
 8007948:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800794c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007950:	d10c      	bne.n	800796c <rshift+0x3c>
 8007952:	f100 0710 	add.w	r7, r0, #16
 8007956:	4629      	mov	r1, r5
 8007958:	42b1      	cmp	r1, r6
 800795a:	d334      	bcc.n	80079c6 <rshift+0x96>
 800795c:	1a9b      	subs	r3, r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	1eea      	subs	r2, r5, #3
 8007962:	4296      	cmp	r6, r2
 8007964:	bf38      	it	cc
 8007966:	2300      	movcc	r3, #0
 8007968:	4423      	add	r3, r4
 800796a:	e015      	b.n	8007998 <rshift+0x68>
 800796c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007970:	f1c1 0820 	rsb	r8, r1, #32
 8007974:	40cf      	lsrs	r7, r1
 8007976:	f105 0e04 	add.w	lr, r5, #4
 800797a:	46a1      	mov	r9, r4
 800797c:	4576      	cmp	r6, lr
 800797e:	46f4      	mov	ip, lr
 8007980:	d815      	bhi.n	80079ae <rshift+0x7e>
 8007982:	1a9a      	subs	r2, r3, r2
 8007984:	0092      	lsls	r2, r2, #2
 8007986:	3a04      	subs	r2, #4
 8007988:	3501      	adds	r5, #1
 800798a:	42ae      	cmp	r6, r5
 800798c:	bf38      	it	cc
 800798e:	2200      	movcc	r2, #0
 8007990:	18a3      	adds	r3, r4, r2
 8007992:	50a7      	str	r7, [r4, r2]
 8007994:	b107      	cbz	r7, 8007998 <rshift+0x68>
 8007996:	3304      	adds	r3, #4
 8007998:	1b1a      	subs	r2, r3, r4
 800799a:	42a3      	cmp	r3, r4
 800799c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80079a0:	bf08      	it	eq
 80079a2:	2300      	moveq	r3, #0
 80079a4:	6102      	str	r2, [r0, #16]
 80079a6:	bf08      	it	eq
 80079a8:	6143      	streq	r3, [r0, #20]
 80079aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079ae:	f8dc c000 	ldr.w	ip, [ip]
 80079b2:	fa0c fc08 	lsl.w	ip, ip, r8
 80079b6:	ea4c 0707 	orr.w	r7, ip, r7
 80079ba:	f849 7b04 	str.w	r7, [r9], #4
 80079be:	f85e 7b04 	ldr.w	r7, [lr], #4
 80079c2:	40cf      	lsrs	r7, r1
 80079c4:	e7da      	b.n	800797c <rshift+0x4c>
 80079c6:	f851 cb04 	ldr.w	ip, [r1], #4
 80079ca:	f847 cf04 	str.w	ip, [r7, #4]!
 80079ce:	e7c3      	b.n	8007958 <rshift+0x28>
 80079d0:	4623      	mov	r3, r4
 80079d2:	e7e1      	b.n	8007998 <rshift+0x68>

080079d4 <__hexdig_fun>:
 80079d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80079d8:	2b09      	cmp	r3, #9
 80079da:	d802      	bhi.n	80079e2 <__hexdig_fun+0xe>
 80079dc:	3820      	subs	r0, #32
 80079de:	b2c0      	uxtb	r0, r0
 80079e0:	4770      	bx	lr
 80079e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80079e6:	2b05      	cmp	r3, #5
 80079e8:	d801      	bhi.n	80079ee <__hexdig_fun+0x1a>
 80079ea:	3847      	subs	r0, #71	; 0x47
 80079ec:	e7f7      	b.n	80079de <__hexdig_fun+0xa>
 80079ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80079f2:	2b05      	cmp	r3, #5
 80079f4:	d801      	bhi.n	80079fa <__hexdig_fun+0x26>
 80079f6:	3827      	subs	r0, #39	; 0x27
 80079f8:	e7f1      	b.n	80079de <__hexdig_fun+0xa>
 80079fa:	2000      	movs	r0, #0
 80079fc:	4770      	bx	lr
	...

08007a00 <__gethex>:
 8007a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a04:	4617      	mov	r7, r2
 8007a06:	680a      	ldr	r2, [r1, #0]
 8007a08:	b085      	sub	sp, #20
 8007a0a:	f102 0b02 	add.w	fp, r2, #2
 8007a0e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007a12:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007a16:	4681      	mov	r9, r0
 8007a18:	468a      	mov	sl, r1
 8007a1a:	9302      	str	r3, [sp, #8]
 8007a1c:	32fe      	adds	r2, #254	; 0xfe
 8007a1e:	eb02 030b 	add.w	r3, r2, fp
 8007a22:	46d8      	mov	r8, fp
 8007a24:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007a28:	9301      	str	r3, [sp, #4]
 8007a2a:	2830      	cmp	r0, #48	; 0x30
 8007a2c:	d0f7      	beq.n	8007a1e <__gethex+0x1e>
 8007a2e:	f7ff ffd1 	bl	80079d4 <__hexdig_fun>
 8007a32:	4604      	mov	r4, r0
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d138      	bne.n	8007aaa <__gethex+0xaa>
 8007a38:	49a8      	ldr	r1, [pc, #672]	; (8007cdc <__gethex+0x2dc>)
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	4640      	mov	r0, r8
 8007a3e:	f7ff feed 	bl	800781c <strncmp>
 8007a42:	4606      	mov	r6, r0
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d169      	bne.n	8007b1c <__gethex+0x11c>
 8007a48:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007a4c:	465d      	mov	r5, fp
 8007a4e:	f7ff ffc1 	bl	80079d4 <__hexdig_fun>
 8007a52:	2800      	cmp	r0, #0
 8007a54:	d064      	beq.n	8007b20 <__gethex+0x120>
 8007a56:	465a      	mov	r2, fp
 8007a58:	7810      	ldrb	r0, [r2, #0]
 8007a5a:	2830      	cmp	r0, #48	; 0x30
 8007a5c:	4690      	mov	r8, r2
 8007a5e:	f102 0201 	add.w	r2, r2, #1
 8007a62:	d0f9      	beq.n	8007a58 <__gethex+0x58>
 8007a64:	f7ff ffb6 	bl	80079d4 <__hexdig_fun>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	fab0 f480 	clz	r4, r0
 8007a6e:	0964      	lsrs	r4, r4, #5
 8007a70:	465e      	mov	r6, fp
 8007a72:	9301      	str	r3, [sp, #4]
 8007a74:	4642      	mov	r2, r8
 8007a76:	4615      	mov	r5, r2
 8007a78:	3201      	adds	r2, #1
 8007a7a:	7828      	ldrb	r0, [r5, #0]
 8007a7c:	f7ff ffaa 	bl	80079d4 <__hexdig_fun>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	d1f8      	bne.n	8007a76 <__gethex+0x76>
 8007a84:	4995      	ldr	r1, [pc, #596]	; (8007cdc <__gethex+0x2dc>)
 8007a86:	2201      	movs	r2, #1
 8007a88:	4628      	mov	r0, r5
 8007a8a:	f7ff fec7 	bl	800781c <strncmp>
 8007a8e:	b978      	cbnz	r0, 8007ab0 <__gethex+0xb0>
 8007a90:	b946      	cbnz	r6, 8007aa4 <__gethex+0xa4>
 8007a92:	1c6e      	adds	r6, r5, #1
 8007a94:	4632      	mov	r2, r6
 8007a96:	4615      	mov	r5, r2
 8007a98:	3201      	adds	r2, #1
 8007a9a:	7828      	ldrb	r0, [r5, #0]
 8007a9c:	f7ff ff9a 	bl	80079d4 <__hexdig_fun>
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	d1f8      	bne.n	8007a96 <__gethex+0x96>
 8007aa4:	1b73      	subs	r3, r6, r5
 8007aa6:	009e      	lsls	r6, r3, #2
 8007aa8:	e004      	b.n	8007ab4 <__gethex+0xb4>
 8007aaa:	2400      	movs	r4, #0
 8007aac:	4626      	mov	r6, r4
 8007aae:	e7e1      	b.n	8007a74 <__gethex+0x74>
 8007ab0:	2e00      	cmp	r6, #0
 8007ab2:	d1f7      	bne.n	8007aa4 <__gethex+0xa4>
 8007ab4:	782b      	ldrb	r3, [r5, #0]
 8007ab6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007aba:	2b50      	cmp	r3, #80	; 0x50
 8007abc:	d13d      	bne.n	8007b3a <__gethex+0x13a>
 8007abe:	786b      	ldrb	r3, [r5, #1]
 8007ac0:	2b2b      	cmp	r3, #43	; 0x2b
 8007ac2:	d02f      	beq.n	8007b24 <__gethex+0x124>
 8007ac4:	2b2d      	cmp	r3, #45	; 0x2d
 8007ac6:	d031      	beq.n	8007b2c <__gethex+0x12c>
 8007ac8:	1c69      	adds	r1, r5, #1
 8007aca:	f04f 0b00 	mov.w	fp, #0
 8007ace:	7808      	ldrb	r0, [r1, #0]
 8007ad0:	f7ff ff80 	bl	80079d4 <__hexdig_fun>
 8007ad4:	1e42      	subs	r2, r0, #1
 8007ad6:	b2d2      	uxtb	r2, r2
 8007ad8:	2a18      	cmp	r2, #24
 8007ada:	d82e      	bhi.n	8007b3a <__gethex+0x13a>
 8007adc:	f1a0 0210 	sub.w	r2, r0, #16
 8007ae0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007ae4:	f7ff ff76 	bl	80079d4 <__hexdig_fun>
 8007ae8:	f100 3cff 	add.w	ip, r0, #4294967295
 8007aec:	fa5f fc8c 	uxtb.w	ip, ip
 8007af0:	f1bc 0f18 	cmp.w	ip, #24
 8007af4:	d91d      	bls.n	8007b32 <__gethex+0x132>
 8007af6:	f1bb 0f00 	cmp.w	fp, #0
 8007afa:	d000      	beq.n	8007afe <__gethex+0xfe>
 8007afc:	4252      	negs	r2, r2
 8007afe:	4416      	add	r6, r2
 8007b00:	f8ca 1000 	str.w	r1, [sl]
 8007b04:	b1dc      	cbz	r4, 8007b3e <__gethex+0x13e>
 8007b06:	9b01      	ldr	r3, [sp, #4]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	bf14      	ite	ne
 8007b0c:	f04f 0800 	movne.w	r8, #0
 8007b10:	f04f 0806 	moveq.w	r8, #6
 8007b14:	4640      	mov	r0, r8
 8007b16:	b005      	add	sp, #20
 8007b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b1c:	4645      	mov	r5, r8
 8007b1e:	4626      	mov	r6, r4
 8007b20:	2401      	movs	r4, #1
 8007b22:	e7c7      	b.n	8007ab4 <__gethex+0xb4>
 8007b24:	f04f 0b00 	mov.w	fp, #0
 8007b28:	1ca9      	adds	r1, r5, #2
 8007b2a:	e7d0      	b.n	8007ace <__gethex+0xce>
 8007b2c:	f04f 0b01 	mov.w	fp, #1
 8007b30:	e7fa      	b.n	8007b28 <__gethex+0x128>
 8007b32:	230a      	movs	r3, #10
 8007b34:	fb03 0002 	mla	r0, r3, r2, r0
 8007b38:	e7d0      	b.n	8007adc <__gethex+0xdc>
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	e7e0      	b.n	8007b00 <__gethex+0x100>
 8007b3e:	eba5 0308 	sub.w	r3, r5, r8
 8007b42:	3b01      	subs	r3, #1
 8007b44:	4621      	mov	r1, r4
 8007b46:	2b07      	cmp	r3, #7
 8007b48:	dc0a      	bgt.n	8007b60 <__gethex+0x160>
 8007b4a:	4648      	mov	r0, r9
 8007b4c:	f7fd ff72 	bl	8005a34 <_Balloc>
 8007b50:	4604      	mov	r4, r0
 8007b52:	b940      	cbnz	r0, 8007b66 <__gethex+0x166>
 8007b54:	4b62      	ldr	r3, [pc, #392]	; (8007ce0 <__gethex+0x2e0>)
 8007b56:	4602      	mov	r2, r0
 8007b58:	21e4      	movs	r1, #228	; 0xe4
 8007b5a:	4862      	ldr	r0, [pc, #392]	; (8007ce4 <__gethex+0x2e4>)
 8007b5c:	f7ff feb6 	bl	80078cc <__assert_func>
 8007b60:	3101      	adds	r1, #1
 8007b62:	105b      	asrs	r3, r3, #1
 8007b64:	e7ef      	b.n	8007b46 <__gethex+0x146>
 8007b66:	f100 0a14 	add.w	sl, r0, #20
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f8cd a004 	str.w	sl, [sp, #4]
 8007b70:	469b      	mov	fp, r3
 8007b72:	45a8      	cmp	r8, r5
 8007b74:	d344      	bcc.n	8007c00 <__gethex+0x200>
 8007b76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007b7a:	f848 bb04 	str.w	fp, [r8], #4
 8007b7e:	eba8 080a 	sub.w	r8, r8, sl
 8007b82:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8007b86:	6122      	str	r2, [r4, #16]
 8007b88:	4658      	mov	r0, fp
 8007b8a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8007b8e:	f7fe f843 	bl	8005c18 <__hi0bits>
 8007b92:	683d      	ldr	r5, [r7, #0]
 8007b94:	eba8 0800 	sub.w	r8, r8, r0
 8007b98:	45a8      	cmp	r8, r5
 8007b9a:	dd59      	ble.n	8007c50 <__gethex+0x250>
 8007b9c:	eba8 0805 	sub.w	r8, r8, r5
 8007ba0:	4641      	mov	r1, r8
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	f7fe fbbf 	bl	8006326 <__any_on>
 8007ba8:	4683      	mov	fp, r0
 8007baa:	b1b8      	cbz	r0, 8007bdc <__gethex+0x1dc>
 8007bac:	f108 33ff 	add.w	r3, r8, #4294967295
 8007bb0:	1159      	asrs	r1, r3, #5
 8007bb2:	f003 021f 	and.w	r2, r3, #31
 8007bb6:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007bba:	f04f 0b01 	mov.w	fp, #1
 8007bbe:	fa0b f202 	lsl.w	r2, fp, r2
 8007bc2:	420a      	tst	r2, r1
 8007bc4:	d00a      	beq.n	8007bdc <__gethex+0x1dc>
 8007bc6:	455b      	cmp	r3, fp
 8007bc8:	dd06      	ble.n	8007bd8 <__gethex+0x1d8>
 8007bca:	f1a8 0102 	sub.w	r1, r8, #2
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f7fe fba9 	bl	8006326 <__any_on>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d138      	bne.n	8007c4a <__gethex+0x24a>
 8007bd8:	f04f 0b02 	mov.w	fp, #2
 8007bdc:	4641      	mov	r1, r8
 8007bde:	4620      	mov	r0, r4
 8007be0:	f7ff fea6 	bl	8007930 <rshift>
 8007be4:	4446      	add	r6, r8
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	42b3      	cmp	r3, r6
 8007bea:	da41      	bge.n	8007c70 <__gethex+0x270>
 8007bec:	4621      	mov	r1, r4
 8007bee:	4648      	mov	r0, r9
 8007bf0:	f7fd ff60 	bl	8005ab4 <_Bfree>
 8007bf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	6013      	str	r3, [r2, #0]
 8007bfa:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007bfe:	e789      	b.n	8007b14 <__gethex+0x114>
 8007c00:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007c04:	2a2e      	cmp	r2, #46	; 0x2e
 8007c06:	d014      	beq.n	8007c32 <__gethex+0x232>
 8007c08:	2b20      	cmp	r3, #32
 8007c0a:	d106      	bne.n	8007c1a <__gethex+0x21a>
 8007c0c:	9b01      	ldr	r3, [sp, #4]
 8007c0e:	f843 bb04 	str.w	fp, [r3], #4
 8007c12:	f04f 0b00 	mov.w	fp, #0
 8007c16:	9301      	str	r3, [sp, #4]
 8007c18:	465b      	mov	r3, fp
 8007c1a:	7828      	ldrb	r0, [r5, #0]
 8007c1c:	9303      	str	r3, [sp, #12]
 8007c1e:	f7ff fed9 	bl	80079d4 <__hexdig_fun>
 8007c22:	9b03      	ldr	r3, [sp, #12]
 8007c24:	f000 000f 	and.w	r0, r0, #15
 8007c28:	4098      	lsls	r0, r3
 8007c2a:	ea4b 0b00 	orr.w	fp, fp, r0
 8007c2e:	3304      	adds	r3, #4
 8007c30:	e79f      	b.n	8007b72 <__gethex+0x172>
 8007c32:	45a8      	cmp	r8, r5
 8007c34:	d8e8      	bhi.n	8007c08 <__gethex+0x208>
 8007c36:	4929      	ldr	r1, [pc, #164]	; (8007cdc <__gethex+0x2dc>)
 8007c38:	9303      	str	r3, [sp, #12]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f7ff fded 	bl	800781c <strncmp>
 8007c42:	9b03      	ldr	r3, [sp, #12]
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d1df      	bne.n	8007c08 <__gethex+0x208>
 8007c48:	e793      	b.n	8007b72 <__gethex+0x172>
 8007c4a:	f04f 0b03 	mov.w	fp, #3
 8007c4e:	e7c5      	b.n	8007bdc <__gethex+0x1dc>
 8007c50:	da0b      	bge.n	8007c6a <__gethex+0x26a>
 8007c52:	eba5 0808 	sub.w	r8, r5, r8
 8007c56:	4621      	mov	r1, r4
 8007c58:	4642      	mov	r2, r8
 8007c5a:	4648      	mov	r0, r9
 8007c5c:	f7fe f944 	bl	8005ee8 <__lshift>
 8007c60:	eba6 0608 	sub.w	r6, r6, r8
 8007c64:	4604      	mov	r4, r0
 8007c66:	f100 0a14 	add.w	sl, r0, #20
 8007c6a:	f04f 0b00 	mov.w	fp, #0
 8007c6e:	e7ba      	b.n	8007be6 <__gethex+0x1e6>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	42b3      	cmp	r3, r6
 8007c74:	dd74      	ble.n	8007d60 <__gethex+0x360>
 8007c76:	1b9e      	subs	r6, r3, r6
 8007c78:	42b5      	cmp	r5, r6
 8007c7a:	dc35      	bgt.n	8007ce8 <__gethex+0x2e8>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d023      	beq.n	8007cca <__gethex+0x2ca>
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	d025      	beq.n	8007cd2 <__gethex+0x2d2>
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d115      	bne.n	8007cb6 <__gethex+0x2b6>
 8007c8a:	42b5      	cmp	r5, r6
 8007c8c:	d113      	bne.n	8007cb6 <__gethex+0x2b6>
 8007c8e:	2d01      	cmp	r5, #1
 8007c90:	d10b      	bne.n	8007caa <__gethex+0x2aa>
 8007c92:	9a02      	ldr	r2, [sp, #8]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6013      	str	r3, [r2, #0]
 8007c98:	2301      	movs	r3, #1
 8007c9a:	6123      	str	r3, [r4, #16]
 8007c9c:	f8ca 3000 	str.w	r3, [sl]
 8007ca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ca2:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007ca6:	601c      	str	r4, [r3, #0]
 8007ca8:	e734      	b.n	8007b14 <__gethex+0x114>
 8007caa:	1e69      	subs	r1, r5, #1
 8007cac:	4620      	mov	r0, r4
 8007cae:	f7fe fb3a 	bl	8006326 <__any_on>
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d1ed      	bne.n	8007c92 <__gethex+0x292>
 8007cb6:	4621      	mov	r1, r4
 8007cb8:	4648      	mov	r0, r9
 8007cba:	f7fd fefb 	bl	8005ab4 <_Bfree>
 8007cbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	6013      	str	r3, [r2, #0]
 8007cc4:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007cc8:	e724      	b.n	8007b14 <__gethex+0x114>
 8007cca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1f2      	bne.n	8007cb6 <__gethex+0x2b6>
 8007cd0:	e7df      	b.n	8007c92 <__gethex+0x292>
 8007cd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1dc      	bne.n	8007c92 <__gethex+0x292>
 8007cd8:	e7ed      	b.n	8007cb6 <__gethex+0x2b6>
 8007cda:	bf00      	nop
 8007cdc:	080083d4 	.word	0x080083d4
 8007ce0:	0800826d 	.word	0x0800826d
 8007ce4:	0800857e 	.word	0x0800857e
 8007ce8:	f106 38ff 	add.w	r8, r6, #4294967295
 8007cec:	f1bb 0f00 	cmp.w	fp, #0
 8007cf0:	d133      	bne.n	8007d5a <__gethex+0x35a>
 8007cf2:	f1b8 0f00 	cmp.w	r8, #0
 8007cf6:	d004      	beq.n	8007d02 <__gethex+0x302>
 8007cf8:	4641      	mov	r1, r8
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f7fe fb13 	bl	8006326 <__any_on>
 8007d00:	4683      	mov	fp, r0
 8007d02:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007d06:	2301      	movs	r3, #1
 8007d08:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007d0c:	f008 081f 	and.w	r8, r8, #31
 8007d10:	fa03 f308 	lsl.w	r3, r3, r8
 8007d14:	4213      	tst	r3, r2
 8007d16:	4631      	mov	r1, r6
 8007d18:	4620      	mov	r0, r4
 8007d1a:	bf18      	it	ne
 8007d1c:	f04b 0b02 	orrne.w	fp, fp, #2
 8007d20:	1bad      	subs	r5, r5, r6
 8007d22:	f7ff fe05 	bl	8007930 <rshift>
 8007d26:	687e      	ldr	r6, [r7, #4]
 8007d28:	f04f 0802 	mov.w	r8, #2
 8007d2c:	f1bb 0f00 	cmp.w	fp, #0
 8007d30:	d04a      	beq.n	8007dc8 <__gethex+0x3c8>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d016      	beq.n	8007d66 <__gethex+0x366>
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d018      	beq.n	8007d6e <__gethex+0x36e>
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d109      	bne.n	8007d54 <__gethex+0x354>
 8007d40:	f01b 0f02 	tst.w	fp, #2
 8007d44:	d006      	beq.n	8007d54 <__gethex+0x354>
 8007d46:	f8da 3000 	ldr.w	r3, [sl]
 8007d4a:	ea4b 0b03 	orr.w	fp, fp, r3
 8007d4e:	f01b 0f01 	tst.w	fp, #1
 8007d52:	d10f      	bne.n	8007d74 <__gethex+0x374>
 8007d54:	f048 0810 	orr.w	r8, r8, #16
 8007d58:	e036      	b.n	8007dc8 <__gethex+0x3c8>
 8007d5a:	f04f 0b01 	mov.w	fp, #1
 8007d5e:	e7d0      	b.n	8007d02 <__gethex+0x302>
 8007d60:	f04f 0801 	mov.w	r8, #1
 8007d64:	e7e2      	b.n	8007d2c <__gethex+0x32c>
 8007d66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d68:	f1c3 0301 	rsb	r3, r3, #1
 8007d6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d0ef      	beq.n	8007d54 <__gethex+0x354>
 8007d74:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007d78:	f104 0214 	add.w	r2, r4, #20
 8007d7c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007d80:	9301      	str	r3, [sp, #4]
 8007d82:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007d86:	2300      	movs	r3, #0
 8007d88:	4694      	mov	ip, r2
 8007d8a:	f852 1b04 	ldr.w	r1, [r2], #4
 8007d8e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007d92:	d01e      	beq.n	8007dd2 <__gethex+0x3d2>
 8007d94:	3101      	adds	r1, #1
 8007d96:	f8cc 1000 	str.w	r1, [ip]
 8007d9a:	f1b8 0f02 	cmp.w	r8, #2
 8007d9e:	f104 0214 	add.w	r2, r4, #20
 8007da2:	d13d      	bne.n	8007e20 <__gethex+0x420>
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	3b01      	subs	r3, #1
 8007da8:	42ab      	cmp	r3, r5
 8007daa:	d10b      	bne.n	8007dc4 <__gethex+0x3c4>
 8007dac:	1169      	asrs	r1, r5, #5
 8007dae:	2301      	movs	r3, #1
 8007db0:	f005 051f 	and.w	r5, r5, #31
 8007db4:	fa03 f505 	lsl.w	r5, r3, r5
 8007db8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007dbc:	421d      	tst	r5, r3
 8007dbe:	bf18      	it	ne
 8007dc0:	f04f 0801 	movne.w	r8, #1
 8007dc4:	f048 0820 	orr.w	r8, r8, #32
 8007dc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dca:	601c      	str	r4, [r3, #0]
 8007dcc:	9b02      	ldr	r3, [sp, #8]
 8007dce:	601e      	str	r6, [r3, #0]
 8007dd0:	e6a0      	b.n	8007b14 <__gethex+0x114>
 8007dd2:	4290      	cmp	r0, r2
 8007dd4:	f842 3c04 	str.w	r3, [r2, #-4]
 8007dd8:	d8d6      	bhi.n	8007d88 <__gethex+0x388>
 8007dda:	68a2      	ldr	r2, [r4, #8]
 8007ddc:	4593      	cmp	fp, r2
 8007dde:	db17      	blt.n	8007e10 <__gethex+0x410>
 8007de0:	6861      	ldr	r1, [r4, #4]
 8007de2:	4648      	mov	r0, r9
 8007de4:	3101      	adds	r1, #1
 8007de6:	f7fd fe25 	bl	8005a34 <_Balloc>
 8007dea:	4682      	mov	sl, r0
 8007dec:	b918      	cbnz	r0, 8007df6 <__gethex+0x3f6>
 8007dee:	4b1b      	ldr	r3, [pc, #108]	; (8007e5c <__gethex+0x45c>)
 8007df0:	4602      	mov	r2, r0
 8007df2:	2184      	movs	r1, #132	; 0x84
 8007df4:	e6b1      	b.n	8007b5a <__gethex+0x15a>
 8007df6:	6922      	ldr	r2, [r4, #16]
 8007df8:	3202      	adds	r2, #2
 8007dfa:	f104 010c 	add.w	r1, r4, #12
 8007dfe:	0092      	lsls	r2, r2, #2
 8007e00:	300c      	adds	r0, #12
 8007e02:	f7ff fd4f 	bl	80078a4 <memcpy>
 8007e06:	4621      	mov	r1, r4
 8007e08:	4648      	mov	r0, r9
 8007e0a:	f7fd fe53 	bl	8005ab4 <_Bfree>
 8007e0e:	4654      	mov	r4, sl
 8007e10:	6922      	ldr	r2, [r4, #16]
 8007e12:	1c51      	adds	r1, r2, #1
 8007e14:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007e18:	6121      	str	r1, [r4, #16]
 8007e1a:	2101      	movs	r1, #1
 8007e1c:	6151      	str	r1, [r2, #20]
 8007e1e:	e7bc      	b.n	8007d9a <__gethex+0x39a>
 8007e20:	6921      	ldr	r1, [r4, #16]
 8007e22:	4559      	cmp	r1, fp
 8007e24:	dd0b      	ble.n	8007e3e <__gethex+0x43e>
 8007e26:	2101      	movs	r1, #1
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f7ff fd81 	bl	8007930 <rshift>
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	3601      	adds	r6, #1
 8007e32:	42b3      	cmp	r3, r6
 8007e34:	f6ff aeda 	blt.w	8007bec <__gethex+0x1ec>
 8007e38:	f04f 0801 	mov.w	r8, #1
 8007e3c:	e7c2      	b.n	8007dc4 <__gethex+0x3c4>
 8007e3e:	f015 051f 	ands.w	r5, r5, #31
 8007e42:	d0f9      	beq.n	8007e38 <__gethex+0x438>
 8007e44:	9b01      	ldr	r3, [sp, #4]
 8007e46:	441a      	add	r2, r3
 8007e48:	f1c5 0520 	rsb	r5, r5, #32
 8007e4c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007e50:	f7fd fee2 	bl	8005c18 <__hi0bits>
 8007e54:	42a8      	cmp	r0, r5
 8007e56:	dbe6      	blt.n	8007e26 <__gethex+0x426>
 8007e58:	e7ee      	b.n	8007e38 <__gethex+0x438>
 8007e5a:	bf00      	nop
 8007e5c:	0800826d 	.word	0x0800826d

08007e60 <L_shift>:
 8007e60:	f1c2 0208 	rsb	r2, r2, #8
 8007e64:	0092      	lsls	r2, r2, #2
 8007e66:	b570      	push	{r4, r5, r6, lr}
 8007e68:	f1c2 0620 	rsb	r6, r2, #32
 8007e6c:	6843      	ldr	r3, [r0, #4]
 8007e6e:	6804      	ldr	r4, [r0, #0]
 8007e70:	fa03 f506 	lsl.w	r5, r3, r6
 8007e74:	432c      	orrs	r4, r5
 8007e76:	40d3      	lsrs	r3, r2
 8007e78:	6004      	str	r4, [r0, #0]
 8007e7a:	f840 3f04 	str.w	r3, [r0, #4]!
 8007e7e:	4288      	cmp	r0, r1
 8007e80:	d3f4      	bcc.n	8007e6c <L_shift+0xc>
 8007e82:	bd70      	pop	{r4, r5, r6, pc}

08007e84 <__match>:
 8007e84:	b530      	push	{r4, r5, lr}
 8007e86:	6803      	ldr	r3, [r0, #0]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e8e:	b914      	cbnz	r4, 8007e96 <__match+0x12>
 8007e90:	6003      	str	r3, [r0, #0]
 8007e92:	2001      	movs	r0, #1
 8007e94:	bd30      	pop	{r4, r5, pc}
 8007e96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007e9e:	2d19      	cmp	r5, #25
 8007ea0:	bf98      	it	ls
 8007ea2:	3220      	addls	r2, #32
 8007ea4:	42a2      	cmp	r2, r4
 8007ea6:	d0f0      	beq.n	8007e8a <__match+0x6>
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	e7f3      	b.n	8007e94 <__match+0x10>

08007eac <__hexnan>:
 8007eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb0:	680b      	ldr	r3, [r1, #0]
 8007eb2:	6801      	ldr	r1, [r0, #0]
 8007eb4:	115e      	asrs	r6, r3, #5
 8007eb6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007eba:	f013 031f 	ands.w	r3, r3, #31
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	bf18      	it	ne
 8007ec2:	3604      	addne	r6, #4
 8007ec4:	2500      	movs	r5, #0
 8007ec6:	1f37      	subs	r7, r6, #4
 8007ec8:	4682      	mov	sl, r0
 8007eca:	4690      	mov	r8, r2
 8007ecc:	9301      	str	r3, [sp, #4]
 8007ece:	f846 5c04 	str.w	r5, [r6, #-4]
 8007ed2:	46b9      	mov	r9, r7
 8007ed4:	463c      	mov	r4, r7
 8007ed6:	9502      	str	r5, [sp, #8]
 8007ed8:	46ab      	mov	fp, r5
 8007eda:	784a      	ldrb	r2, [r1, #1]
 8007edc:	1c4b      	adds	r3, r1, #1
 8007ede:	9303      	str	r3, [sp, #12]
 8007ee0:	b342      	cbz	r2, 8007f34 <__hexnan+0x88>
 8007ee2:	4610      	mov	r0, r2
 8007ee4:	9105      	str	r1, [sp, #20]
 8007ee6:	9204      	str	r2, [sp, #16]
 8007ee8:	f7ff fd74 	bl	80079d4 <__hexdig_fun>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	d14f      	bne.n	8007f90 <__hexnan+0xe4>
 8007ef0:	9a04      	ldr	r2, [sp, #16]
 8007ef2:	9905      	ldr	r1, [sp, #20]
 8007ef4:	2a20      	cmp	r2, #32
 8007ef6:	d818      	bhi.n	8007f2a <__hexnan+0x7e>
 8007ef8:	9b02      	ldr	r3, [sp, #8]
 8007efa:	459b      	cmp	fp, r3
 8007efc:	dd13      	ble.n	8007f26 <__hexnan+0x7a>
 8007efe:	454c      	cmp	r4, r9
 8007f00:	d206      	bcs.n	8007f10 <__hexnan+0x64>
 8007f02:	2d07      	cmp	r5, #7
 8007f04:	dc04      	bgt.n	8007f10 <__hexnan+0x64>
 8007f06:	462a      	mov	r2, r5
 8007f08:	4649      	mov	r1, r9
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f7ff ffa8 	bl	8007e60 <L_shift>
 8007f10:	4544      	cmp	r4, r8
 8007f12:	d950      	bls.n	8007fb6 <__hexnan+0x10a>
 8007f14:	2300      	movs	r3, #0
 8007f16:	f1a4 0904 	sub.w	r9, r4, #4
 8007f1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f1e:	f8cd b008 	str.w	fp, [sp, #8]
 8007f22:	464c      	mov	r4, r9
 8007f24:	461d      	mov	r5, r3
 8007f26:	9903      	ldr	r1, [sp, #12]
 8007f28:	e7d7      	b.n	8007eda <__hexnan+0x2e>
 8007f2a:	2a29      	cmp	r2, #41	; 0x29
 8007f2c:	d155      	bne.n	8007fda <__hexnan+0x12e>
 8007f2e:	3102      	adds	r1, #2
 8007f30:	f8ca 1000 	str.w	r1, [sl]
 8007f34:	f1bb 0f00 	cmp.w	fp, #0
 8007f38:	d04f      	beq.n	8007fda <__hexnan+0x12e>
 8007f3a:	454c      	cmp	r4, r9
 8007f3c:	d206      	bcs.n	8007f4c <__hexnan+0xa0>
 8007f3e:	2d07      	cmp	r5, #7
 8007f40:	dc04      	bgt.n	8007f4c <__hexnan+0xa0>
 8007f42:	462a      	mov	r2, r5
 8007f44:	4649      	mov	r1, r9
 8007f46:	4620      	mov	r0, r4
 8007f48:	f7ff ff8a 	bl	8007e60 <L_shift>
 8007f4c:	4544      	cmp	r4, r8
 8007f4e:	d934      	bls.n	8007fba <__hexnan+0x10e>
 8007f50:	f1a8 0204 	sub.w	r2, r8, #4
 8007f54:	4623      	mov	r3, r4
 8007f56:	f853 1b04 	ldr.w	r1, [r3], #4
 8007f5a:	f842 1f04 	str.w	r1, [r2, #4]!
 8007f5e:	429f      	cmp	r7, r3
 8007f60:	d2f9      	bcs.n	8007f56 <__hexnan+0xaa>
 8007f62:	1b3b      	subs	r3, r7, r4
 8007f64:	f023 0303 	bic.w	r3, r3, #3
 8007f68:	3304      	adds	r3, #4
 8007f6a:	3e03      	subs	r6, #3
 8007f6c:	3401      	adds	r4, #1
 8007f6e:	42a6      	cmp	r6, r4
 8007f70:	bf38      	it	cc
 8007f72:	2304      	movcc	r3, #4
 8007f74:	4443      	add	r3, r8
 8007f76:	2200      	movs	r2, #0
 8007f78:	f843 2b04 	str.w	r2, [r3], #4
 8007f7c:	429f      	cmp	r7, r3
 8007f7e:	d2fb      	bcs.n	8007f78 <__hexnan+0xcc>
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	b91b      	cbnz	r3, 8007f8c <__hexnan+0xe0>
 8007f84:	4547      	cmp	r7, r8
 8007f86:	d126      	bne.n	8007fd6 <__hexnan+0x12a>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	603b      	str	r3, [r7, #0]
 8007f8c:	2005      	movs	r0, #5
 8007f8e:	e025      	b.n	8007fdc <__hexnan+0x130>
 8007f90:	3501      	adds	r5, #1
 8007f92:	2d08      	cmp	r5, #8
 8007f94:	f10b 0b01 	add.w	fp, fp, #1
 8007f98:	dd06      	ble.n	8007fa8 <__hexnan+0xfc>
 8007f9a:	4544      	cmp	r4, r8
 8007f9c:	d9c3      	bls.n	8007f26 <__hexnan+0x7a>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	f844 3c04 	str.w	r3, [r4, #-4]
 8007fa4:	2501      	movs	r5, #1
 8007fa6:	3c04      	subs	r4, #4
 8007fa8:	6822      	ldr	r2, [r4, #0]
 8007faa:	f000 000f 	and.w	r0, r0, #15
 8007fae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007fb2:	6020      	str	r0, [r4, #0]
 8007fb4:	e7b7      	b.n	8007f26 <__hexnan+0x7a>
 8007fb6:	2508      	movs	r5, #8
 8007fb8:	e7b5      	b.n	8007f26 <__hexnan+0x7a>
 8007fba:	9b01      	ldr	r3, [sp, #4]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d0df      	beq.n	8007f80 <__hexnan+0xd4>
 8007fc0:	f1c3 0320 	rsb	r3, r3, #32
 8007fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc8:	40da      	lsrs	r2, r3
 8007fca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007fce:	4013      	ands	r3, r2
 8007fd0:	f846 3c04 	str.w	r3, [r6, #-4]
 8007fd4:	e7d4      	b.n	8007f80 <__hexnan+0xd4>
 8007fd6:	3f04      	subs	r7, #4
 8007fd8:	e7d2      	b.n	8007f80 <__hexnan+0xd4>
 8007fda:	2004      	movs	r0, #4
 8007fdc:	b007      	add	sp, #28
 8007fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007fe2 <__ascii_mbtowc>:
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	b901      	cbnz	r1, 8007fe8 <__ascii_mbtowc+0x6>
 8007fe6:	a901      	add	r1, sp, #4
 8007fe8:	b142      	cbz	r2, 8007ffc <__ascii_mbtowc+0x1a>
 8007fea:	b14b      	cbz	r3, 8008000 <__ascii_mbtowc+0x1e>
 8007fec:	7813      	ldrb	r3, [r2, #0]
 8007fee:	600b      	str	r3, [r1, #0]
 8007ff0:	7812      	ldrb	r2, [r2, #0]
 8007ff2:	1e10      	subs	r0, r2, #0
 8007ff4:	bf18      	it	ne
 8007ff6:	2001      	movne	r0, #1
 8007ff8:	b002      	add	sp, #8
 8007ffa:	4770      	bx	lr
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	e7fb      	b.n	8007ff8 <__ascii_mbtowc+0x16>
 8008000:	f06f 0001 	mvn.w	r0, #1
 8008004:	e7f8      	b.n	8007ff8 <__ascii_mbtowc+0x16>

08008006 <_realloc_r>:
 8008006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800800a:	4680      	mov	r8, r0
 800800c:	4614      	mov	r4, r2
 800800e:	460e      	mov	r6, r1
 8008010:	b921      	cbnz	r1, 800801c <_realloc_r+0x16>
 8008012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008016:	4611      	mov	r1, r2
 8008018:	f7fd bc80 	b.w	800591c <_malloc_r>
 800801c:	b92a      	cbnz	r2, 800802a <_realloc_r+0x24>
 800801e:	f7fd fc0b 	bl	8005838 <_free_r>
 8008022:	4625      	mov	r5, r4
 8008024:	4628      	mov	r0, r5
 8008026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800802a:	f000 f842 	bl	80080b2 <_malloc_usable_size_r>
 800802e:	4284      	cmp	r4, r0
 8008030:	4607      	mov	r7, r0
 8008032:	d802      	bhi.n	800803a <_realloc_r+0x34>
 8008034:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008038:	d812      	bhi.n	8008060 <_realloc_r+0x5a>
 800803a:	4621      	mov	r1, r4
 800803c:	4640      	mov	r0, r8
 800803e:	f7fd fc6d 	bl	800591c <_malloc_r>
 8008042:	4605      	mov	r5, r0
 8008044:	2800      	cmp	r0, #0
 8008046:	d0ed      	beq.n	8008024 <_realloc_r+0x1e>
 8008048:	42bc      	cmp	r4, r7
 800804a:	4622      	mov	r2, r4
 800804c:	4631      	mov	r1, r6
 800804e:	bf28      	it	cs
 8008050:	463a      	movcs	r2, r7
 8008052:	f7ff fc27 	bl	80078a4 <memcpy>
 8008056:	4631      	mov	r1, r6
 8008058:	4640      	mov	r0, r8
 800805a:	f7fd fbed 	bl	8005838 <_free_r>
 800805e:	e7e1      	b.n	8008024 <_realloc_r+0x1e>
 8008060:	4635      	mov	r5, r6
 8008062:	e7df      	b.n	8008024 <_realloc_r+0x1e>

08008064 <__ascii_wctomb>:
 8008064:	4603      	mov	r3, r0
 8008066:	4608      	mov	r0, r1
 8008068:	b141      	cbz	r1, 800807c <__ascii_wctomb+0x18>
 800806a:	2aff      	cmp	r2, #255	; 0xff
 800806c:	d904      	bls.n	8008078 <__ascii_wctomb+0x14>
 800806e:	228a      	movs	r2, #138	; 0x8a
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	f04f 30ff 	mov.w	r0, #4294967295
 8008076:	4770      	bx	lr
 8008078:	700a      	strb	r2, [r1, #0]
 800807a:	2001      	movs	r0, #1
 800807c:	4770      	bx	lr
	...

08008080 <fiprintf>:
 8008080:	b40e      	push	{r1, r2, r3}
 8008082:	b503      	push	{r0, r1, lr}
 8008084:	4601      	mov	r1, r0
 8008086:	ab03      	add	r3, sp, #12
 8008088:	4805      	ldr	r0, [pc, #20]	; (80080a0 <fiprintf+0x20>)
 800808a:	f853 2b04 	ldr.w	r2, [r3], #4
 800808e:	6800      	ldr	r0, [r0, #0]
 8008090:	9301      	str	r3, [sp, #4]
 8008092:	f7ff f983 	bl	800739c <_vfiprintf_r>
 8008096:	b002      	add	sp, #8
 8008098:	f85d eb04 	ldr.w	lr, [sp], #4
 800809c:	b003      	add	sp, #12
 800809e:	4770      	bx	lr
 80080a0:	20000064 	.word	0x20000064

080080a4 <abort>:
 80080a4:	b508      	push	{r3, lr}
 80080a6:	2006      	movs	r0, #6
 80080a8:	f000 f834 	bl	8008114 <raise>
 80080ac:	2001      	movs	r0, #1
 80080ae:	f7f9 fa2a 	bl	8001506 <_exit>

080080b2 <_malloc_usable_size_r>:
 80080b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080b6:	1f18      	subs	r0, r3, #4
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	bfbc      	itt	lt
 80080bc:	580b      	ldrlt	r3, [r1, r0]
 80080be:	18c0      	addlt	r0, r0, r3
 80080c0:	4770      	bx	lr

080080c2 <_raise_r>:
 80080c2:	291f      	cmp	r1, #31
 80080c4:	b538      	push	{r3, r4, r5, lr}
 80080c6:	4604      	mov	r4, r0
 80080c8:	460d      	mov	r5, r1
 80080ca:	d904      	bls.n	80080d6 <_raise_r+0x14>
 80080cc:	2316      	movs	r3, #22
 80080ce:	6003      	str	r3, [r0, #0]
 80080d0:	f04f 30ff 	mov.w	r0, #4294967295
 80080d4:	bd38      	pop	{r3, r4, r5, pc}
 80080d6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80080d8:	b112      	cbz	r2, 80080e0 <_raise_r+0x1e>
 80080da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080de:	b94b      	cbnz	r3, 80080f4 <_raise_r+0x32>
 80080e0:	4620      	mov	r0, r4
 80080e2:	f000 f831 	bl	8008148 <_getpid_r>
 80080e6:	462a      	mov	r2, r5
 80080e8:	4601      	mov	r1, r0
 80080ea:	4620      	mov	r0, r4
 80080ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080f0:	f000 b818 	b.w	8008124 <_kill_r>
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d00a      	beq.n	800810e <_raise_r+0x4c>
 80080f8:	1c59      	adds	r1, r3, #1
 80080fa:	d103      	bne.n	8008104 <_raise_r+0x42>
 80080fc:	2316      	movs	r3, #22
 80080fe:	6003      	str	r3, [r0, #0]
 8008100:	2001      	movs	r0, #1
 8008102:	e7e7      	b.n	80080d4 <_raise_r+0x12>
 8008104:	2400      	movs	r4, #0
 8008106:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800810a:	4628      	mov	r0, r5
 800810c:	4798      	blx	r3
 800810e:	2000      	movs	r0, #0
 8008110:	e7e0      	b.n	80080d4 <_raise_r+0x12>
	...

08008114 <raise>:
 8008114:	4b02      	ldr	r3, [pc, #8]	; (8008120 <raise+0xc>)
 8008116:	4601      	mov	r1, r0
 8008118:	6818      	ldr	r0, [r3, #0]
 800811a:	f7ff bfd2 	b.w	80080c2 <_raise_r>
 800811e:	bf00      	nop
 8008120:	20000064 	.word	0x20000064

08008124 <_kill_r>:
 8008124:	b538      	push	{r3, r4, r5, lr}
 8008126:	4d07      	ldr	r5, [pc, #28]	; (8008144 <_kill_r+0x20>)
 8008128:	2300      	movs	r3, #0
 800812a:	4604      	mov	r4, r0
 800812c:	4608      	mov	r0, r1
 800812e:	4611      	mov	r1, r2
 8008130:	602b      	str	r3, [r5, #0]
 8008132:	f7f9 f9d8 	bl	80014e6 <_kill>
 8008136:	1c43      	adds	r3, r0, #1
 8008138:	d102      	bne.n	8008140 <_kill_r+0x1c>
 800813a:	682b      	ldr	r3, [r5, #0]
 800813c:	b103      	cbz	r3, 8008140 <_kill_r+0x1c>
 800813e:	6023      	str	r3, [r4, #0]
 8008140:	bd38      	pop	{r3, r4, r5, pc}
 8008142:	bf00      	nop
 8008144:	200003c8 	.word	0x200003c8

08008148 <_getpid_r>:
 8008148:	f7f9 b9c6 	b.w	80014d8 <_getpid>

0800814c <_init>:
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	bf00      	nop
 8008150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008152:	bc08      	pop	{r3}
 8008154:	469e      	mov	lr, r3
 8008156:	4770      	bx	lr

08008158 <_fini>:
 8008158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815a:	bf00      	nop
 800815c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800815e:	bc08      	pop	{r3}
 8008160:	469e      	mov	lr, r3
 8008162:	4770      	bx	lr
